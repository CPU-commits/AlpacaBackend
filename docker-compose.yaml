services:
  app:
    build:
      context: ./
      dockerfile: ./Dockerfile.dev
    volumes:
      - ./:/app
    ports:
      - 8000:8080
    depends_on:
      - nats-js
      - crdb
      - typesense
      - redis
      - dkron
      - dkron-init
    networks:
      - alpaca_network
  nats-js:
    image: nats:2.10-scratch
    ports:
      - 4222:4222
    command: "-js"
    networks:
      - alpaca_network

  crdb:
    image: cockroachdb/cockroach:v24.2.3
    ports:
      - "26257:26257"
      - "8090:8080"
    command: start-single-node --insecure
    volumes:
      - "db:/cockroach/cockroach-data"
    networks:
      - alpaca_network
  typesense:
    image: typesense/typesense:29.0
    restart: on-failure
    ports:
      - "8108:8108"
    volumes:
      - typesense:/data
    command: "--data-dir /data --api-key=xyz --enable-cors"
    networks:
      - alpaca_network
  redis:
    image: redis:8.0-alpine
    restart: always
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASS}
    environment:
      - REDIS_PASS=${REDIS_PASS}
    networks:
      - alpaca_network
    volumes:
      - redis:/data
  tunnel:
    image: cloudflare/cloudflared:latest
    container_name: tunnel
    command: tunnel --no-autoupdate run --token ${TOKEN_TUNNEL}
    networks:
      - alpaca_network
  dkron:
    image: dkron/dkron:latest
    command:
      [
        "agent",
        "--server",
        "--bootstrap-expect=1",
        "--node-name=dkron-0",
        "--log-level=info",
      ]
    ports:
      - "8081:8080"
      # - "8946:8946"
      # - "6868:6868"
    networks:
      - alpaca_network

  dkron-init:
    image: alpine:3.20
    depends_on:
      dkron:
        condition: service_started

    environment:
      - DKRON_URL=http://dkron:8080
      - APP_WAIT_URLS=http://app:8000/healthz
      - APP_WAIT_TIMEOUT=10
    volumes:
      - ./dkron/jobs:/jobs:ro
      - ./dkron/scripts/register_jobs.sh:/register_jobs.sh:ro
    entrypoint:
      ["/bin/sh", "-c", "apk add --no-cache curl jq && /register_jobs.sh"]
    networks:
      - alpaca_network

networks:
  alpaca_network:
    external: true

volumes:
  db:
  typesense:
  redis:
  crdb:
