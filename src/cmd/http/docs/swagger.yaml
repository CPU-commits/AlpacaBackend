basePath: /api
consumes:
- application/json
definitions:
  controller.GetLikeResponse:
    properties:
      is_like:
        type: boolean
    type: object
  controller.GetPublicationResponse:
    properties:
      publication:
        $ref: '#/definitions/model.Publication'
    type: object
  controller.GetPublicationsResponse:
    properties:
      publications:
        items:
          $ref: '#/definitions/model.Publication'
        type: array
    type: object
  controller.GetTattoosResponse:
    properties:
      tattoos:
        items:
          $ref: '#/definitions/model.Tattoo'
        type: array
    type: object
  controller.LoginResponse:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  controller.PublicationDtoResponse:
    properties:
      content:
        maxLength: 500
        type: string
      idCategories:
        description: Images       []PublicationImageDto `form:"images" binding:"dive"`
        items:
          type: integer
        type: array
    required:
    - content
    type: object
  controller.UpdateProfileResponse:
    properties:
      key:
        type: string
    type: object
  dto.AuthDto:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterDto:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        type: string
      password:
        minLength: 6
        type: string
      role:
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - name
    - password
    - role
    - username
    type: object
  dto.UpdateProfileDto:
    properties:
      description:
        maxLength: 500
        type: string
    type: object
  model.Coord:
    properties:
      x:
        type: number
      "y":
        type: number
    type: object
  model.Image:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      key:
        type: string
      mime:
        type: string
      name:
        type: string
    type: object
  model.Profile:
    properties:
      avatar:
        $ref: '#/definitions/model.Image'
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      idUser:
        type: integer
      likes:
        type: integer
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.Publication:
    properties:
      categories:
        items:
          type: string
        type: array
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      idProfile:
        type: integer
      images:
        items:
          $ref: '#/definitions/model.Image'
        type: array
      likes:
        type: integer
      mentions:
        items:
          type: integer
        type: array
      profile:
        $ref: '#/definitions/model.Profile'
      tattoos:
        items:
          $ref: '#/definitions/model.Tattoo'
        type: array
    type: object
  model.Role:
    enum:
    - user
    - tattooArtist
    - admin
    type: string
    x-enum-varnames:
    - USER_ROLE
    - TATTOO_ARTIST_ROLE
    - ADMIN_ROLE
  model.Tattoo:
    properties:
      categories:
        items:
          type: string
        type: array
      coord:
        $ref: '#/definitions/model.Coord'
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      idPublication:
        type: integer
      image:
        $ref: '#/definitions/model.Image'
      likes:
        type: integer
      profile:
        $ref: '#/definitions/model.Profile'
      views:
        type: integer
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.Role'
        type: array
      username:
        type: string
    type: object
  utils.ErrorProblemDetails:
    properties:
      param:
        example: "3"
        type: string
      pointer:
        example: max
        type: string
      title:
        example: name
        type: string
    type: object
  utils.ProblemDetails:
    properties:
      detail:
        example: Detalle técnico del error
        type: string
      errors:
        items:
          $ref: '#/definitions/utils.ErrorProblemDetails'
        type: array
      title:
        example: Descripción del problema para mostrar al usuario
        type: string
      type:
        example: /docs/errors/errorPointer
        type: string
    required:
    - title
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server
  license:
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      parameters:
      - description: Password y username
        in: body
        name: authDto
        required: true
        schema:
          $ref: '#/definitions/dto.AuthDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.LoginResponse'
        "403":
          description: Credenciales inválidas
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "409":
          description: La sesión no existe. Probablemente porque la eliminaron
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Loggearse dentro de la aplicación de NeoHome
      tags:
      - auth
  /api/auth/refresh:
    post:
      parameters:
      - description: Token de refresco, es decir, de sesión
        in: header
        name: X-Refresh
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.LoginResponse'
        "400":
          description: No es un token válido JWT
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "403":
          description: No está el token de refresco en el header X-Refresh
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "404":
          description: El token no tiene un usuario registrado en la BD
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "409":
          description: La sesión no existe. Probablemente porque la eliminaron
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Refrescar sesión
      tags:
      - auth
  /api/auth/register:
    post:
      parameters:
      - description: name, username, email, password, role
        in: body
        name: authDto
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterDto'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.LoginResponse'
        "403":
          description: Credenciales inválidas
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "409":
          description: La sesión no existe. Probablemente porque la eliminaron
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Registrase dentro de la aplicación de AlpacaTatto
      tags:
      - auth
  /api/profiles:
    patch:
      parameters:
      - description: username
        in: body
        name: UpdateProfileDto
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileDto'
      responses:
        "200":
          description: OK
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Actualizar el perfil de un usuario
      tags:
      - profile
  /api/profiles/{username}:
    get:
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: numero de pagina
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetTattoosResponse'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Recibir el perfil de un usuario
      tags:
      - profile
  /api/profiles/avatar:
    patch:
      consumes:
      - multipart/form-data
      parameters:
      - description: Imagen del avatar (jpg/png/webp)
        in: formData
        name: avatar
        required: true
        type: file
      responses:
        "201":
          description: Clave del nuevo avatar
          schema:
            $ref: '#/definitions/controller.UpdateProfileResponse'
        "400":
          description: Archivo no recibido o inválido
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Actualizar el avatar del perfil de un usuario
      tags:
      - profile
  /api/publications:
    post:
      parameters:
      - description: objeto XD
        in: body
        name: PublicationDto
        required: true
        schema:
          $ref: '#/definitions/controller.PublicationDtoResponse'
      - description: Imagenes[]
        in: body
        name: images
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetPublicationResponse'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Publicar una publicacion
      tags:
      - publications
  /api/publications/{idPost}/like:
    get:
      parameters:
      - description: id de post
        in: path
        name: idPost
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetLikeResponse'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Recibir el like de un usuario sobre una publicacion
      tags:
      - publications
    post:
      parameters:
      - description: id de post
        in: path
        name: idPost
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetLikeResponse'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Dar Like o dislike
      tags:
      - publications
  /api/publications/{idPublication}:
    delete:
      parameters:
      - description: Id de publicacion
        in: path
        name: idPublication
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Eliminar una publicacion
      tags:
      - publications
  /api/publications/username/{username}:
    get:
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: N° page
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetPublicationsResponse'
        "403":
          description: Credenciales inválidas
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "409":
          description: La sesión no existe. Probablemente porque la eliminaron
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Recibir publicaciones de un usuario
      tags:
      - publications
  /api/tattoos:
    post:
      consumes:
      - multipart/form-data
      description: |-
        ```json
        {
        "tattoos": [
        {
        "description": "Descripción del tatuaje",
        "image": "archivo_imagen",
        "coord": {"x": 100, "y": 200},
        }]
        }
        ```
      parameters:
      - description: Imagen del tatuaje (jpg/png/webp)
        in: formData
        name: image
        required: true
        type: file
      responses:
        "201":
          description: Created
        "400":
          description: Formulario inválido o sin datos de tatuajes
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "415":
          description: El tipo de imagen es inválido, debe ser jpg/png/webp
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
        "502":
          description: Falló el repositorio
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Publicar nuevos tatuajes {admin}
      tags:
      - tattoos
  /api/tattoos/{username}:
    get:
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: numero de pagina
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetTattoosResponse'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Recibir los tatuajes de un usuario
      tags:
      - tattoos
  /api/tattoos/latest/{username}:
    get:
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.GetTattoosResponse'
        "503":
          description: Error con la base de datos
          schema:
            $ref: '#/definitions/utils.ProblemDetails'
      summary: Recibir los ultimos tatuajes de un usuario
      tags:
      - tattoos
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: BearerJWTToken in Authorization Header
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
