// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PostCategory is an object representing the database table.
type PostCategory struct {
	ID         int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDPost     int64 `boil:"id_post" json:"id_post" toml:"id_post" yaml:"id_post"`
	IDCategory int64 `boil:"id_category" json:"id_category" toml:"id_category" yaml:"id_category"`

	R *postCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostCategoryColumns = struct {
	ID         string
	IDPost     string
	IDCategory string
}{
	ID:         "id",
	IDPost:     "id_post",
	IDCategory: "id_category",
}

var PostCategoryTableColumns = struct {
	ID         string
	IDPost     string
	IDCategory string
}{
	ID:         "post_categories.id",
	IDPost:     "post_categories.id_post",
	IDCategory: "post_categories.id_category",
}

// Generated where

var PostCategoryWhere = struct {
	ID         whereHelperint64
	IDPost     whereHelperint64
	IDCategory whereHelperint64
}{
	ID:         whereHelperint64{field: "\"post_categories\".\"id\""},
	IDPost:     whereHelperint64{field: "\"post_categories\".\"id_post\""},
	IDCategory: whereHelperint64{field: "\"post_categories\".\"id_category\""},
}

// PostCategoryRels is where relationship names are stored.
var PostCategoryRels = struct {
	IDPostPost         string
	IDCategoryCategory string
}{
	IDPostPost:         "IDPostPost",
	IDCategoryCategory: "IDCategoryCategory",
}

// postCategoryR is where relationships are stored.
type postCategoryR struct {
	IDPostPost         *Post     `boil:"IDPostPost" json:"IDPostPost" toml:"IDPostPost" yaml:"IDPostPost"`
	IDCategoryCategory *Category `boil:"IDCategoryCategory" json:"IDCategoryCategory" toml:"IDCategoryCategory" yaml:"IDCategoryCategory"`
}

// NewStruct creates a new relationship struct
func (*postCategoryR) NewStruct() *postCategoryR {
	return &postCategoryR{}
}

func (r *postCategoryR) GetIDPostPost() *Post {
	if r == nil {
		return nil
	}
	return r.IDPostPost
}

func (r *postCategoryR) GetIDCategoryCategory() *Category {
	if r == nil {
		return nil
	}
	return r.IDCategoryCategory
}

// postCategoryL is where Load methods for each relationship are stored.
type postCategoryL struct{}

var (
	postCategoryAllColumns            = []string{"id", "id_post", "id_category"}
	postCategoryColumnsWithoutDefault = []string{"id_post", "id_category"}
	postCategoryColumnsWithDefault    = []string{"id"}
	postCategoryPrimaryKeyColumns     = []string{"id"}
	postCategoryGeneratedColumns      = []string{}
)

type (
	// PostCategorySlice is an alias for a slice of pointers to PostCategory.
	// This should almost always be used instead of []PostCategory.
	PostCategorySlice []*PostCategory
	// PostCategoryHook is the signature for custom PostCategory hook methods
	PostCategoryHook func(context.Context, boil.ContextExecutor, *PostCategory) error

	postCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postCategoryType                 = reflect.TypeOf(&PostCategory{})
	postCategoryMapping              = queries.MakeStructMapping(postCategoryType)
	postCategoryPrimaryKeyMapping, _ = queries.BindMapping(postCategoryType, postCategoryMapping, postCategoryPrimaryKeyColumns)
	postCategoryInsertCacheMut       sync.RWMutex
	postCategoryInsertCache          = make(map[string]insertCache)
	postCategoryUpdateCacheMut       sync.RWMutex
	postCategoryUpdateCache          = make(map[string]updateCache)
	postCategoryUpsertCacheMut       sync.RWMutex
	postCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postCategoryAfterSelectMu sync.Mutex
var postCategoryAfterSelectHooks []PostCategoryHook

var postCategoryBeforeInsertMu sync.Mutex
var postCategoryBeforeInsertHooks []PostCategoryHook
var postCategoryAfterInsertMu sync.Mutex
var postCategoryAfterInsertHooks []PostCategoryHook

var postCategoryBeforeUpdateMu sync.Mutex
var postCategoryBeforeUpdateHooks []PostCategoryHook
var postCategoryAfterUpdateMu sync.Mutex
var postCategoryAfterUpdateHooks []PostCategoryHook

var postCategoryBeforeDeleteMu sync.Mutex
var postCategoryBeforeDeleteHooks []PostCategoryHook
var postCategoryAfterDeleteMu sync.Mutex
var postCategoryAfterDeleteHooks []PostCategoryHook

var postCategoryBeforeUpsertMu sync.Mutex
var postCategoryBeforeUpsertHooks []PostCategoryHook
var postCategoryAfterUpsertMu sync.Mutex
var postCategoryAfterUpsertHooks []PostCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostCategoryHook registers your hook function for all future operations.
func AddPostCategoryHook(hookPoint boil.HookPoint, postCategoryHook PostCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postCategoryAfterSelectMu.Lock()
		postCategoryAfterSelectHooks = append(postCategoryAfterSelectHooks, postCategoryHook)
		postCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		postCategoryBeforeInsertMu.Lock()
		postCategoryBeforeInsertHooks = append(postCategoryBeforeInsertHooks, postCategoryHook)
		postCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		postCategoryAfterInsertMu.Lock()
		postCategoryAfterInsertHooks = append(postCategoryAfterInsertHooks, postCategoryHook)
		postCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		postCategoryBeforeUpdateMu.Lock()
		postCategoryBeforeUpdateHooks = append(postCategoryBeforeUpdateHooks, postCategoryHook)
		postCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		postCategoryAfterUpdateMu.Lock()
		postCategoryAfterUpdateHooks = append(postCategoryAfterUpdateHooks, postCategoryHook)
		postCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		postCategoryBeforeDeleteMu.Lock()
		postCategoryBeforeDeleteHooks = append(postCategoryBeforeDeleteHooks, postCategoryHook)
		postCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		postCategoryAfterDeleteMu.Lock()
		postCategoryAfterDeleteHooks = append(postCategoryAfterDeleteHooks, postCategoryHook)
		postCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		postCategoryBeforeUpsertMu.Lock()
		postCategoryBeforeUpsertHooks = append(postCategoryBeforeUpsertHooks, postCategoryHook)
		postCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		postCategoryAfterUpsertMu.Lock()
		postCategoryAfterUpsertHooks = append(postCategoryAfterUpsertHooks, postCategoryHook)
		postCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single postCategory record from the query.
func (q postCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostCategory, error) {
	o := &PostCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for post_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostCategory records from the query.
func (q postCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostCategorySlice, error) {
	var o []*PostCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostCategory slice")
	}

	if len(postCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostCategory records in the query.
func (q postCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count post_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if post_categories exists")
	}

	return count > 0, nil
}

// IDPostPost pointed to by the foreign key.
func (o *PostCategory) IDPostPost(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPost),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// IDCategoryCategory pointed to by the foreign key.
func (o *PostCategory) IDCategoryCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategory),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// LoadIDPostPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postCategoryL) LoadIDPostPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostCategory interface{}, mods queries.Applicator) error {
	var slice []*PostCategory
	var object *PostCategory

	if singular {
		var ok bool
		object, ok = maybePostCategory.(*PostCategory)
		if !ok {
			object = new(PostCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostCategory))
			}
		}
	} else {
		s, ok := maybePostCategory.(*[]*PostCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postCategoryR{}
		}
		args[object.IDPost] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCategoryR{}
			}

			args[obj.IDPost] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPostPost = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.IDPostPostCategories = append(foreign.R.IDPostPostCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPost == foreign.ID {
				local.R.IDPostPost = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDPostPostCategories = append(foreign.R.IDPostPostCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCategoryCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postCategoryL) LoadIDCategoryCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostCategory interface{}, mods queries.Applicator) error {
	var slice []*PostCategory
	var object *PostCategory

	if singular {
		var ok bool
		object, ok = maybePostCategory.(*PostCategory)
		if !ok {
			object = new(PostCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostCategory))
			}
		}
	} else {
		s, ok := maybePostCategory.(*[]*PostCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postCategoryR{}
		}
		args[object.IDCategory] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postCategoryR{}
			}

			args[obj.IDCategory] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategoryCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.IDCategoryPostCategories = append(foreign.R.IDCategoryPostCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategory == foreign.ID {
				local.R.IDCategoryCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.IDCategoryPostCategories = append(foreign.R.IDCategoryPostCategories, local)
				break
			}
		}
	}

	return nil
}

// SetIDPostPost of the postCategory to the related item.
// Sets o.R.IDPostPost to related.
// Adds o to related.R.IDPostPostCategories.
func (o *PostCategory) SetIDPostPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_post"}),
		strmangle.WhereClause("\"", "\"", 2, postCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPost = related.ID
	if o.R == nil {
		o.R = &postCategoryR{
			IDPostPost: related,
		}
	} else {
		o.R.IDPostPost = related
	}

	if related.R == nil {
		related.R = &postR{
			IDPostPostCategories: PostCategorySlice{o},
		}
	} else {
		related.R.IDPostPostCategories = append(related.R.IDPostPostCategories, o)
	}

	return nil
}

// SetIDCategoryCategory of the postCategory to the related item.
// Sets o.R.IDCategoryCategory to related.
// Adds o to related.R.IDCategoryPostCategories.
func (o *PostCategory) SetIDCategoryCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_category"}),
		strmangle.WhereClause("\"", "\"", 2, postCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategory = related.ID
	if o.R == nil {
		o.R = &postCategoryR{
			IDCategoryCategory: related,
		}
	} else {
		o.R.IDCategoryCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			IDCategoryPostCategories: PostCategorySlice{o},
		}
	} else {
		related.R.IDCategoryPostCategories = append(related.R.IDCategoryPostCategories, o)
	}

	return nil
}

// PostCategories retrieves all the records using an executor.
func PostCategories(mods ...qm.QueryMod) postCategoryQuery {
	mods = append(mods, qm.From("\"post_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"post_categories\".*"})
	}

	return postCategoryQuery{q}
}

// FindPostCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostCategory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PostCategory, error) {
	postCategoryObj := &PostCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"post_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from post_categories")
	}

	if err = postCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postCategoryObj, err
	}

	return postCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no post_categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postCategoryInsertCacheMut.RLock()
	cache, cached := postCategoryInsertCache[key]
	postCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postCategoryAllColumns,
			postCategoryColumnsWithDefault,
			postCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postCategoryType, postCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postCategoryType, postCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"post_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"post_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into post_categories")
	}

	if !cached {
		postCategoryInsertCacheMut.Lock()
		postCategoryInsertCache[key] = cache
		postCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postCategoryUpdateCacheMut.RLock()
	cache, cached := postCategoryUpdateCache[key]
	postCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postCategoryAllColumns,
			postCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update post_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"post_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postCategoryType, postCategoryMapping, append(wl, postCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update post_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for post_categories")
	}

	if !cached {
		postCategoryUpdateCacheMut.Lock()
		postCategoryUpdateCache[key] = cache
		postCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for post_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for post_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"post_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postCategory")
	}
	return rowsAff, nil
}

// Delete deletes a single PostCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"post_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from post_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for post_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from post_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"post_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_categories")
	}

	if len(postCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"post_categories\".* FROM \"post_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostCategorySlice")
	}

	*o = slice

	return nil
}

// PostCategoryExists checks if the PostCategory row exists.
func PostCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"post_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if post_categories exists")
	}

	return exists, nil
}

// Exists checks if the PostCategory row exists.
func (o *PostCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostCategoryExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no post_categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postCategoryUpsertCacheMut.RLock()
	cache, cached := postCategoryUpsertCache[key]
	postCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			postCategoryAllColumns,
			postCategoryColumnsWithDefault,
			postCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			postCategoryAllColumns,
			postCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert post_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(postCategoryPrimaryKeyColumns))
			copy(conflict, postCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"post_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(postCategoryType, postCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postCategoryType, postCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert post_categories")
	}

	if !cached {
		postCategoryUpsertCacheMut.Lock()
		postCategoryUpsertCache[key] = cache
		postCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
