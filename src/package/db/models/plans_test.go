// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlans(t *testing.T) {
	t.Parallel()

	query := Plans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Plans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Plan exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlanExists to return true, but got false.")
	}
}

func testPlansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	planFound, err := FindPlan(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if planFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Plans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Plans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	planOne := &Plan{}
	planTwo := &Plan{}
	if err = randomize.Struct(seed, planOne, planDBTypes, false, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}
	if err = randomize.Struct(seed, planTwo, planDBTypes, false, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Plans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	planOne := &Plan{}
	planTwo := &Plan{}
	if err = randomize.Struct(seed, planOne, planDBTypes, false, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}
	if err = randomize.Struct(seed, planTwo, planDBTypes, false, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = planOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = planTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func planBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func planAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Plan) error {
	*o = Plan{}
	return nil
}

func testPlansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Plan{}
	o := &Plan{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, planDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Plan object: %s", err)
	}

	AddPlanHook(boil.BeforeInsertHook, planBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	planBeforeInsertHooks = []PlanHook{}

	AddPlanHook(boil.AfterInsertHook, planAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	planAfterInsertHooks = []PlanHook{}

	AddPlanHook(boil.AfterSelectHook, planAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	planAfterSelectHooks = []PlanHook{}

	AddPlanHook(boil.BeforeUpdateHook, planBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	planBeforeUpdateHooks = []PlanHook{}

	AddPlanHook(boil.AfterUpdateHook, planAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	planAfterUpdateHooks = []PlanHook{}

	AddPlanHook(boil.BeforeDeleteHook, planBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	planBeforeDeleteHooks = []PlanHook{}

	AddPlanHook(boil.AfterDeleteHook, planAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	planAfterDeleteHooks = []PlanHook{}

	AddPlanHook(boil.BeforeUpsertHook, planBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	planBeforeUpsertHooks = []PlanHook{}

	AddPlanHook(boil.AfterUpsertHook, planAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	planAfterUpsertHooks = []PlanHook{}
}

func testPlansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(planPrimaryKeyColumns, planColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlanToManyIDPlanSubscriptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Plan
	var b, c Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDPlan = a.ID
	c.IDPlan = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDPlanSubscriptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDPlan == b.IDPlan {
			bFound = true
		}
		if v.IDPlan == c.IDPlan {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlanSlice{&a}
	if err = a.L.LoadIDPlanSubscriptions(ctx, tx, false, (*[]*Plan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDPlanSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDPlanSubscriptions = nil
	if err = a.L.LoadIDPlanSubscriptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDPlanSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlanToManyAddOpIDPlanSubscriptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Plan
	var b, c, d, e Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, planDBTypes, false, strmangle.SetComplement(planPrimaryKeyColumns, planColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Subscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, subscriptionDBTypes, false, strmangle.SetComplement(subscriptionPrimaryKeyColumns, subscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Subscription{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDPlanSubscriptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDPlan {
			t.Error("foreign key was wrong value", a.ID, first.IDPlan)
		}
		if a.ID != second.IDPlan {
			t.Error("foreign key was wrong value", a.ID, second.IDPlan)
		}

		if first.R.IDPlanPlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDPlanPlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDPlanSubscriptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDPlanSubscriptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDPlanSubscriptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPlansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Plans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	planDBTypes = map[string]string{`ID`: `bigint`, `Name`: `text`, `Description`: `text`, `Price`: `double precision`, `Currency`: `text`, `Features`: `jsonb`, `BillingCycle`: `enum.billing_cycle('monthly','yearly')`, `Code`: `text`, `TrialDays`: `integer`, `IsActive`: `boolean`, `Identifier`: `text`, `BannerURL`: `text`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `ForStudios`: `boolean`, `PricingModel`: `enum.pricing_model('volume','standard')`}
	_           = bytes.MinRead
)

func testPlansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(planPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(planAllColumns) == len(planPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planDBTypes, true, planPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(planAllColumns) == len(planPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Plan{}
	if err = randomize.Struct(seed, o, planDBTypes, true, planColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, planDBTypes, true, planPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(planAllColumns, planPrimaryKeyColumns) {
		fields = planAllColumns
	} else {
		fields = strmangle.SetComplement(
			planAllColumns,
			planPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlansUpsert(t *testing.T) {
	t.Parallel()

	if len(planAllColumns) == len(planPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Plan{}
	if err = randomize.Struct(seed, &o, planDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Plan: %s", err)
	}

	count, err := Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, planDBTypes, false, planPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Plan struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Plan: %s", err)
	}

	count, err = Plans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
