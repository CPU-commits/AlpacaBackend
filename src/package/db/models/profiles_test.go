// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProfiles(t *testing.T) {
	t.Parallel()

	query := Profiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProfilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Profiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProfileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProfileExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Profile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProfileExists to return true, but got false.")
	}
}

func testProfilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	profileFound, err := FindProfile(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if profileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProfilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Profiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProfilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Profiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProfilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	profileOne := &Profile{}
	profileTwo := &Profile{}
	if err = randomize.Struct(seed, profileOne, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}
	if err = randomize.Struct(seed, profileTwo, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = profileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = profileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Profiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProfilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	profileOne := &Profile{}
	profileTwo := &Profile{}
	if err = randomize.Struct(seed, profileOne, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}
	if err = randomize.Struct(seed, profileTwo, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = profileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = profileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func profileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func profileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
	*o = Profile{}
	return nil
}

func testProfilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Profile{}
	o := &Profile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, profileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Profile object: %s", err)
	}

	AddProfileHook(boil.BeforeInsertHook, profileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	profileBeforeInsertHooks = []ProfileHook{}

	AddProfileHook(boil.AfterInsertHook, profileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	profileAfterInsertHooks = []ProfileHook{}

	AddProfileHook(boil.AfterSelectHook, profileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	profileAfterSelectHooks = []ProfileHook{}

	AddProfileHook(boil.BeforeUpdateHook, profileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	profileBeforeUpdateHooks = []ProfileHook{}

	AddProfileHook(boil.AfterUpdateHook, profileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	profileAfterUpdateHooks = []ProfileHook{}

	AddProfileHook(boil.BeforeDeleteHook, profileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	profileBeforeDeleteHooks = []ProfileHook{}

	AddProfileHook(boil.AfterDeleteHook, profileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	profileAfterDeleteHooks = []ProfileHook{}

	AddProfileHook(boil.BeforeUpsertHook, profileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	profileBeforeUpsertHooks = []ProfileHook{}

	AddProfileHook(boil.AfterUpsertHook, profileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	profileAfterUpsertHooks = []ProfileHook{}
}

func testProfilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProfilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProfileToManyIDProfileFollows(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, followDBTypes, false, followColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, followDBTypes, false, followColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDProfile, a.ID)
	queries.Assign(&c.IDProfile, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDProfileFollows().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDProfile, b.IDProfile) {
			bFound = true
		}
		if queries.Equal(v.IDProfile, c.IDProfile) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileSlice{&a}
	if err = a.L.LoadIDProfileFollows(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileFollows); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDProfileFollows = nil
	if err = a.L.LoadIDProfileFollows(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileFollows); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileToManyIDProfileLikes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c Like

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, likeDBTypes, false, likeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDProfile = a.ID
	c.IDProfile = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDProfileLikes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDProfile == b.IDProfile {
			bFound = true
		}
		if v.IDProfile == c.IDProfile {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileSlice{&a}
	if err = a.L.LoadIDProfileLikes(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileLikes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDProfileLikes = nil
	if err = a.L.LoadIDProfileLikes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileLikes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileToManyIDProfilePosts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDProfile = a.ID
	c.IDProfile = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDProfilePosts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDProfile == b.IDProfile {
			bFound = true
		}
		if v.IDProfile == c.IDProfile {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileSlice{&a}
	if err = a.L.LoadIDProfilePosts(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfilePosts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDProfilePosts = nil
	if err = a.L.LoadIDProfilePosts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfilePosts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileToManyIDProfileReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c Review

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, reviewDBTypes, false, reviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDProfile = a.ID
	c.IDProfile = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDProfileReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDProfile == b.IDProfile {
			bFound = true
		}
		if v.IDProfile == c.IDProfile {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileSlice{&a}
	if err = a.L.LoadIDProfileReviews(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDProfileReviews = nil
	if err = a.L.LoadIDProfileReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileToManyIDProfileTattoos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDProfile = a.ID
	c.IDProfile = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDProfileTattoos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDProfile == b.IDProfile {
			bFound = true
		}
		if v.IDProfile == c.IDProfile {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProfileSlice{&a}
	if err = a.L.LoadIDProfileTattoos(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileTattoos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDProfileTattoos = nil
	if err = a.L.LoadIDProfileTattoos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDProfileTattoos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProfileToManyAddOpIDProfileFollows(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Follow{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, followDBTypes, false, strmangle.SetComplement(followPrimaryKeyColumns, followColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Follow{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDProfileFollows(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDProfile) {
			t.Error("foreign key was wrong value", a.ID, first.IDProfile)
		}
		if !queries.Equal(a.ID, second.IDProfile) {
			t.Error("foreign key was wrong value", a.ID, second.IDProfile)
		}

		if first.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDProfileFollows[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDProfileFollows[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDProfileFollows().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProfileToManySetOpIDProfileFollows(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Follow{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, followDBTypes, false, strmangle.SetComplement(followPrimaryKeyColumns, followColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDProfileFollows(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDProfileFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDProfileFollows(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDProfileFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDProfile) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDProfile) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDProfile) {
		t.Error("foreign key was wrong value", a.ID, d.IDProfile)
	}
	if !queries.Equal(a.ID, e.IDProfile) {
		t.Error("foreign key was wrong value", a.ID, e.IDProfile)
	}

	if b.R.IDProfileProfile != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDProfileProfile != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDProfileProfile != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDProfileProfile != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDProfileFollows[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDProfileFollows[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProfileToManyRemoveOpIDProfileFollows(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Follow{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, followDBTypes, false, strmangle.SetComplement(followPrimaryKeyColumns, followColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDProfileFollows(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDProfileFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDProfileFollows(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDProfileFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDProfile) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDProfile) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDProfileProfile != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDProfileProfile != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDProfileProfile != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDProfileProfile != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDProfileFollows) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDProfileFollows[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDProfileFollows[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProfileToManyAddOpIDProfileLikes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Like

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Like{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, likeDBTypes, false, strmangle.SetComplement(likePrimaryKeyColumns, likeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Like{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDProfileLikes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDProfile {
			t.Error("foreign key was wrong value", a.ID, first.IDProfile)
		}
		if a.ID != second.IDProfile {
			t.Error("foreign key was wrong value", a.ID, second.IDProfile)
		}

		if first.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDProfileLikes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDProfileLikes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDProfileLikes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProfileToManyAddOpIDProfilePosts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Post{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Post{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDProfilePosts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDProfile {
			t.Error("foreign key was wrong value", a.ID, first.IDProfile)
		}
		if a.ID != second.IDProfile {
			t.Error("foreign key was wrong value", a.ID, second.IDProfile)
		}

		if first.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDProfilePosts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDProfilePosts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDProfilePosts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProfileToManyAddOpIDProfileReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Review

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Review{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, reviewDBTypes, false, strmangle.SetComplement(reviewPrimaryKeyColumns, reviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Review{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDProfileReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDProfile {
			t.Error("foreign key was wrong value", a.ID, first.IDProfile)
		}
		if a.ID != second.IDProfile {
			t.Error("foreign key was wrong value", a.ID, second.IDProfile)
		}

		if first.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDProfileReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDProfileReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDProfileReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProfileToManyAddOpIDProfileTattoos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c, d, e Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tattoo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tattoo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDProfileTattoos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDProfile {
			t.Error("foreign key was wrong value", a.ID, first.IDProfile)
		}
		if a.ID != second.IDProfile {
			t.Error("foreign key was wrong value", a.ID, second.IDProfile)
		}

		if first.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDProfileProfile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDProfileTattoos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDProfileTattoos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDProfileTattoos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProfileToOneImageUsingIDAvatarImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Profile
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IDAvatar, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDAvatarImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProfileSlice{&local}
	if err = local.L.LoadIDAvatarImage(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAvatarImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDAvatarImage = nil
	if err = local.L.LoadIDAvatarImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAvatarImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProfileToOneUserUsingIDUserUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Profile
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDUser = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDUserUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProfileSlice{&local}
	if err = local.L.LoadIDUserUser(ctx, tx, false, (*[]*Profile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDUserUser = nil
	if err = local.L.LoadIDUserUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProfileToOneSetOpImageUsingIDAvatarImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDAvatarImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDAvatarImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDAvatarProfile != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IDAvatar, x.ID) {
			t.Error("foreign key was wrong value", a.IDAvatar)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDAvatar))
		reflect.Indirect(reflect.ValueOf(&a.IDAvatar)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IDAvatar, x.ID) {
			t.Error("foreign key was wrong value", a.IDAvatar, x.ID)
		}
	}
}

func testProfileToOneRemoveOpImageUsingIDAvatarImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIDAvatarImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIDAvatarImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.IDAvatarImage().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.IDAvatarImage != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IDAvatar) {
		t.Error("foreign key value should be nil")
	}

	if b.R.IDAvatarProfile != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testProfileToOneSetOpUserUsingIDUserUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Profile
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDUserUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDUserUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDUserProfile != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDUser))
		reflect.Indirect(reflect.ValueOf(&a.IDUser)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser, x.ID)
		}
	}
}

func testProfilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProfilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProfileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProfilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Profiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	profileDBTypes = map[string]string{`ID`: `bigint`, `Description`: `text`, `IDAvatar`: `bigint`, `Likes`: `integer`, `IDUser`: `bigint`, `CreatedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testProfilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(profilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(profileAllColumns) == len(profilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, profileDBTypes, true, profilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProfilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(profileAllColumns) == len(profilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Profile{}
	if err = randomize.Struct(seed, o, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, profileDBTypes, true, profilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(profileAllColumns, profilePrimaryKeyColumns) {
		fields = profileAllColumns
	} else {
		fields = strmangle.SetComplement(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProfileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProfilesUpsert(t *testing.T) {
	t.Parallel()

	if len(profileAllColumns) == len(profilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Profile{}
	if err = randomize.Struct(seed, &o, profileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Profile: %s", err)
	}

	count, err := Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, profileDBTypes, false, profilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Profile: %s", err)
	}

	count, err = Profiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
