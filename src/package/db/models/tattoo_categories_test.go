// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testTattooCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(tattooCategoryAllColumns) == len(tattooCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TattooCategory{}
	if err = randomize.Struct(seed, &o, tattooCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TattooCategory: %s", err)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tattooCategoryDBTypes, false, tattooCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TattooCategory: %s", err)
	}

	count, err = TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTattooCategories(t *testing.T) {
	t.Parallel()

	query := TattooCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTattooCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTattooCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TattooCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTattooCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TattooCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTattooCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TattooCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TattooCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TattooCategoryExists to return true, but got false.")
	}
}

func testTattooCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tattooCategoryFound, err := FindTattooCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tattooCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTattooCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TattooCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTattooCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TattooCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTattooCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tattooCategoryOne := &TattooCategory{}
	tattooCategoryTwo := &TattooCategory{}
	if err = randomize.Struct(seed, tattooCategoryOne, tattooCategoryDBTypes, false, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, tattooCategoryTwo, tattooCategoryDBTypes, false, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tattooCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tattooCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TattooCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTattooCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tattooCategoryOne := &TattooCategory{}
	tattooCategoryTwo := &TattooCategory{}
	if err = randomize.Struct(seed, tattooCategoryOne, tattooCategoryDBTypes, false, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, tattooCategoryTwo, tattooCategoryDBTypes, false, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tattooCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tattooCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tattooCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func tattooCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TattooCategory) error {
	*o = TattooCategory{}
	return nil
}

func testTattooCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TattooCategory{}
	o := &TattooCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TattooCategory object: %s", err)
	}

	AddTattooCategoryHook(boil.BeforeInsertHook, tattooCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tattooCategoryBeforeInsertHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.AfterInsertHook, tattooCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tattooCategoryAfterInsertHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.AfterSelectHook, tattooCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tattooCategoryAfterSelectHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.BeforeUpdateHook, tattooCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tattooCategoryBeforeUpdateHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.AfterUpdateHook, tattooCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tattooCategoryAfterUpdateHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.BeforeDeleteHook, tattooCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tattooCategoryBeforeDeleteHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.AfterDeleteHook, tattooCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tattooCategoryAfterDeleteHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.BeforeUpsertHook, tattooCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tattooCategoryBeforeUpsertHooks = []TattooCategoryHook{}

	AddTattooCategoryHook(boil.AfterUpsertHook, tattooCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tattooCategoryAfterUpsertHooks = []TattooCategoryHook{}
}

func testTattooCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTattooCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tattooCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTattooCategoryToOneTattooUsingIDTattooTattoo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TattooCategory
	var foreign Tattoo

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tattooCategoryDBTypes, false, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDTattoo = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDTattooTattoo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTattooHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TattooCategorySlice{&local}
	if err = local.L.LoadIDTattooTattoo(ctx, tx, false, (*[]*TattooCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDTattooTattoo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDTattooTattoo = nil
	if err = local.L.LoadIDTattooTattoo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDTattooTattoo == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTattooCategoryToOneCategoryUsingIDCategoryCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TattooCategory
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tattooCategoryDBTypes, false, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDCategory = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDCategoryCategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TattooCategorySlice{&local}
	if err = local.L.LoadIDCategoryCategory(ctx, tx, false, (*[]*TattooCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDCategoryCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDCategoryCategory = nil
	if err = local.L.LoadIDCategoryCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDCategoryCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTattooCategoryToOneSetOpTattooUsingIDTattooTattoo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TattooCategory
	var b, c Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tattooCategoryDBTypes, false, strmangle.SetComplement(tattooCategoryPrimaryKeyColumns, tattooCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tattoo{&b, &c} {
		err = a.SetIDTattooTattoo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDTattooTattoo != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDTattooTattooCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDTattoo != x.ID {
			t.Error("foreign key was wrong value", a.IDTattoo)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDTattoo))
		reflect.Indirect(reflect.ValueOf(&a.IDTattoo)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDTattoo != x.ID {
			t.Error("foreign key was wrong value", a.IDTattoo, x.ID)
		}
	}
}
func testTattooCategoryToOneSetOpCategoryUsingIDCategoryCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TattooCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tattooCategoryDBTypes, false, strmangle.SetComplement(tattooCategoryPrimaryKeyColumns, tattooCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetIDCategoryCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDCategoryCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDCategoryTattooCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDCategory != x.ID {
			t.Error("foreign key was wrong value", a.IDCategory)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDCategory))
		reflect.Indirect(reflect.ValueOf(&a.IDCategory)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDCategory != x.ID {
			t.Error("foreign key was wrong value", a.IDCategory, x.ID)
		}
	}
}

func testTattooCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTattooCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TattooCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTattooCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TattooCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tattooCategoryDBTypes = map[string]string{`ID`: `int8`, `IDTattoo`: `int8`, `IDCategory`: `int8`}
	_                     = bytes.MinRead
)

func testTattooCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tattooCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tattooCategoryAllColumns) == len(tattooCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTattooCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tattooCategoryAllColumns) == len(tattooCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TattooCategory{}
	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TattooCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tattooCategoryDBTypes, true, tattooCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TattooCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tattooCategoryAllColumns, tattooCategoryPrimaryKeyColumns) {
		fields = tattooCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			tattooCategoryAllColumns,
			tattooCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TattooCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
