// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Subscription is an object representing the database table.
type Subscription struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDUser          null.Int64  `boil:"id_user" json:"id_user,omitempty" toml:"id_user" yaml:"id_user,omitempty"`
	IDPlan          int64       `boil:"id_plan" json:"id_plan" toml:"id_plan" yaml:"id_plan"`
	StartDate       time.Time   `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	CardBrand       null.String `boil:"card_brand" json:"card_brand,omitempty" toml:"card_brand" yaml:"card_brand,omitempty"`
	CardLastFour    null.String `boil:"card_last_four" json:"card_last_four,omitempty" toml:"card_last_four" yaml:"card_last_four,omitempty"`
	BillingAnchor   null.Int    `boil:"billing_anchor" json:"billing_anchor,omitempty" toml:"billing_anchor" yaml:"billing_anchor,omitempty"`
	EndDate         time.Time   `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	Status          string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	CanceledAt      null.Time   `boil:"canceled_at" json:"canceled_at,omitempty" toml:"canceled_at" yaml:"canceled_at,omitempty"`
	NextBillingDate null.Time   `boil:"next_billing_date" json:"next_billing_date,omitempty" toml:"next_billing_date" yaml:"next_billing_date,omitempty"`
	Identifier      string      `boil:"identifier" json:"identifier" toml:"identifier" yaml:"identifier"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IDStudio        null.Int64  `boil:"id_studio" json:"id_studio,omitempty" toml:"id_studio" yaml:"id_studio,omitempty"`

	R *subscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L subscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SubscriptionColumns = struct {
	ID              string
	IDUser          string
	IDPlan          string
	StartDate       string
	CardBrand       string
	CardLastFour    string
	BillingAnchor   string
	EndDate         string
	Status          string
	CanceledAt      string
	NextBillingDate string
	Identifier      string
	CreatedAt       string
	IDStudio        string
}{
	ID:              "id",
	IDUser:          "id_user",
	IDPlan:          "id_plan",
	StartDate:       "start_date",
	CardBrand:       "card_brand",
	CardLastFour:    "card_last_four",
	BillingAnchor:   "billing_anchor",
	EndDate:         "end_date",
	Status:          "status",
	CanceledAt:      "canceled_at",
	NextBillingDate: "next_billing_date",
	Identifier:      "identifier",
	CreatedAt:       "created_at",
	IDStudio:        "id_studio",
}

var SubscriptionTableColumns = struct {
	ID              string
	IDUser          string
	IDPlan          string
	StartDate       string
	CardBrand       string
	CardLastFour    string
	BillingAnchor   string
	EndDate         string
	Status          string
	CanceledAt      string
	NextBillingDate string
	Identifier      string
	CreatedAt       string
	IDStudio        string
}{
	ID:              "subscriptions.id",
	IDUser:          "subscriptions.id_user",
	IDPlan:          "subscriptions.id_plan",
	StartDate:       "subscriptions.start_date",
	CardBrand:       "subscriptions.card_brand",
	CardLastFour:    "subscriptions.card_last_four",
	BillingAnchor:   "subscriptions.billing_anchor",
	EndDate:         "subscriptions.end_date",
	Status:          "subscriptions.status",
	CanceledAt:      "subscriptions.canceled_at",
	NextBillingDate: "subscriptions.next_billing_date",
	Identifier:      "subscriptions.identifier",
	CreatedAt:       "subscriptions.created_at",
	IDStudio:        "subscriptions.id_studio",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SubscriptionWhere = struct {
	ID              whereHelperint64
	IDUser          whereHelpernull_Int64
	IDPlan          whereHelperint64
	StartDate       whereHelpertime_Time
	CardBrand       whereHelpernull_String
	CardLastFour    whereHelpernull_String
	BillingAnchor   whereHelpernull_Int
	EndDate         whereHelpertime_Time
	Status          whereHelperstring
	CanceledAt      whereHelpernull_Time
	NextBillingDate whereHelpernull_Time
	Identifier      whereHelperstring
	CreatedAt       whereHelpertime_Time
	IDStudio        whereHelpernull_Int64
}{
	ID:              whereHelperint64{field: "\"subscriptions\".\"id\""},
	IDUser:          whereHelpernull_Int64{field: "\"subscriptions\".\"id_user\""},
	IDPlan:          whereHelperint64{field: "\"subscriptions\".\"id_plan\""},
	StartDate:       whereHelpertime_Time{field: "\"subscriptions\".\"start_date\""},
	CardBrand:       whereHelpernull_String{field: "\"subscriptions\".\"card_brand\""},
	CardLastFour:    whereHelpernull_String{field: "\"subscriptions\".\"card_last_four\""},
	BillingAnchor:   whereHelpernull_Int{field: "\"subscriptions\".\"billing_anchor\""},
	EndDate:         whereHelpertime_Time{field: "\"subscriptions\".\"end_date\""},
	Status:          whereHelperstring{field: "\"subscriptions\".\"status\""},
	CanceledAt:      whereHelpernull_Time{field: "\"subscriptions\".\"canceled_at\""},
	NextBillingDate: whereHelpernull_Time{field: "\"subscriptions\".\"next_billing_date\""},
	Identifier:      whereHelperstring{field: "\"subscriptions\".\"identifier\""},
	CreatedAt:       whereHelpertime_Time{field: "\"subscriptions\".\"created_at\""},
	IDStudio:        whereHelpernull_Int64{field: "\"subscriptions\".\"id_studio\""},
}

// SubscriptionRels is where relationship names are stored.
var SubscriptionRels = struct {
	IDPlanPlan             string
	IDStudioStudio         string
	IDUserUser             string
	IDSubscriptionPayments string
}{
	IDPlanPlan:             "IDPlanPlan",
	IDStudioStudio:         "IDStudioStudio",
	IDUserUser:             "IDUserUser",
	IDSubscriptionPayments: "IDSubscriptionPayments",
}

// subscriptionR is where relationships are stored.
type subscriptionR struct {
	IDPlanPlan             *Plan        `boil:"IDPlanPlan" json:"IDPlanPlan" toml:"IDPlanPlan" yaml:"IDPlanPlan"`
	IDStudioStudio         *Studio      `boil:"IDStudioStudio" json:"IDStudioStudio" toml:"IDStudioStudio" yaml:"IDStudioStudio"`
	IDUserUser             *User        `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
	IDSubscriptionPayments PaymentSlice `boil:"IDSubscriptionPayments" json:"IDSubscriptionPayments" toml:"IDSubscriptionPayments" yaml:"IDSubscriptionPayments"`
}

// NewStruct creates a new relationship struct
func (*subscriptionR) NewStruct() *subscriptionR {
	return &subscriptionR{}
}

func (o *Subscription) GetIDPlanPlan() *Plan {
	if o == nil {
		return nil
	}

	return o.R.GetIDPlanPlan()
}

func (r *subscriptionR) GetIDPlanPlan() *Plan {
	if r == nil {
		return nil
	}

	return r.IDPlanPlan
}

func (o *Subscription) GetIDStudioStudio() *Studio {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudio()
}

func (r *subscriptionR) GetIDStudioStudio() *Studio {
	if r == nil {
		return nil
	}

	return r.IDStudioStudio
}

func (o *Subscription) GetIDUserUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserUser()
}

func (r *subscriptionR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}

	return r.IDUserUser
}

func (o *Subscription) GetIDSubscriptionPayments() PaymentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDSubscriptionPayments()
}

func (r *subscriptionR) GetIDSubscriptionPayments() PaymentSlice {
	if r == nil {
		return nil
	}

	return r.IDSubscriptionPayments
}

// subscriptionL is where Load methods for each relationship are stored.
type subscriptionL struct{}

var (
	subscriptionAllColumns            = []string{"id", "id_user", "id_plan", "start_date", "card_brand", "card_last_four", "billing_anchor", "end_date", "status", "canceled_at", "next_billing_date", "identifier", "created_at", "id_studio"}
	subscriptionColumnsWithoutDefault = []string{"id_plan", "start_date", "end_date", "identifier"}
	subscriptionColumnsWithDefault    = []string{"id", "id_user", "card_brand", "card_last_four", "billing_anchor", "status", "canceled_at", "next_billing_date", "created_at", "id_studio"}
	subscriptionPrimaryKeyColumns     = []string{"id"}
	subscriptionGeneratedColumns      = []string{}
)

type (
	// SubscriptionSlice is an alias for a slice of pointers to Subscription.
	// This should almost always be used instead of []Subscription.
	SubscriptionSlice []*Subscription
	// SubscriptionHook is the signature for custom Subscription hook methods
	SubscriptionHook func(context.Context, boil.ContextExecutor, *Subscription) error

	subscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	subscriptionType                 = reflect.TypeOf(&Subscription{})
	subscriptionMapping              = queries.MakeStructMapping(subscriptionType)
	subscriptionPrimaryKeyMapping, _ = queries.BindMapping(subscriptionType, subscriptionMapping, subscriptionPrimaryKeyColumns)
	subscriptionInsertCacheMut       sync.RWMutex
	subscriptionInsertCache          = make(map[string]insertCache)
	subscriptionUpdateCacheMut       sync.RWMutex
	subscriptionUpdateCache          = make(map[string]updateCache)
	subscriptionUpsertCacheMut       sync.RWMutex
	subscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var subscriptionAfterSelectMu sync.Mutex
var subscriptionAfterSelectHooks []SubscriptionHook

var subscriptionBeforeInsertMu sync.Mutex
var subscriptionBeforeInsertHooks []SubscriptionHook
var subscriptionAfterInsertMu sync.Mutex
var subscriptionAfterInsertHooks []SubscriptionHook

var subscriptionBeforeUpdateMu sync.Mutex
var subscriptionBeforeUpdateHooks []SubscriptionHook
var subscriptionAfterUpdateMu sync.Mutex
var subscriptionAfterUpdateHooks []SubscriptionHook

var subscriptionBeforeDeleteMu sync.Mutex
var subscriptionBeforeDeleteHooks []SubscriptionHook
var subscriptionAfterDeleteMu sync.Mutex
var subscriptionAfterDeleteHooks []SubscriptionHook

var subscriptionBeforeUpsertMu sync.Mutex
var subscriptionBeforeUpsertHooks []SubscriptionHook
var subscriptionAfterUpsertMu sync.Mutex
var subscriptionAfterUpsertHooks []SubscriptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Subscription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Subscription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Subscription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Subscription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Subscription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Subscription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Subscription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Subscription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Subscription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range subscriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSubscriptionHook registers your hook function for all future operations.
func AddSubscriptionHook(hookPoint boil.HookPoint, subscriptionHook SubscriptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		subscriptionAfterSelectMu.Lock()
		subscriptionAfterSelectHooks = append(subscriptionAfterSelectHooks, subscriptionHook)
		subscriptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		subscriptionBeforeInsertMu.Lock()
		subscriptionBeforeInsertHooks = append(subscriptionBeforeInsertHooks, subscriptionHook)
		subscriptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		subscriptionAfterInsertMu.Lock()
		subscriptionAfterInsertHooks = append(subscriptionAfterInsertHooks, subscriptionHook)
		subscriptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		subscriptionBeforeUpdateMu.Lock()
		subscriptionBeforeUpdateHooks = append(subscriptionBeforeUpdateHooks, subscriptionHook)
		subscriptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		subscriptionAfterUpdateMu.Lock()
		subscriptionAfterUpdateHooks = append(subscriptionAfterUpdateHooks, subscriptionHook)
		subscriptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		subscriptionBeforeDeleteMu.Lock()
		subscriptionBeforeDeleteHooks = append(subscriptionBeforeDeleteHooks, subscriptionHook)
		subscriptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		subscriptionAfterDeleteMu.Lock()
		subscriptionAfterDeleteHooks = append(subscriptionAfterDeleteHooks, subscriptionHook)
		subscriptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		subscriptionBeforeUpsertMu.Lock()
		subscriptionBeforeUpsertHooks = append(subscriptionBeforeUpsertHooks, subscriptionHook)
		subscriptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		subscriptionAfterUpsertMu.Lock()
		subscriptionAfterUpsertHooks = append(subscriptionAfterUpsertHooks, subscriptionHook)
		subscriptionAfterUpsertMu.Unlock()
	}
}

// One returns a single subscription record from the query.
func (q subscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Subscription, error) {
	o := &Subscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for subscriptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Subscription records from the query.
func (q subscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SubscriptionSlice, error) {
	var o []*Subscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Subscription slice")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Subscription records in the query.
func (q subscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q subscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if subscriptions exists")
	}

	return count > 0, nil
}

// IDPlanPlan pointed to by the foreign key.
func (o *Subscription) IDPlanPlan(mods ...qm.QueryMod) planQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPlan),
	}

	queryMods = append(queryMods, mods...)

	return Plans(queryMods...)
}

// IDStudioStudio pointed to by the foreign key.
func (o *Subscription) IDStudioStudio(mods ...qm.QueryMod) studioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDStudio),
	}

	queryMods = append(queryMods, mods...)

	return Studios(queryMods...)
}

// IDUserUser pointed to by the foreign key.
func (o *Subscription) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDSubscriptionPayments retrieves all the payment's Payments with an executor via id_subscription column.
func (o *Subscription) IDSubscriptionPayments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"id_subscription\"=?", o.ID),
	)

	return Payments(queryMods...)
}

// LoadIDPlanPlan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadIDPlanPlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		var ok bool
		object, ok = maybeSubscription.(*Subscription)
		if !ok {
			object = new(Subscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubscription))
			}
		}
	} else {
		s, ok := maybeSubscription.(*[]*Subscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		args[object.IDPlan] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			args[obj.IDPlan] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`plans`),
		qm.WhereIn(`plans.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Plan")
	}

	var resultSlice []*Plan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Plan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for plans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for plans")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPlanPlan = foreign
		if foreign.R == nil {
			foreign.R = &planR{}
		}
		foreign.R.IDPlanSubscriptions = append(foreign.R.IDPlanSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPlan == foreign.ID {
				local.R.IDPlanPlan = foreign
				if foreign.R == nil {
					foreign.R = &planR{}
				}
				foreign.R.IDPlanSubscriptions = append(foreign.R.IDPlanSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadIDStudioStudio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadIDStudioStudio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		var ok bool
		object, ok = maybeSubscription.(*Subscription)
		if !ok {
			object = new(Subscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubscription))
			}
		}
	} else {
		s, ok := maybeSubscription.(*[]*Subscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		if !queries.IsNil(object.IDStudio) {
			args[object.IDStudio] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			if !queries.IsNil(obj.IDStudio) {
				args[obj.IDStudio] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studios`),
		qm.WhereIn(`studios.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Studio")
	}

	var resultSlice []*Studio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Studio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for studios")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studios")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDStudioStudio = foreign
		if foreign.R == nil {
			foreign.R = &studioR{}
		}
		foreign.R.IDStudioSubscriptions = append(foreign.R.IDStudioSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDStudio, foreign.ID) {
				local.R.IDStudioStudio = foreign
				if foreign.R == nil {
					foreign.R = &studioR{}
				}
				foreign.R.IDStudioSubscriptions = append(foreign.R.IDStudioSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (subscriptionL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		var ok bool
		object, ok = maybeSubscription.(*Subscription)
		if !ok {
			object = new(Subscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubscription))
			}
		}
	} else {
		s, ok := maybeSubscription.(*[]*Subscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		if !queries.IsNil(object.IDUser) {
			args[object.IDUser] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}

			if !queries.IsNil(obj.IDUser) {
				args[obj.IDUser] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserSubscriptions = append(foreign.R.IDUserSubscriptions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDUser, foreign.ID) {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserSubscriptions = append(foreign.R.IDUserSubscriptions, local)
				break
			}
		}
	}

	return nil
}

// LoadIDSubscriptionPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (subscriptionL) LoadIDSubscriptionPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSubscription interface{}, mods queries.Applicator) error {
	var slice []*Subscription
	var object *Subscription

	if singular {
		var ok bool
		object, ok = maybeSubscription.(*Subscription)
		if !ok {
			object = new(Subscription)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSubscription))
			}
		}
	} else {
		s, ok := maybeSubscription.(*[]*Subscription)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSubscription)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSubscription))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &subscriptionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &subscriptionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.id_subscription in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDSubscriptionPayments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.IDSubscriptionSubscription = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDSubscription) {
				local.R.IDSubscriptionPayments = append(local.R.IDSubscriptionPayments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.IDSubscriptionSubscription = local
				break
			}
		}
	}

	return nil
}

// SetIDPlanPlan of the subscription to the related item.
// Sets o.R.IDPlanPlan to related.
// Adds o to related.R.IDPlanSubscriptions.
func (o *Subscription) SetIDPlanPlan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Plan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_plan"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPlan = related.ID
	if o.R == nil {
		o.R = &subscriptionR{
			IDPlanPlan: related,
		}
	} else {
		o.R.IDPlanPlan = related
	}

	if related.R == nil {
		related.R = &planR{
			IDPlanSubscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.IDPlanSubscriptions = append(related.R.IDPlanSubscriptions, o)
	}

	return nil
}

// SetIDStudioStudio of the subscription to the related item.
// Sets o.R.IDStudioStudio to related.
// Adds o to related.R.IDStudioSubscriptions.
func (o *Subscription) SetIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Studio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDStudio, related.ID)
	if o.R == nil {
		o.R = &subscriptionR{
			IDStudioStudio: related,
		}
	} else {
		o.R.IDStudioStudio = related
	}

	if related.R == nil {
		related.R = &studioR{
			IDStudioSubscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.IDStudioSubscriptions = append(related.R.IDStudioSubscriptions, o)
	}

	return nil
}

// RemoveIDStudioStudio relationship.
// Sets o.R.IDStudioStudio to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Subscription) RemoveIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, related *Studio) error {
	var err error

	queries.SetScanner(&o.IDStudio, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDStudioStudio = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDStudioSubscriptions {
		if queries.Equal(o.IDStudio, ri.IDStudio) {
			continue
		}

		ln := len(related.R.IDStudioSubscriptions)
		if ln > 1 && i < ln-1 {
			related.R.IDStudioSubscriptions[i] = related.R.IDStudioSubscriptions[ln-1]
		}
		related.R.IDStudioSubscriptions = related.R.IDStudioSubscriptions[:ln-1]
		break
	}
	return nil
}

// SetIDUserUser of the subscription to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserSubscriptions.
func (o *Subscription) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDUser, related.ID)
	if o.R == nil {
		o.R = &subscriptionR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserSubscriptions: SubscriptionSlice{o},
		}
	} else {
		related.R.IDUserSubscriptions = append(related.R.IDUserSubscriptions, o)
	}

	return nil
}

// RemoveIDUserUser relationship.
// Sets o.R.IDUserUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Subscription) RemoveIDUserUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.IDUser, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_user")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDUserUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDUserSubscriptions {
		if queries.Equal(o.IDUser, ri.IDUser) {
			continue
		}

		ln := len(related.R.IDUserSubscriptions)
		if ln > 1 && i < ln-1 {
			related.R.IDUserSubscriptions[i] = related.R.IDUserSubscriptions[ln-1]
		}
		related.R.IDUserSubscriptions = related.R.IDUserSubscriptions[:ln-1]
		break
	}
	return nil
}

// AddIDSubscriptionPayments adds the given related objects to the existing relationships
// of the subscription, optionally inserting them as new records.
// Appends related to o.R.IDSubscriptionPayments.
// Sets related.R.IDSubscriptionSubscription appropriately.
func (o *Subscription) AddIDSubscriptionPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDSubscription, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_subscription"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDSubscription, o.ID)
		}
	}

	if o.R == nil {
		o.R = &subscriptionR{
			IDSubscriptionPayments: related,
		}
	} else {
		o.R.IDSubscriptionPayments = append(o.R.IDSubscriptionPayments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				IDSubscriptionSubscription: o,
			}
		} else {
			rel.R.IDSubscriptionSubscription = o
		}
	}
	return nil
}

// SetIDSubscriptionPayments removes all previously related items of the
// subscription replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDSubscriptionSubscription's IDSubscriptionPayments accordingly.
// Replaces o.R.IDSubscriptionPayments with related.
// Sets related.R.IDSubscriptionSubscription's IDSubscriptionPayments accordingly.
func (o *Subscription) SetIDSubscriptionPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"id_subscription\" = null where \"id_subscription\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDSubscriptionPayments {
			queries.SetScanner(&rel.IDSubscription, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDSubscriptionSubscription = nil
		}
		o.R.IDSubscriptionPayments = nil
	}

	return o.AddIDSubscriptionPayments(ctx, exec, insert, related...)
}

// RemoveIDSubscriptionPayments relationships from objects passed in.
// Removes related items from R.IDSubscriptionPayments (uses pointer comparison, removal does not keep order)
// Sets related.R.IDSubscriptionSubscription.
func (o *Subscription) RemoveIDSubscriptionPayments(ctx context.Context, exec boil.ContextExecutor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDSubscription, nil)
		if rel.R != nil {
			rel.R.IDSubscriptionSubscription = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_subscription")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDSubscriptionPayments {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDSubscriptionPayments)
			if ln > 1 && i < ln-1 {
				o.R.IDSubscriptionPayments[i] = o.R.IDSubscriptionPayments[ln-1]
			}
			o.R.IDSubscriptionPayments = o.R.IDSubscriptionPayments[:ln-1]
			break
		}
	}

	return nil
}

// Subscriptions retrieves all the records using an executor.
func Subscriptions(mods ...qm.QueryMod) subscriptionQuery {
	mods = append(mods, qm.From("\"subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"subscriptions\".*"})
	}

	return subscriptionQuery{q}
}

// FindSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSubscription(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Subscription, error) {
	subscriptionObj := &Subscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"subscriptions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, subscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from subscriptions")
	}

	if err = subscriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return subscriptionObj, err
	}

	return subscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Subscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no subscriptions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	subscriptionInsertCacheMut.RLock()
	cache, cached := subscriptionInsertCache[key]
	subscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			subscriptionAllColumns,
			subscriptionColumnsWithDefault,
			subscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into subscriptions")
	}

	if !cached {
		subscriptionInsertCacheMut.Lock()
		subscriptionInsertCache[key] = cache
		subscriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Subscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Subscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	subscriptionUpdateCacheMut.RLock()
	cache, cached := subscriptionUpdateCache[key]
	subscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			subscriptionAllColumns,
			subscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, subscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, append(wl, subscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for subscriptions")
	}

	if !cached {
		subscriptionUpdateCacheMut.Lock()
		subscriptionUpdateCache[key] = cache
		subscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q subscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for subscriptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, subscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in subscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all subscription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Subscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no subscriptions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(subscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	subscriptionUpsertCacheMut.RLock()
	cache, cached := subscriptionUpsertCache[key]
	subscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			subscriptionAllColumns,
			subscriptionColumnsWithDefault,
			subscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			subscriptionAllColumns,
			subscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert subscriptions, could not build update column list")
		}

		ret := strmangle.SetComplement(subscriptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(subscriptionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert subscriptions, could not build conflict column list")
			}

			conflict = make([]string, len(subscriptionPrimaryKeyColumns))
			copy(conflict, subscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"subscriptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(subscriptionType, subscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert subscriptions")
	}

	if !cached {
		subscriptionUpsertCacheMut.Lock()
		subscriptionUpsertCache[key] = cache
		subscriptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Subscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Subscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Subscription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), subscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"subscriptions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for subscriptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q subscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no subscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(subscriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from subscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for subscriptions")
	}

	if len(subscriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Subscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSubscription(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), subscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"subscriptions\".* FROM \"subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, subscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SubscriptionSlice")
	}

	*o = slice

	return nil
}

// SubscriptionExists checks if the Subscription row exists.
func SubscriptionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"subscriptions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if subscriptions exists")
	}

	return exists, nil
}

// Exists checks if the Subscription row exists.
func (o *Subscription) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SubscriptionExists(ctx, exec, o.ID)
}
