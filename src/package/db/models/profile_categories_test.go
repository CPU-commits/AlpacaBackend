// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testProfileCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(profileCategoryAllColumns) == len(profileCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProfileCategory{}
	if err = randomize.Struct(seed, &o, profileCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProfileCategory: %s", err)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, profileCategoryDBTypes, false, profileCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProfileCategory: %s", err)
	}

	count, err = ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProfileCategories(t *testing.T) {
	t.Parallel()

	query := ProfileCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProfileCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfileCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProfileCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfileCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProfileCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProfileCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProfileCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProfileCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProfileCategoryExists to return true, but got false.")
	}
}

func testProfileCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	profileCategoryFound, err := FindProfileCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if profileCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProfileCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProfileCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProfileCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProfileCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProfileCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	profileCategoryOne := &ProfileCategory{}
	profileCategoryTwo := &ProfileCategory{}
	if err = randomize.Struct(seed, profileCategoryOne, profileCategoryDBTypes, false, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, profileCategoryTwo, profileCategoryDBTypes, false, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = profileCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = profileCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProfileCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProfileCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	profileCategoryOne := &ProfileCategory{}
	profileCategoryTwo := &ProfileCategory{}
	if err = randomize.Struct(seed, profileCategoryOne, profileCategoryDBTypes, false, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, profileCategoryTwo, profileCategoryDBTypes, false, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = profileCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = profileCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func profileCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func profileCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProfileCategory) error {
	*o = ProfileCategory{}
	return nil
}

func testProfileCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProfileCategory{}
	o := &ProfileCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProfileCategory object: %s", err)
	}

	AddProfileCategoryHook(boil.BeforeInsertHook, profileCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	profileCategoryBeforeInsertHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.AfterInsertHook, profileCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	profileCategoryAfterInsertHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.AfterSelectHook, profileCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	profileCategoryAfterSelectHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.BeforeUpdateHook, profileCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	profileCategoryBeforeUpdateHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.AfterUpdateHook, profileCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	profileCategoryAfterUpdateHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.BeforeDeleteHook, profileCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	profileCategoryBeforeDeleteHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.AfterDeleteHook, profileCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	profileCategoryAfterDeleteHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.BeforeUpsertHook, profileCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	profileCategoryBeforeUpsertHooks = []ProfileCategoryHook{}

	AddProfileCategoryHook(boil.AfterUpsertHook, profileCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	profileCategoryAfterUpsertHooks = []ProfileCategoryHook{}
}

func testProfileCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProfileCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(profileCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProfileCategoryToOneProfileUsingIDProfileProfile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProfileCategory
	var foreign Profile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, profileCategoryDBTypes, false, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDProfile = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDProfileProfile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProfileHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProfileCategorySlice{&local}
	if err = local.L.LoadIDProfileProfile(ctx, tx, false, (*[]*ProfileCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDProfileProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDProfileProfile = nil
	if err = local.L.LoadIDProfileProfile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDProfileProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProfileCategoryToOneCategoryUsingIDCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProfileCategory
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, profileCategoryDBTypes, false, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDCategories = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDCategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProfileCategorySlice{&local}
	if err = local.L.LoadIDCategory(ctx, tx, false, (*[]*ProfileCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDCategory = nil
	if err = local.L.LoadIDCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProfileCategoryToOneSetOpProfileUsingIDProfileProfile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProfileCategory
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileCategoryDBTypes, false, strmangle.SetComplement(profileCategoryPrimaryKeyColumns, profileCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Profile{&b, &c} {
		err = a.SetIDProfileProfile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDProfileProfile != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDProfileProfileCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDProfile != x.ID {
			t.Error("foreign key was wrong value", a.IDProfile)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDProfile))
		reflect.Indirect(reflect.ValueOf(&a.IDProfile)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDProfile != x.ID {
			t.Error("foreign key was wrong value", a.IDProfile, x.ID)
		}
	}
}
func testProfileCategoryToOneSetOpCategoryUsingIDCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProfileCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, profileCategoryDBTypes, false, strmangle.SetComplement(profileCategoryPrimaryKeyColumns, profileCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetIDCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDCategoryProfileCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDCategories != x.ID {
			t.Error("foreign key was wrong value", a.IDCategories)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDCategories))
		reflect.Indirect(reflect.ValueOf(&a.IDCategories)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDCategories != x.ID {
			t.Error("foreign key was wrong value", a.IDCategories, x.ID)
		}
	}
}

func testProfileCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProfileCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProfileCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProfileCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProfileCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	profileCategoryDBTypes = map[string]string{`ID`: `int8`, `IDProfile`: `int8`, `IDCategories`: `int8`}
	_                      = bytes.MinRead
)

func testProfileCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(profileCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(profileCategoryAllColumns) == len(profileCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProfileCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(profileCategoryAllColumns) == len(profileCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProfileCategory{}
	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProfileCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, profileCategoryDBTypes, true, profileCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProfileCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(profileCategoryAllColumns, profileCategoryPrimaryKeyColumns) {
		fields = profileCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			profileCategoryAllColumns,
			profileCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProfileCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
