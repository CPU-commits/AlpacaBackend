// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Appointment is an object representing the database table.
type Appointment struct {
	ID             int64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDUser         int64        `boil:"id_user" json:"id_user" toml:"id_user" yaml:"id_user"`
	IDTattooArtist int64        `boil:"id_tattoo_artist" json:"id_tattoo_artist" toml:"id_tattoo_artist" yaml:"id_tattoo_artist"`
	Status         string       `boil:"status" json:"status" toml:"status" yaml:"status"`
	Phone          null.String  `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	HasIdea        bool         `boil:"has_idea" json:"has_idea" toml:"has_idea" yaml:"has_idea"`
	Area           null.String  `boil:"area" json:"area,omitempty" toml:"area" yaml:"area,omitempty"`
	Height         null.Float64 `boil:"height" json:"height,omitempty" toml:"height" yaml:"height,omitempty"`
	Width          null.Float64 `boil:"width" json:"width,omitempty" toml:"width" yaml:"width,omitempty"`
	Color          null.String  `boil:"color" json:"color,omitempty" toml:"color" yaml:"color,omitempty"`
	Description    string       `boil:"description" json:"description" toml:"description" yaml:"description"`
	ScheduledAt    null.Time    `boil:"scheduled_at" json:"scheduled_at,omitempty" toml:"scheduled_at" yaml:"scheduled_at,omitempty"`
	Duration       null.Float64 `boil:"duration" json:"duration,omitempty" toml:"duration" yaml:"duration,omitempty"`
	FinishedAt     null.Time    `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`
	CreatedAt      time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *appointmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appointmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppointmentColumns = struct {
	ID             string
	IDUser         string
	IDTattooArtist string
	Status         string
	Phone          string
	HasIdea        string
	Area           string
	Height         string
	Width          string
	Color          string
	Description    string
	ScheduledAt    string
	Duration       string
	FinishedAt     string
	CreatedAt      string
}{
	ID:             "id",
	IDUser:         "id_user",
	IDTattooArtist: "id_tattoo_artist",
	Status:         "status",
	Phone:          "phone",
	HasIdea:        "has_idea",
	Area:           "area",
	Height:         "height",
	Width:          "width",
	Color:          "color",
	Description:    "description",
	ScheduledAt:    "scheduled_at",
	Duration:       "duration",
	FinishedAt:     "finished_at",
	CreatedAt:      "created_at",
}

var AppointmentTableColumns = struct {
	ID             string
	IDUser         string
	IDTattooArtist string
	Status         string
	Phone          string
	HasIdea        string
	Area           string
	Height         string
	Width          string
	Color          string
	Description    string
	ScheduledAt    string
	Duration       string
	FinishedAt     string
	CreatedAt      string
}{
	ID:             "appointments.id",
	IDUser:         "appointments.id_user",
	IDTattooArtist: "appointments.id_tattoo_artist",
	Status:         "appointments.status",
	Phone:          "appointments.phone",
	HasIdea:        "appointments.has_idea",
	Area:           "appointments.area",
	Height:         "appointments.height",
	Width:          "appointments.width",
	Color:          "appointments.color",
	Description:    "appointments.description",
	ScheduledAt:    "appointments.scheduled_at",
	Duration:       "appointments.duration",
	FinishedAt:     "appointments.finished_at",
	CreatedAt:      "appointments.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AppointmentWhere = struct {
	ID             whereHelperint64
	IDUser         whereHelperint64
	IDTattooArtist whereHelperint64
	Status         whereHelperstring
	Phone          whereHelpernull_String
	HasIdea        whereHelperbool
	Area           whereHelpernull_String
	Height         whereHelpernull_Float64
	Width          whereHelpernull_Float64
	Color          whereHelpernull_String
	Description    whereHelperstring
	ScheduledAt    whereHelpernull_Time
	Duration       whereHelpernull_Float64
	FinishedAt     whereHelpernull_Time
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"appointments\".\"id\""},
	IDUser:         whereHelperint64{field: "\"appointments\".\"id_user\""},
	IDTattooArtist: whereHelperint64{field: "\"appointments\".\"id_tattoo_artist\""},
	Status:         whereHelperstring{field: "\"appointments\".\"status\""},
	Phone:          whereHelpernull_String{field: "\"appointments\".\"phone\""},
	HasIdea:        whereHelperbool{field: "\"appointments\".\"has_idea\""},
	Area:           whereHelpernull_String{field: "\"appointments\".\"area\""},
	Height:         whereHelpernull_Float64{field: "\"appointments\".\"height\""},
	Width:          whereHelpernull_Float64{field: "\"appointments\".\"width\""},
	Color:          whereHelpernull_String{field: "\"appointments\".\"color\""},
	Description:    whereHelperstring{field: "\"appointments\".\"description\""},
	ScheduledAt:    whereHelpernull_Time{field: "\"appointments\".\"scheduled_at\""},
	Duration:       whereHelpernull_Float64{field: "\"appointments\".\"duration\""},
	FinishedAt:     whereHelpernull_Time{field: "\"appointments\".\"finished_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"appointments\".\"created_at\""},
}

// AppointmentRels is where relationship names are stored.
var AppointmentRels = struct {
	IDTattooArtistUser             string
	IDUserUser                     string
	IDAppointmentAppointmentImages string
}{
	IDTattooArtistUser:             "IDTattooArtistUser",
	IDUserUser:                     "IDUserUser",
	IDAppointmentAppointmentImages: "IDAppointmentAppointmentImages",
}

// appointmentR is where relationships are stored.
type appointmentR struct {
	IDTattooArtistUser             *User                 `boil:"IDTattooArtistUser" json:"IDTattooArtistUser" toml:"IDTattooArtistUser" yaml:"IDTattooArtistUser"`
	IDUserUser                     *User                 `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
	IDAppointmentAppointmentImages AppointmentImageSlice `boil:"IDAppointmentAppointmentImages" json:"IDAppointmentAppointmentImages" toml:"IDAppointmentAppointmentImages" yaml:"IDAppointmentAppointmentImages"`
}

// NewStruct creates a new relationship struct
func (*appointmentR) NewStruct() *appointmentR {
	return &appointmentR{}
}

func (r *appointmentR) GetIDTattooArtistUser() *User {
	if r == nil {
		return nil
	}
	return r.IDTattooArtistUser
}

func (r *appointmentR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}
	return r.IDUserUser
}

func (r *appointmentR) GetIDAppointmentAppointmentImages() AppointmentImageSlice {
	if r == nil {
		return nil
	}
	return r.IDAppointmentAppointmentImages
}

// appointmentL is where Load methods for each relationship are stored.
type appointmentL struct{}

var (
	appointmentAllColumns            = []string{"id", "id_user", "id_tattoo_artist", "status", "phone", "has_idea", "area", "height", "width", "color", "description", "scheduled_at", "duration", "finished_at", "created_at"}
	appointmentColumnsWithoutDefault = []string{"id_user", "id_tattoo_artist", "status", "has_idea", "description"}
	appointmentColumnsWithDefault    = []string{"id", "phone", "area", "height", "width", "color", "scheduled_at", "duration", "finished_at", "created_at"}
	appointmentPrimaryKeyColumns     = []string{"id"}
	appointmentGeneratedColumns      = []string{}
)

type (
	// AppointmentSlice is an alias for a slice of pointers to Appointment.
	// This should almost always be used instead of []Appointment.
	AppointmentSlice []*Appointment
	// AppointmentHook is the signature for custom Appointment hook methods
	AppointmentHook func(context.Context, boil.ContextExecutor, *Appointment) error

	appointmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appointmentType                 = reflect.TypeOf(&Appointment{})
	appointmentMapping              = queries.MakeStructMapping(appointmentType)
	appointmentPrimaryKeyMapping, _ = queries.BindMapping(appointmentType, appointmentMapping, appointmentPrimaryKeyColumns)
	appointmentInsertCacheMut       sync.RWMutex
	appointmentInsertCache          = make(map[string]insertCache)
	appointmentUpdateCacheMut       sync.RWMutex
	appointmentUpdateCache          = make(map[string]updateCache)
	appointmentUpsertCacheMut       sync.RWMutex
	appointmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var appointmentAfterSelectMu sync.Mutex
var appointmentAfterSelectHooks []AppointmentHook

var appointmentBeforeInsertMu sync.Mutex
var appointmentBeforeInsertHooks []AppointmentHook
var appointmentAfterInsertMu sync.Mutex
var appointmentAfterInsertHooks []AppointmentHook

var appointmentBeforeUpdateMu sync.Mutex
var appointmentBeforeUpdateHooks []AppointmentHook
var appointmentAfterUpdateMu sync.Mutex
var appointmentAfterUpdateHooks []AppointmentHook

var appointmentBeforeDeleteMu sync.Mutex
var appointmentBeforeDeleteHooks []AppointmentHook
var appointmentAfterDeleteMu sync.Mutex
var appointmentAfterDeleteHooks []AppointmentHook

var appointmentBeforeUpsertMu sync.Mutex
var appointmentBeforeUpsertHooks []AppointmentHook
var appointmentAfterUpsertMu sync.Mutex
var appointmentAfterUpsertHooks []AppointmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Appointment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Appointment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Appointment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Appointment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Appointment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Appointment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Appointment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Appointment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Appointment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAppointmentHook registers your hook function for all future operations.
func AddAppointmentHook(hookPoint boil.HookPoint, appointmentHook AppointmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		appointmentAfterSelectMu.Lock()
		appointmentAfterSelectHooks = append(appointmentAfterSelectHooks, appointmentHook)
		appointmentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		appointmentBeforeInsertMu.Lock()
		appointmentBeforeInsertHooks = append(appointmentBeforeInsertHooks, appointmentHook)
		appointmentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		appointmentAfterInsertMu.Lock()
		appointmentAfterInsertHooks = append(appointmentAfterInsertHooks, appointmentHook)
		appointmentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		appointmentBeforeUpdateMu.Lock()
		appointmentBeforeUpdateHooks = append(appointmentBeforeUpdateHooks, appointmentHook)
		appointmentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		appointmentAfterUpdateMu.Lock()
		appointmentAfterUpdateHooks = append(appointmentAfterUpdateHooks, appointmentHook)
		appointmentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		appointmentBeforeDeleteMu.Lock()
		appointmentBeforeDeleteHooks = append(appointmentBeforeDeleteHooks, appointmentHook)
		appointmentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		appointmentAfterDeleteMu.Lock()
		appointmentAfterDeleteHooks = append(appointmentAfterDeleteHooks, appointmentHook)
		appointmentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		appointmentBeforeUpsertMu.Lock()
		appointmentBeforeUpsertHooks = append(appointmentBeforeUpsertHooks, appointmentHook)
		appointmentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		appointmentAfterUpsertMu.Lock()
		appointmentAfterUpsertHooks = append(appointmentAfterUpsertHooks, appointmentHook)
		appointmentAfterUpsertMu.Unlock()
	}
}

// One returns a single appointment record from the query.
func (q appointmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Appointment, error) {
	o := &Appointment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for appointments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Appointment records from the query.
func (q appointmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppointmentSlice, error) {
	var o []*Appointment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Appointment slice")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Appointment records in the query.
func (q appointmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count appointments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q appointmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if appointments exists")
	}

	return count > 0, nil
}

// IDTattooArtistUser pointed to by the foreign key.
func (o *Appointment) IDTattooArtistUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDTattooArtist),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDUserUser pointed to by the foreign key.
func (o *Appointment) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDAppointmentAppointmentImages retrieves all the appointment_image's AppointmentImages with an executor via id_appointment column.
func (o *Appointment) IDAppointmentAppointmentImages(mods ...qm.QueryMod) appointmentImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"appointment_images\".\"id_appointment\"=?", o.ID),
	)

	return AppointmentImages(queryMods...)
}

// LoadIDTattooArtistUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (appointmentL) LoadIDTattooArtistUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppointment interface{}, mods queries.Applicator) error {
	var slice []*Appointment
	var object *Appointment

	if singular {
		var ok bool
		object, ok = maybeAppointment.(*Appointment)
		if !ok {
			object = new(Appointment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppointment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppointment))
			}
		}
	} else {
		s, ok := maybeAppointment.(*[]*Appointment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppointment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppointment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &appointmentR{}
		}
		args[object.IDTattooArtist] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentR{}
			}

			args[obj.IDTattooArtist] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDTattooArtistUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDTattooArtistAppointments = append(foreign.R.IDTattooArtistAppointments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDTattooArtist == foreign.ID {
				local.R.IDTattooArtistUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDTattooArtistAppointments = append(foreign.R.IDTattooArtistAppointments, local)
				break
			}
		}
	}

	return nil
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (appointmentL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppointment interface{}, mods queries.Applicator) error {
	var slice []*Appointment
	var object *Appointment

	if singular {
		var ok bool
		object, ok = maybeAppointment.(*Appointment)
		if !ok {
			object = new(Appointment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppointment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppointment))
			}
		}
	} else {
		s, ok := maybeAppointment.(*[]*Appointment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppointment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppointment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &appointmentR{}
		}
		args[object.IDUser] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentR{}
			}

			args[obj.IDUser] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserAppointments = append(foreign.R.IDUserAppointments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUser == foreign.ID {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserAppointments = append(foreign.R.IDUserAppointments, local)
				break
			}
		}
	}

	return nil
}

// LoadIDAppointmentAppointmentImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (appointmentL) LoadIDAppointmentAppointmentImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppointment interface{}, mods queries.Applicator) error {
	var slice []*Appointment
	var object *Appointment

	if singular {
		var ok bool
		object, ok = maybeAppointment.(*Appointment)
		if !ok {
			object = new(Appointment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppointment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppointment))
			}
		}
	} else {
		s, ok := maybeAppointment.(*[]*Appointment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppointment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppointment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &appointmentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`appointment_images`),
		qm.WhereIn(`appointment_images.id_appointment in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointment_images")
	}

	var resultSlice []*AppointmentImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointment_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on appointment_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointment_images")
	}

	if len(appointmentImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDAppointmentAppointmentImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appointmentImageR{}
			}
			foreign.R.IDAppointmentAppointment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDAppointment {
				local.R.IDAppointmentAppointmentImages = append(local.R.IDAppointmentAppointmentImages, foreign)
				if foreign.R == nil {
					foreign.R = &appointmentImageR{}
				}
				foreign.R.IDAppointmentAppointment = local
				break
			}
		}
	}

	return nil
}

// SetIDTattooArtistUser of the appointment to the related item.
// Sets o.R.IDTattooArtistUser to related.
// Adds o to related.R.IDTattooArtistAppointments.
func (o *Appointment) SetIDTattooArtistUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"appointments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_tattoo_artist"}),
		strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDTattooArtist = related.ID
	if o.R == nil {
		o.R = &appointmentR{
			IDTattooArtistUser: related,
		}
	} else {
		o.R.IDTattooArtistUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDTattooArtistAppointments: AppointmentSlice{o},
		}
	} else {
		related.R.IDTattooArtistAppointments = append(related.R.IDTattooArtistAppointments, o)
	}

	return nil
}

// SetIDUserUser of the appointment to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserAppointments.
func (o *Appointment) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"appointments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUser = related.ID
	if o.R == nil {
		o.R = &appointmentR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserAppointments: AppointmentSlice{o},
		}
	} else {
		related.R.IDUserAppointments = append(related.R.IDUserAppointments, o)
	}

	return nil
}

// AddIDAppointmentAppointmentImages adds the given related objects to the existing relationships
// of the appointment, optionally inserting them as new records.
// Appends related to o.R.IDAppointmentAppointmentImages.
// Sets related.R.IDAppointmentAppointment appropriately.
func (o *Appointment) AddIDAppointmentAppointmentImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AppointmentImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDAppointment = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"appointment_images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_appointment"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDAppointment = o.ID
		}
	}

	if o.R == nil {
		o.R = &appointmentR{
			IDAppointmentAppointmentImages: related,
		}
	} else {
		o.R.IDAppointmentAppointmentImages = append(o.R.IDAppointmentAppointmentImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentImageR{
				IDAppointmentAppointment: o,
			}
		} else {
			rel.R.IDAppointmentAppointment = o
		}
	}
	return nil
}

// Appointments retrieves all the records using an executor.
func Appointments(mods ...qm.QueryMod) appointmentQuery {
	mods = append(mods, qm.From("\"appointments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"appointments\".*"})
	}

	return appointmentQuery{q}
}

// FindAppointment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppointment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Appointment, error) {
	appointmentObj := &Appointment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"appointments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, appointmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from appointments")
	}

	if err = appointmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return appointmentObj, err
	}

	return appointmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Appointment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no appointments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appointmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appointmentInsertCacheMut.RLock()
	cache, cached := appointmentInsertCache[key]
	appointmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appointmentAllColumns,
			appointmentColumnsWithDefault,
			appointmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appointmentType, appointmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appointmentType, appointmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"appointments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"appointments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into appointments")
	}

	if !cached {
		appointmentInsertCacheMut.Lock()
		appointmentInsertCache[key] = cache
		appointmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Appointment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Appointment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	appointmentUpdateCacheMut.RLock()
	cache, cached := appointmentUpdateCache[key]
	appointmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appointmentAllColumns,
			appointmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update appointments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"appointments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, appointmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appointmentType, appointmentMapping, append(wl, appointmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update appointments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for appointments")
	}

	if !cached {
		appointmentUpdateCacheMut.Lock()
		appointmentUpdateCache[key] = cache
		appointmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q appointmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for appointments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for appointments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppointmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"appointments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, appointmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in appointment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all appointment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Appointment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no appointments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appointmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appointmentUpsertCacheMut.RLock()
	cache, cached := appointmentUpsertCache[key]
	appointmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			appointmentAllColumns,
			appointmentColumnsWithDefault,
			appointmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			appointmentAllColumns,
			appointmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert appointments, could not build update column list")
		}

		ret := strmangle.SetComplement(appointmentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(appointmentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert appointments, could not build conflict column list")
			}

			conflict = make([]string, len(appointmentPrimaryKeyColumns))
			copy(conflict, appointmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"appointments\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(appointmentType, appointmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appointmentType, appointmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert appointments")
	}

	if !cached {
		appointmentUpsertCacheMut.Lock()
		appointmentUpsertCache[key] = cache
		appointmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Appointment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Appointment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Appointment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appointmentPrimaryKeyMapping)
	sql := "DELETE FROM \"appointments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from appointments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for appointments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q appointmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no appointmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from appointments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for appointments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppointmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(appointmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"appointments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appointmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from appointment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for appointments")
	}

	if len(appointmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Appointment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppointment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppointmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppointmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"appointments\".* FROM \"appointments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appointmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppointmentSlice")
	}

	*o = slice

	return nil
}

// AppointmentExists checks if the Appointment row exists.
func AppointmentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"appointments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if appointments exists")
	}

	return exists, nil
}

// Exists checks if the Appointment row exists.
func (o *Appointment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AppointmentExists(ctx, exec, o.ID)
}
