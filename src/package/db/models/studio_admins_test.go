// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStudioAdmins(t *testing.T) {
	t.Parallel()

	query := StudioAdmins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStudioAdminsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioAdminsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StudioAdmins().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioAdminsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioAdminSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioAdminsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StudioAdminExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StudioAdmin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudioAdminExists to return true, but got false.")
	}
}

func testStudioAdminsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	studioAdminFound, err := FindStudioAdmin(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if studioAdminFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStudioAdminsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StudioAdmins().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStudioAdminsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StudioAdmins().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudioAdminsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studioAdminOne := &StudioAdmin{}
	studioAdminTwo := &StudioAdmin{}
	if err = randomize.Struct(seed, studioAdminOne, studioAdminDBTypes, false, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}
	if err = randomize.Struct(seed, studioAdminTwo, studioAdminDBTypes, false, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioAdminOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioAdminTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioAdmins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudioAdminsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studioAdminOne := &StudioAdmin{}
	studioAdminTwo := &StudioAdmin{}
	if err = randomize.Struct(seed, studioAdminOne, studioAdminDBTypes, false, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}
	if err = randomize.Struct(seed, studioAdminTwo, studioAdminDBTypes, false, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioAdminOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioAdminTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func studioAdminBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func studioAdminAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdmin) error {
	*o = StudioAdmin{}
	return nil
}

func testStudioAdminsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StudioAdmin{}
	o := &StudioAdmin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studioAdminDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StudioAdmin object: %s", err)
	}

	AddStudioAdminHook(boil.BeforeInsertHook, studioAdminBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studioAdminBeforeInsertHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.AfterInsertHook, studioAdminAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studioAdminAfterInsertHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.AfterSelectHook, studioAdminAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studioAdminAfterSelectHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.BeforeUpdateHook, studioAdminBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studioAdminBeforeUpdateHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.AfterUpdateHook, studioAdminAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studioAdminAfterUpdateHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.BeforeDeleteHook, studioAdminBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studioAdminBeforeDeleteHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.AfterDeleteHook, studioAdminAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studioAdminAfterDeleteHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.BeforeUpsertHook, studioAdminBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studioAdminBeforeUpsertHooks = []StudioAdminHook{}

	AddStudioAdminHook(boil.AfterUpsertHook, studioAdminAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studioAdminAfterUpsertHooks = []StudioAdminHook{}
}

func testStudioAdminsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioAdminsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(studioAdminColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioAdminToOneUserUsingIDOwnerUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioAdmin
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioAdminDBTypes, false, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDOwner = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDOwnerUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioAdminSlice{&local}
	if err = local.L.LoadIDOwnerUser(ctx, tx, false, (*[]*StudioAdmin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDOwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDOwnerUser = nil
	if err = local.L.LoadIDOwnerUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDOwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioAdminToOneStudioUsingIDStudioStudio(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioAdmin
	var foreign Studio

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioAdminDBTypes, false, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDStudio = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDStudioStudio().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStudioHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioAdminSlice{&local}
	if err = local.L.LoadIDStudioStudio(ctx, tx, false, (*[]*StudioAdmin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDStudioStudio == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDStudioStudio = nil
	if err = local.L.LoadIDStudioStudio(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDStudioStudio == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioAdminToOneSetOpUserUsingIDOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioAdmin
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioAdminDBTypes, false, strmangle.SetComplement(studioAdminPrimaryKeyColumns, studioAdminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDOwnerUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDOwnerUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDOwnerStudioAdmins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDOwner != x.ID {
			t.Error("foreign key was wrong value", a.IDOwner)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDOwner))
		reflect.Indirect(reflect.ValueOf(&a.IDOwner)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDOwner != x.ID {
			t.Error("foreign key was wrong value", a.IDOwner, x.ID)
		}
	}
}
func testStudioAdminToOneSetOpStudioUsingIDStudioStudio(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioAdmin
	var b, c Studio

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioAdminDBTypes, false, strmangle.SetComplement(studioAdminPrimaryKeyColumns, studioAdminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Studio{&b, &c} {
		err = a.SetIDStudioStudio(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDStudioStudio != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDStudioStudioAdmins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDStudio != x.ID {
			t.Error("foreign key was wrong value", a.IDStudio)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDStudio))
		reflect.Indirect(reflect.ValueOf(&a.IDStudio)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDStudio != x.ID {
			t.Error("foreign key was wrong value", a.IDStudio, x.ID)
		}
	}
}

func testStudioAdminsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioAdminsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioAdminSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioAdminsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioAdmins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studioAdminDBTypes = map[string]string{`ID`: `bigint`, `IDStudio`: `bigint`, `IDOwner`: `bigint`, `CreatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testStudioAdminsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(studioAdminPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(studioAdminAllColumns) == len(studioAdminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStudioAdminsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studioAdminAllColumns) == len(studioAdminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdmin{}
	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioAdminDBTypes, true, studioAdminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studioAdminAllColumns, studioAdminPrimaryKeyColumns) {
		fields = studioAdminAllColumns
	} else {
		fields = strmangle.SetComplement(
			studioAdminAllColumns,
			studioAdminPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StudioAdminSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStudioAdminsUpsert(t *testing.T) {
	t.Parallel()

	if len(studioAdminAllColumns) == len(studioAdminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StudioAdmin{}
	if err = randomize.Struct(seed, &o, studioAdminDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioAdmin: %s", err)
	}

	count, err := StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, studioAdminDBTypes, false, studioAdminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioAdmin struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioAdmin: %s", err)
	}

	count, err = StudioAdmins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
