// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStudioAdminsPermissions(t *testing.T) {
	t.Parallel()

	query := StudioAdminsPermissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStudioAdminsPermissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioAdminsPermissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StudioAdminsPermissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioAdminsPermissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioAdminsPermissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioAdminsPermissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StudioAdminsPermissionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StudioAdminsPermission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudioAdminsPermissionExists to return true, but got false.")
	}
}

func testStudioAdminsPermissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	studioAdminsPermissionFound, err := FindStudioAdminsPermission(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if studioAdminsPermissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStudioAdminsPermissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StudioAdminsPermissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStudioAdminsPermissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StudioAdminsPermissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudioAdminsPermissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studioAdminsPermissionOne := &StudioAdminsPermission{}
	studioAdminsPermissionTwo := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, studioAdminsPermissionOne, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, studioAdminsPermissionTwo, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioAdminsPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioAdminsPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioAdminsPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudioAdminsPermissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studioAdminsPermissionOne := &StudioAdminsPermission{}
	studioAdminsPermissionTwo := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, studioAdminsPermissionOne, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, studioAdminsPermissionTwo, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioAdminsPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioAdminsPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func studioAdminsPermissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func studioAdminsPermissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioAdminsPermission) error {
	*o = StudioAdminsPermission{}
	return nil
}

func testStudioAdminsPermissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StudioAdminsPermission{}
	o := &StudioAdminsPermission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission object: %s", err)
	}

	AddStudioAdminsPermissionHook(boil.BeforeInsertHook, studioAdminsPermissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionBeforeInsertHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.AfterInsertHook, studioAdminsPermissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionAfterInsertHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.AfterSelectHook, studioAdminsPermissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionAfterSelectHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.BeforeUpdateHook, studioAdminsPermissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionBeforeUpdateHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.AfterUpdateHook, studioAdminsPermissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionAfterUpdateHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.BeforeDeleteHook, studioAdminsPermissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionBeforeDeleteHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.AfterDeleteHook, studioAdminsPermissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionAfterDeleteHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.BeforeUpsertHook, studioAdminsPermissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionBeforeUpsertHooks = []StudioAdminsPermissionHook{}

	AddStudioAdminsPermissionHook(boil.AfterUpsertHook, studioAdminsPermissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studioAdminsPermissionAfterUpsertHooks = []StudioAdminsPermissionHook{}
}

func testStudioAdminsPermissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioAdminsPermissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(studioAdminsPermissionPrimaryKeyColumns, studioAdminsPermissionColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioAdminsPermissionToOneStudioUserUsingIDAdminStudioUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioAdminsPermission
	var foreign StudioUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDAdmin = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDAdminStudioUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStudioUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioAdminsPermissionSlice{&local}
	if err = local.L.LoadIDAdminStudioUser(ctx, tx, false, (*[]*StudioAdminsPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAdminStudioUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDAdminStudioUser = nil
	if err = local.L.LoadIDAdminStudioUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAdminStudioUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioAdminsPermissionToOneSetOpStudioUserUsingIDAdminStudioUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioAdminsPermission
	var b, c StudioUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioAdminsPermissionDBTypes, false, strmangle.SetComplement(studioAdminsPermissionPrimaryKeyColumns, studioAdminsPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studioUserDBTypes, false, strmangle.SetComplement(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioUserDBTypes, false, strmangle.SetComplement(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StudioUser{&b, &c} {
		err = a.SetIDAdminStudioUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDAdminStudioUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDAdminStudioAdminsPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDAdmin != x.ID {
			t.Error("foreign key was wrong value", a.IDAdmin)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDAdmin))
		reflect.Indirect(reflect.ValueOf(&a.IDAdmin)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDAdmin != x.ID {
			t.Error("foreign key was wrong value", a.IDAdmin, x.ID)
		}
	}
}

func testStudioAdminsPermissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioAdminsPermissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioAdminsPermissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioAdminsPermissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioAdminsPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studioAdminsPermissionDBTypes = map[string]string{`ID`: `bigint`, `IDAdmin`: `bigint`, `Permission`: `text`, `CreatedAt`: `timestamp without time zone`}
	_                             = bytes.MinRead
)

func testStudioAdminsPermissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(studioAdminsPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(studioAdminsPermissionAllColumns) == len(studioAdminsPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStudioAdminsPermissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studioAdminsPermissionAllColumns) == len(studioAdminsPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioAdminsPermission{}
	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioAdminsPermissionDBTypes, true, studioAdminsPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studioAdminsPermissionAllColumns, studioAdminsPermissionPrimaryKeyColumns) {
		fields = studioAdminsPermissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			studioAdminsPermissionAllColumns,
			studioAdminsPermissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StudioAdminsPermissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStudioAdminsPermissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(studioAdminsPermissionAllColumns) == len(studioAdminsPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StudioAdminsPermission{}
	if err = randomize.Struct(seed, &o, studioAdminsPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioAdminsPermission: %s", err)
	}

	count, err := StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, studioAdminsPermissionDBTypes, false, studioAdminsPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioAdminsPermission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioAdminsPermission: %s", err)
	}

	count, err = StudioAdminsPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
