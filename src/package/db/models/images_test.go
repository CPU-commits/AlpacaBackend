// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImages(t *testing.T) {
	t.Parallel()

	query := Images()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Images().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Image exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageExists to return true, but got false.")
	}
}

func testImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	imageFound, err := FindImage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if imageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Images().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Images().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageOne := &Image{}
	imageTwo := &Image{}
	if err = randomize.Struct(seed, imageOne, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTwo, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Images().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageOne := &Image{}
	imageTwo := &Image{}
	if err = randomize.Struct(seed, imageOne, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}
	if err = randomize.Struct(seed, imageTwo, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func imageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func imageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Image) error {
	*o = Image{}
	return nil
}

func testImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Image{}
	o := &Image{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Image object: %s", err)
	}

	AddImageHook(boil.BeforeInsertHook, imageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageBeforeInsertHooks = []ImageHook{}

	AddImageHook(boil.AfterInsertHook, imageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageAfterInsertHooks = []ImageHook{}

	AddImageHook(boil.AfterSelectHook, imageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageAfterSelectHooks = []ImageHook{}

	AddImageHook(boil.BeforeUpdateHook, imageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageBeforeUpdateHooks = []ImageHook{}

	AddImageHook(boil.AfterUpdateHook, imageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageAfterUpdateHooks = []ImageHook{}

	AddImageHook(boil.BeforeDeleteHook, imageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageBeforeDeleteHooks = []ImageHook{}

	AddImageHook(boil.AfterDeleteHook, imageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageAfterDeleteHooks = []ImageHook{}

	AddImageHook(boil.BeforeUpsertHook, imageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageBeforeUpsertHooks = []ImageHook{}

	AddImageHook(boil.AfterUpsertHook, imageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageAfterUpsertHooks = []ImageHook{}
}

func testImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(imageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageOneToOnePostImageUsingIDImagePostImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign PostImage
	var local Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.IDImage = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDImagePostImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.IDImage != foreign.IDImage {
		t.Errorf("want: %v, got %v", foreign.IDImage, check.IDImage)
	}

	ranAfterSelectHook := false
	AddPostImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImageSlice{&local}
	if err = local.L.LoadIDImagePostImage(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImagePostImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDImagePostImage = nil
	if err = local.L.LoadIDImagePostImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImagePostImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImageOneToOneProfileUsingIDAvatarProfile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Profile
	var local Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, profileDBTypes, true, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.IDAvatar, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDAvatarProfile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.IDAvatar, foreign.IDAvatar) {
		t.Errorf("want: %v, got %v", foreign.IDAvatar, check.IDAvatar)
	}

	ranAfterSelectHook := false
	AddProfileHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImageSlice{&local}
	if err = local.L.LoadIDAvatarProfile(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAvatarProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDAvatarProfile = nil
	if err = local.L.LoadIDAvatarProfile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAvatarProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImageOneToOneTattooUsingIDImageTattoo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Tattoo
	var local Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.IDImage = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDImageTattoo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.IDImage != foreign.IDImage {
		t.Errorf("want: %v, got %v", foreign.IDImage, check.IDImage)
	}

	ranAfterSelectHook := false
	AddTattooHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ImageSlice{&local}
	if err = local.L.LoadIDImageTattoo(ctx, tx, false, (*[]*Image)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageTattoo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDImageTattoo = nil
	if err = local.L.LoadIDImageTattoo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageTattoo == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testImageOneToOneSetOpPostImageUsingIDImagePostImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c PostImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, postImageDBTypes, false, strmangle.SetComplement(postImagePrimaryKeyColumns, postImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postImageDBTypes, false, strmangle.SetComplement(postImagePrimaryKeyColumns, postImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PostImage{&b, &c} {
		err = a.SetIDImagePostImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDImagePostImage != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.IDImageImage != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.IDImage {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.IDImage))
		reflect.Indirect(reflect.ValueOf(&x.IDImage)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.IDImage {
			t.Error("foreign key was wrong value", a.ID, x.IDImage)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testImageOneToOneSetOpProfileUsingIDAvatarProfile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Profile{&b, &c} {
		err = a.SetIDAvatarProfile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDAvatarProfile != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.IDAvatarImage != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.IDAvatar) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.IDAvatar))
		reflect.Indirect(reflect.ValueOf(&x.IDAvatar)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.IDAvatar) {
			t.Error("foreign key was wrong value", a.ID, x.IDAvatar)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testImageOneToOneRemoveOpProfileUsingIDAvatarProfile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIDAvatarProfile(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIDAvatarProfile(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.IDAvatarProfile().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.IDAvatarProfile != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.IDAvatar) {
		t.Error("foreign key column should be nil")
	}

	if b.R.IDAvatarImage != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testImageOneToOneSetOpTattooUsingIDImageTattoo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Image
	var b, c Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tattoo{&b, &c} {
		err = a.SetIDImageTattoo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDImageTattoo != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.IDImageImage != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.IDImage {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.IDImage))
		reflect.Indirect(reflect.ValueOf(&x.IDImage)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.IDImage {
			t.Error("foreign key was wrong value", a.ID, x.IDImage)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Images().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageDBTypes = map[string]string{`ID`: `bigint`, `Key`: `text`, `Name`: `text`, `MimeType`: `text`, `CreatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(imageAllColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageDBTypes, true, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageAllColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Image{}
	if err = randomize.Struct(seed, o, imageDBTypes, true, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageDBTypes, true, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageAllColumns, imagePrimaryKeyColumns) {
		fields = imageAllColumns
	} else {
		fields = strmangle.SetComplement(
			imageAllColumns,
			imagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(imageAllColumns) == len(imagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Image{}
	if err = randomize.Struct(seed, &o, imageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Image: %s", err)
	}

	count, err := Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, imageDBTypes, false, imagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Image: %s", err)
	}

	count, err = Images().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
