// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDesigns(t *testing.T) {
	t.Parallel()

	query := Designs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDesignsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDesignsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Designs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDesignsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DesignSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDesignsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DesignExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Design exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DesignExists to return true, but got false.")
	}
}

func testDesignsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	designFound, err := FindDesign(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if designFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDesignsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Designs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDesignsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Designs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDesignsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	designOne := &Design{}
	designTwo := &Design{}
	if err = randomize.Struct(seed, designOne, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err = randomize.Struct(seed, designTwo, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = designOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = designTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Designs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDesignsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	designOne := &Design{}
	designTwo := &Design{}
	if err = randomize.Struct(seed, designOne, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err = randomize.Struct(seed, designTwo, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = designOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = designTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func designBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func designAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Design) error {
	*o = Design{}
	return nil
}

func testDesignsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Design{}
	o := &Design{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, designDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Design object: %s", err)
	}

	AddDesignHook(boil.BeforeInsertHook, designBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	designBeforeInsertHooks = []DesignHook{}

	AddDesignHook(boil.AfterInsertHook, designAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	designAfterInsertHooks = []DesignHook{}

	AddDesignHook(boil.AfterSelectHook, designAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	designAfterSelectHooks = []DesignHook{}

	AddDesignHook(boil.BeforeUpdateHook, designBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	designBeforeUpdateHooks = []DesignHook{}

	AddDesignHook(boil.AfterUpdateHook, designAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	designAfterUpdateHooks = []DesignHook{}

	AddDesignHook(boil.BeforeDeleteHook, designBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	designBeforeDeleteHooks = []DesignHook{}

	AddDesignHook(boil.AfterDeleteHook, designAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	designAfterDeleteHooks = []DesignHook{}

	AddDesignHook(boil.BeforeUpsertHook, designBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	designBeforeUpsertHooks = []DesignHook{}

	AddDesignHook(boil.AfterUpsertHook, designAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	designAfterUpsertHooks = []DesignHook{}
}

func testDesignsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDesignsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(designPrimaryKeyColumns, designColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDesignToManyIDDesignAppointments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Design
	var b, c Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDDesign, a.ID)
	queries.Assign(&c.IDDesign, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDDesignAppointments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDDesign, b.IDDesign) {
			bFound = true
		}
		if queries.Equal(v.IDDesign, c.IDDesign) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DesignSlice{&a}
	if err = a.L.LoadIDDesignAppointments(ctx, tx, false, (*[]*Design)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDDesignAppointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDDesignAppointments = nil
	if err = a.L.LoadIDDesignAppointments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDDesignAppointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDesignToManyAddOpIDDesignAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Design
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Appointment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDDesignAppointments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDDesign) {
			t.Error("foreign key was wrong value", a.ID, first.IDDesign)
		}
		if !queries.Equal(a.ID, second.IDDesign) {
			t.Error("foreign key was wrong value", a.ID, second.IDDesign)
		}

		if first.R.IDDesignDesign != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDDesignDesign != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDDesignAppointments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDDesignAppointments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDDesignAppointments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDesignToManySetOpIDDesignAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Design
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDDesignAppointments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDDesignAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDDesignAppointments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDDesignAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDDesign) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDDesign) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDDesign) {
		t.Error("foreign key was wrong value", a.ID, d.IDDesign)
	}
	if !queries.Equal(a.ID, e.IDDesign) {
		t.Error("foreign key was wrong value", a.ID, e.IDDesign)
	}

	if b.R.IDDesignDesign != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDDesignDesign != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDDesignDesign != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDDesignDesign != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDDesignAppointments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDDesignAppointments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDesignToManyRemoveOpIDDesignAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Design
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDDesignAppointments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDDesignAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDDesignAppointments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDDesignAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDDesign) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDDesign) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDDesignDesign != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDDesignDesign != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDDesignDesign != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDDesignDesign != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDDesignAppointments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDDesignAppointments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDDesignAppointments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDesignToOneImageUsingIDImageImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Design
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDImage = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDImageImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DesignSlice{&local}
	if err = local.L.LoadIDImageImage(ctx, tx, false, (*[]*Design)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDImageImage = nil
	if err = local.L.LoadIDImageImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDesignToOneProfileUsingIDProfileProfile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Design
	var foreign Profile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, designDBTypes, false, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDProfile = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDProfileProfile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProfileHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DesignSlice{&local}
	if err = local.L.LoadIDProfileProfile(ctx, tx, false, (*[]*Design)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDProfileProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDProfileProfile = nil
	if err = local.L.LoadIDProfileProfile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDProfileProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDesignToOneSetOpImageUsingIDImageImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Design
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDImageImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDImageImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDImageDesign != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDImage))
		reflect.Indirect(reflect.ValueOf(&a.IDImage)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage, x.ID)
		}
	}
}
func testDesignToOneSetOpProfileUsingIDProfileProfile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Design
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, designDBTypes, false, strmangle.SetComplement(designPrimaryKeyColumns, designColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Profile{&b, &c} {
		err = a.SetIDProfileProfile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDProfileProfile != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDProfileDesigns[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDProfile != x.ID {
			t.Error("foreign key was wrong value", a.IDProfile)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDProfile))
		reflect.Indirect(reflect.ValueOf(&a.IDProfile)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDProfile != x.ID {
			t.Error("foreign key was wrong value", a.IDProfile, x.ID)
		}
	}
}

func testDesignsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDesignsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DesignSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDesignsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Designs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	designDBTypes = map[string]string{`ID`: `bigint`, `IDProfile`: `bigint`, `IDImage`: `bigint`, `Description`: `text`, `Price`: `bigint`, `Categories`: `ARRAY_text`, `Coordinate`: `geometry`, `CreatedAt`: `timestamp without time zone`, `IsDeleted`: `boolean`, `MaxCopies`: `bigint`, `IsExclusive`: `boolean`}
	_             = bytes.MinRead
)

func testDesignsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(designAllColumns) == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, designDBTypes, true, designPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDesignsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(designAllColumns) == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Design{}
	if err = randomize.Struct(seed, o, designDBTypes, true, designColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, designDBTypes, true, designPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(designAllColumns, designPrimaryKeyColumns) {
		fields = designAllColumns
	} else {
		fields = strmangle.SetComplement(
			designAllColumns,
			designPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DesignSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDesignsUpsert(t *testing.T) {
	t.Parallel()

	if len(designAllColumns) == len(designPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Design{}
	if err = randomize.Struct(seed, &o, designDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Design: %s", err)
	}

	count, err := Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, designDBTypes, false, designPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Design struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Design: %s", err)
	}

	count, err = Designs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
