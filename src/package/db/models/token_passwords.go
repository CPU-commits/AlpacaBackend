// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TokenPassword is an object representing the database table.
type TokenPassword struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Token     string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	IDUser    int64     `boil:"id_user" json:"id_user" toml:"id_user" yaml:"id_user"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *tokenPasswordR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tokenPasswordL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TokenPasswordColumns = struct {
	ID        string
	Token     string
	IDUser    string
	CreatedAt string
}{
	ID:        "id",
	Token:     "token",
	IDUser:    "id_user",
	CreatedAt: "created_at",
}

var TokenPasswordTableColumns = struct {
	ID        string
	Token     string
	IDUser    string
	CreatedAt string
}{
	ID:        "token_passwords.id",
	Token:     "token_passwords.token",
	IDUser:    "token_passwords.id_user",
	CreatedAt: "token_passwords.created_at",
}

// Generated where

var TokenPasswordWhere = struct {
	ID        whereHelperint64
	Token     whereHelperstring
	IDUser    whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"token_passwords\".\"id\""},
	Token:     whereHelperstring{field: "\"token_passwords\".\"token\""},
	IDUser:    whereHelperint64{field: "\"token_passwords\".\"id_user\""},
	CreatedAt: whereHelpertime_Time{field: "\"token_passwords\".\"created_at\""},
}

// TokenPasswordRels is where relationship names are stored.
var TokenPasswordRels = struct {
	IDUserUser string
}{
	IDUserUser: "IDUserUser",
}

// tokenPasswordR is where relationships are stored.
type tokenPasswordR struct {
	IDUserUser *User `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
}

// NewStruct creates a new relationship struct
func (*tokenPasswordR) NewStruct() *tokenPasswordR {
	return &tokenPasswordR{}
}

func (r *tokenPasswordR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}
	return r.IDUserUser
}

// tokenPasswordL is where Load methods for each relationship are stored.
type tokenPasswordL struct{}

var (
	tokenPasswordAllColumns            = []string{"id", "token", "id_user", "created_at"}
	tokenPasswordColumnsWithoutDefault = []string{"token", "id_user"}
	tokenPasswordColumnsWithDefault    = []string{"id", "created_at"}
	tokenPasswordPrimaryKeyColumns     = []string{"id"}
	tokenPasswordGeneratedColumns      = []string{}
)

type (
	// TokenPasswordSlice is an alias for a slice of pointers to TokenPassword.
	// This should almost always be used instead of []TokenPassword.
	TokenPasswordSlice []*TokenPassword
	// TokenPasswordHook is the signature for custom TokenPassword hook methods
	TokenPasswordHook func(context.Context, boil.ContextExecutor, *TokenPassword) error

	tokenPasswordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tokenPasswordType                 = reflect.TypeOf(&TokenPassword{})
	tokenPasswordMapping              = queries.MakeStructMapping(tokenPasswordType)
	tokenPasswordPrimaryKeyMapping, _ = queries.BindMapping(tokenPasswordType, tokenPasswordMapping, tokenPasswordPrimaryKeyColumns)
	tokenPasswordInsertCacheMut       sync.RWMutex
	tokenPasswordInsertCache          = make(map[string]insertCache)
	tokenPasswordUpdateCacheMut       sync.RWMutex
	tokenPasswordUpdateCache          = make(map[string]updateCache)
	tokenPasswordUpsertCacheMut       sync.RWMutex
	tokenPasswordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tokenPasswordAfterSelectMu sync.Mutex
var tokenPasswordAfterSelectHooks []TokenPasswordHook

var tokenPasswordBeforeInsertMu sync.Mutex
var tokenPasswordBeforeInsertHooks []TokenPasswordHook
var tokenPasswordAfterInsertMu sync.Mutex
var tokenPasswordAfterInsertHooks []TokenPasswordHook

var tokenPasswordBeforeUpdateMu sync.Mutex
var tokenPasswordBeforeUpdateHooks []TokenPasswordHook
var tokenPasswordAfterUpdateMu sync.Mutex
var tokenPasswordAfterUpdateHooks []TokenPasswordHook

var tokenPasswordBeforeDeleteMu sync.Mutex
var tokenPasswordBeforeDeleteHooks []TokenPasswordHook
var tokenPasswordAfterDeleteMu sync.Mutex
var tokenPasswordAfterDeleteHooks []TokenPasswordHook

var tokenPasswordBeforeUpsertMu sync.Mutex
var tokenPasswordBeforeUpsertHooks []TokenPasswordHook
var tokenPasswordAfterUpsertMu sync.Mutex
var tokenPasswordAfterUpsertHooks []TokenPasswordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TokenPassword) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TokenPassword) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TokenPassword) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TokenPassword) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TokenPassword) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TokenPassword) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TokenPassword) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TokenPassword) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TokenPassword) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tokenPasswordAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTokenPasswordHook registers your hook function for all future operations.
func AddTokenPasswordHook(hookPoint boil.HookPoint, tokenPasswordHook TokenPasswordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tokenPasswordAfterSelectMu.Lock()
		tokenPasswordAfterSelectHooks = append(tokenPasswordAfterSelectHooks, tokenPasswordHook)
		tokenPasswordAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tokenPasswordBeforeInsertMu.Lock()
		tokenPasswordBeforeInsertHooks = append(tokenPasswordBeforeInsertHooks, tokenPasswordHook)
		tokenPasswordBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tokenPasswordAfterInsertMu.Lock()
		tokenPasswordAfterInsertHooks = append(tokenPasswordAfterInsertHooks, tokenPasswordHook)
		tokenPasswordAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tokenPasswordBeforeUpdateMu.Lock()
		tokenPasswordBeforeUpdateHooks = append(tokenPasswordBeforeUpdateHooks, tokenPasswordHook)
		tokenPasswordBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tokenPasswordAfterUpdateMu.Lock()
		tokenPasswordAfterUpdateHooks = append(tokenPasswordAfterUpdateHooks, tokenPasswordHook)
		tokenPasswordAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tokenPasswordBeforeDeleteMu.Lock()
		tokenPasswordBeforeDeleteHooks = append(tokenPasswordBeforeDeleteHooks, tokenPasswordHook)
		tokenPasswordBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tokenPasswordAfterDeleteMu.Lock()
		tokenPasswordAfterDeleteHooks = append(tokenPasswordAfterDeleteHooks, tokenPasswordHook)
		tokenPasswordAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tokenPasswordBeforeUpsertMu.Lock()
		tokenPasswordBeforeUpsertHooks = append(tokenPasswordBeforeUpsertHooks, tokenPasswordHook)
		tokenPasswordBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tokenPasswordAfterUpsertMu.Lock()
		tokenPasswordAfterUpsertHooks = append(tokenPasswordAfterUpsertHooks, tokenPasswordHook)
		tokenPasswordAfterUpsertMu.Unlock()
	}
}

// One returns a single tokenPassword record from the query.
func (q tokenPasswordQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TokenPassword, error) {
	o := &TokenPassword{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for token_passwords")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TokenPassword records from the query.
func (q tokenPasswordQuery) All(ctx context.Context, exec boil.ContextExecutor) (TokenPasswordSlice, error) {
	var o []*TokenPassword

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TokenPassword slice")
	}

	if len(tokenPasswordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TokenPassword records in the query.
func (q tokenPasswordQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count token_passwords rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tokenPasswordQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if token_passwords exists")
	}

	return count > 0, nil
}

// IDUserUser pointed to by the foreign key.
func (o *TokenPassword) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tokenPasswordL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTokenPassword interface{}, mods queries.Applicator) error {
	var slice []*TokenPassword
	var object *TokenPassword

	if singular {
		var ok bool
		object, ok = maybeTokenPassword.(*TokenPassword)
		if !ok {
			object = new(TokenPassword)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTokenPassword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTokenPassword))
			}
		}
	} else {
		s, ok := maybeTokenPassword.(*[]*TokenPassword)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTokenPassword)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTokenPassword))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tokenPasswordR{}
		}
		args[object.IDUser] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tokenPasswordR{}
			}

			args[obj.IDUser] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserTokenPassword = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUser == foreign.ID {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserTokenPassword = local
				break
			}
		}
	}

	return nil
}

// SetIDUserUser of the tokenPassword to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserTokenPassword.
func (o *TokenPassword) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"token_passwords\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, tokenPasswordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUser = related.ID
	if o.R == nil {
		o.R = &tokenPasswordR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserTokenPassword: o,
		}
	} else {
		related.R.IDUserTokenPassword = o
	}

	return nil
}

// TokenPasswords retrieves all the records using an executor.
func TokenPasswords(mods ...qm.QueryMod) tokenPasswordQuery {
	mods = append(mods, qm.From("\"token_passwords\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"token_passwords\".*"})
	}

	return tokenPasswordQuery{q}
}

// FindTokenPassword retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTokenPassword(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TokenPassword, error) {
	tokenPasswordObj := &TokenPassword{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"token_passwords\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tokenPasswordObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from token_passwords")
	}

	if err = tokenPasswordObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tokenPasswordObj, err
	}

	return tokenPasswordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TokenPassword) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_passwords provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenPasswordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tokenPasswordInsertCacheMut.RLock()
	cache, cached := tokenPasswordInsertCache[key]
	tokenPasswordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tokenPasswordAllColumns,
			tokenPasswordColumnsWithDefault,
			tokenPasswordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tokenPasswordType, tokenPasswordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tokenPasswordType, tokenPasswordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"token_passwords\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"token_passwords\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into token_passwords")
	}

	if !cached {
		tokenPasswordInsertCacheMut.Lock()
		tokenPasswordInsertCache[key] = cache
		tokenPasswordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TokenPassword.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TokenPassword) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tokenPasswordUpdateCacheMut.RLock()
	cache, cached := tokenPasswordUpdateCache[key]
	tokenPasswordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tokenPasswordAllColumns,
			tokenPasswordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update token_passwords, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"token_passwords\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tokenPasswordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tokenPasswordType, tokenPasswordMapping, append(wl, tokenPasswordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update token_passwords row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for token_passwords")
	}

	if !cached {
		tokenPasswordUpdateCacheMut.Lock()
		tokenPasswordUpdateCache[key] = cache
		tokenPasswordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tokenPasswordQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for token_passwords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for token_passwords")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TokenPasswordSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"token_passwords\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tokenPasswordPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tokenPassword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tokenPassword")
	}
	return rowsAff, nil
}

// Delete deletes a single TokenPassword record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TokenPassword) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TokenPassword provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tokenPasswordPrimaryKeyMapping)
	sql := "DELETE FROM \"token_passwords\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from token_passwords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for token_passwords")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tokenPasswordQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tokenPasswordQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from token_passwords")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_passwords")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TokenPasswordSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tokenPasswordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"token_passwords\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPasswordPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tokenPassword slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for token_passwords")
	}

	if len(tokenPasswordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TokenPassword) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTokenPassword(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TokenPasswordSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TokenPasswordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tokenPasswordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"token_passwords\".* FROM \"token_passwords\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tokenPasswordPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TokenPasswordSlice")
	}

	*o = slice

	return nil
}

// TokenPasswordExists checks if the TokenPassword row exists.
func TokenPasswordExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"token_passwords\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if token_passwords exists")
	}

	return exists, nil
}

// Exists checks if the TokenPassword row exists.
func (o *TokenPassword) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TokenPasswordExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TokenPassword) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no token_passwords provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tokenPasswordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tokenPasswordUpsertCacheMut.RLock()
	cache, cached := tokenPasswordUpsertCache[key]
	tokenPasswordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tokenPasswordAllColumns,
			tokenPasswordColumnsWithDefault,
			tokenPasswordColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tokenPasswordAllColumns,
			tokenPasswordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert token_passwords, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tokenPasswordPrimaryKeyColumns))
			copy(conflict, tokenPasswordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"token_passwords\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tokenPasswordType, tokenPasswordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tokenPasswordType, tokenPasswordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return fmt.Errorf("models: unable to upsert token_passwords: %w", err)
	}

	if !cached {
		tokenPasswordUpsertCacheMut.Lock()
		tokenPasswordUpsertCache[key] = cache
		tokenPasswordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
