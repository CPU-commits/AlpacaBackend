// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TattooCategory is an object representing the database table.
type TattooCategory struct {
	ID         int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDTattoo   int64 `boil:"id_tattoo" json:"id_tattoo" toml:"id_tattoo" yaml:"id_tattoo"`
	IDCategory int64 `boil:"id_category" json:"id_category" toml:"id_category" yaml:"id_category"`

	R *tattooCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tattooCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TattooCategoryColumns = struct {
	ID         string
	IDTattoo   string
	IDCategory string
}{
	ID:         "id",
	IDTattoo:   "id_tattoo",
	IDCategory: "id_category",
}

var TattooCategoryTableColumns = struct {
	ID         string
	IDTattoo   string
	IDCategory string
}{
	ID:         "tattoo_categories.id",
	IDTattoo:   "tattoo_categories.id_tattoo",
	IDCategory: "tattoo_categories.id_category",
}

// Generated where

var TattooCategoryWhere = struct {
	ID         whereHelperint64
	IDTattoo   whereHelperint64
	IDCategory whereHelperint64
}{
	ID:         whereHelperint64{field: "\"tattoo_categories\".\"id\""},
	IDTattoo:   whereHelperint64{field: "\"tattoo_categories\".\"id_tattoo\""},
	IDCategory: whereHelperint64{field: "\"tattoo_categories\".\"id_category\""},
}

// TattooCategoryRels is where relationship names are stored.
var TattooCategoryRels = struct {
	IDTattooTattoo     string
	IDCategoryCategory string
}{
	IDTattooTattoo:     "IDTattooTattoo",
	IDCategoryCategory: "IDCategoryCategory",
}

// tattooCategoryR is where relationships are stored.
type tattooCategoryR struct {
	IDTattooTattoo     *Tattoo   `boil:"IDTattooTattoo" json:"IDTattooTattoo" toml:"IDTattooTattoo" yaml:"IDTattooTattoo"`
	IDCategoryCategory *Category `boil:"IDCategoryCategory" json:"IDCategoryCategory" toml:"IDCategoryCategory" yaml:"IDCategoryCategory"`
}

// NewStruct creates a new relationship struct
func (*tattooCategoryR) NewStruct() *tattooCategoryR {
	return &tattooCategoryR{}
}

func (r *tattooCategoryR) GetIDTattooTattoo() *Tattoo {
	if r == nil {
		return nil
	}
	return r.IDTattooTattoo
}

func (r *tattooCategoryR) GetIDCategoryCategory() *Category {
	if r == nil {
		return nil
	}
	return r.IDCategoryCategory
}

// tattooCategoryL is where Load methods for each relationship are stored.
type tattooCategoryL struct{}

var (
	tattooCategoryAllColumns            = []string{"id", "id_tattoo", "id_category"}
	tattooCategoryColumnsWithoutDefault = []string{"id_tattoo", "id_category"}
	tattooCategoryColumnsWithDefault    = []string{"id"}
	tattooCategoryPrimaryKeyColumns     = []string{"id"}
	tattooCategoryGeneratedColumns      = []string{}
)

type (
	// TattooCategorySlice is an alias for a slice of pointers to TattooCategory.
	// This should almost always be used instead of []TattooCategory.
	TattooCategorySlice []*TattooCategory
	// TattooCategoryHook is the signature for custom TattooCategory hook methods
	TattooCategoryHook func(context.Context, boil.ContextExecutor, *TattooCategory) error

	tattooCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tattooCategoryType                 = reflect.TypeOf(&TattooCategory{})
	tattooCategoryMapping              = queries.MakeStructMapping(tattooCategoryType)
	tattooCategoryPrimaryKeyMapping, _ = queries.BindMapping(tattooCategoryType, tattooCategoryMapping, tattooCategoryPrimaryKeyColumns)
	tattooCategoryInsertCacheMut       sync.RWMutex
	tattooCategoryInsertCache          = make(map[string]insertCache)
	tattooCategoryUpdateCacheMut       sync.RWMutex
	tattooCategoryUpdateCache          = make(map[string]updateCache)
	tattooCategoryUpsertCacheMut       sync.RWMutex
	tattooCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tattooCategoryAfterSelectMu sync.Mutex
var tattooCategoryAfterSelectHooks []TattooCategoryHook

var tattooCategoryBeforeInsertMu sync.Mutex
var tattooCategoryBeforeInsertHooks []TattooCategoryHook
var tattooCategoryAfterInsertMu sync.Mutex
var tattooCategoryAfterInsertHooks []TattooCategoryHook

var tattooCategoryBeforeUpdateMu sync.Mutex
var tattooCategoryBeforeUpdateHooks []TattooCategoryHook
var tattooCategoryAfterUpdateMu sync.Mutex
var tattooCategoryAfterUpdateHooks []TattooCategoryHook

var tattooCategoryBeforeDeleteMu sync.Mutex
var tattooCategoryBeforeDeleteHooks []TattooCategoryHook
var tattooCategoryAfterDeleteMu sync.Mutex
var tattooCategoryAfterDeleteHooks []TattooCategoryHook

var tattooCategoryBeforeUpsertMu sync.Mutex
var tattooCategoryBeforeUpsertHooks []TattooCategoryHook
var tattooCategoryAfterUpsertMu sync.Mutex
var tattooCategoryAfterUpsertHooks []TattooCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TattooCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TattooCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TattooCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TattooCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TattooCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TattooCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TattooCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TattooCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TattooCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTattooCategoryHook registers your hook function for all future operations.
func AddTattooCategoryHook(hookPoint boil.HookPoint, tattooCategoryHook TattooCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tattooCategoryAfterSelectMu.Lock()
		tattooCategoryAfterSelectHooks = append(tattooCategoryAfterSelectHooks, tattooCategoryHook)
		tattooCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tattooCategoryBeforeInsertMu.Lock()
		tattooCategoryBeforeInsertHooks = append(tattooCategoryBeforeInsertHooks, tattooCategoryHook)
		tattooCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tattooCategoryAfterInsertMu.Lock()
		tattooCategoryAfterInsertHooks = append(tattooCategoryAfterInsertHooks, tattooCategoryHook)
		tattooCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tattooCategoryBeforeUpdateMu.Lock()
		tattooCategoryBeforeUpdateHooks = append(tattooCategoryBeforeUpdateHooks, tattooCategoryHook)
		tattooCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tattooCategoryAfterUpdateMu.Lock()
		tattooCategoryAfterUpdateHooks = append(tattooCategoryAfterUpdateHooks, tattooCategoryHook)
		tattooCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tattooCategoryBeforeDeleteMu.Lock()
		tattooCategoryBeforeDeleteHooks = append(tattooCategoryBeforeDeleteHooks, tattooCategoryHook)
		tattooCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tattooCategoryAfterDeleteMu.Lock()
		tattooCategoryAfterDeleteHooks = append(tattooCategoryAfterDeleteHooks, tattooCategoryHook)
		tattooCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tattooCategoryBeforeUpsertMu.Lock()
		tattooCategoryBeforeUpsertHooks = append(tattooCategoryBeforeUpsertHooks, tattooCategoryHook)
		tattooCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tattooCategoryAfterUpsertMu.Lock()
		tattooCategoryAfterUpsertHooks = append(tattooCategoryAfterUpsertHooks, tattooCategoryHook)
		tattooCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single tattooCategory record from the query.
func (q tattooCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TattooCategory, error) {
	o := &TattooCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tattoo_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TattooCategory records from the query.
func (q tattooCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TattooCategorySlice, error) {
	var o []*TattooCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TattooCategory slice")
	}

	if len(tattooCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TattooCategory records in the query.
func (q tattooCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tattoo_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tattooCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tattoo_categories exists")
	}

	return count > 0, nil
}

// IDTattooTattoo pointed to by the foreign key.
func (o *TattooCategory) IDTattooTattoo(mods ...qm.QueryMod) tattooQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDTattoo),
	}

	queryMods = append(queryMods, mods...)

	return Tattoos(queryMods...)
}

// IDCategoryCategory pointed to by the foreign key.
func (o *TattooCategory) IDCategoryCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategory),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// LoadIDTattooTattoo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tattooCategoryL) LoadIDTattooTattoo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTattooCategory interface{}, mods queries.Applicator) error {
	var slice []*TattooCategory
	var object *TattooCategory

	if singular {
		var ok bool
		object, ok = maybeTattooCategory.(*TattooCategory)
		if !ok {
			object = new(TattooCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTattooCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTattooCategory))
			}
		}
	} else {
		s, ok := maybeTattooCategory.(*[]*TattooCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTattooCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTattooCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tattooCategoryR{}
		}
		args[object.IDTattoo] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tattooCategoryR{}
			}

			args[obj.IDTattoo] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tattoos`),
		qm.WhereIn(`tattoos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tattoo")
	}

	var resultSlice []*Tattoo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tattoo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tattoos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tattoos")
	}

	if len(tattooAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDTattooTattoo = foreign
		if foreign.R == nil {
			foreign.R = &tattooR{}
		}
		foreign.R.IDTattooTattooCategories = append(foreign.R.IDTattooTattooCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDTattoo == foreign.ID {
				local.R.IDTattooTattoo = foreign
				if foreign.R == nil {
					foreign.R = &tattooR{}
				}
				foreign.R.IDTattooTattooCategories = append(foreign.R.IDTattooTattooCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCategoryCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tattooCategoryL) LoadIDCategoryCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTattooCategory interface{}, mods queries.Applicator) error {
	var slice []*TattooCategory
	var object *TattooCategory

	if singular {
		var ok bool
		object, ok = maybeTattooCategory.(*TattooCategory)
		if !ok {
			object = new(TattooCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTattooCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTattooCategory))
			}
		}
	} else {
		s, ok := maybeTattooCategory.(*[]*TattooCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTattooCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTattooCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tattooCategoryR{}
		}
		args[object.IDCategory] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tattooCategoryR{}
			}

			args[obj.IDCategory] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategoryCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.IDCategoryTattooCategories = append(foreign.R.IDCategoryTattooCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategory == foreign.ID {
				local.R.IDCategoryCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.IDCategoryTattooCategories = append(foreign.R.IDCategoryTattooCategories, local)
				break
			}
		}
	}

	return nil
}

// SetIDTattooTattoo of the tattooCategory to the related item.
// Sets o.R.IDTattooTattoo to related.
// Adds o to related.R.IDTattooTattooCategories.
func (o *TattooCategory) SetIDTattooTattoo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tattoo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tattoo_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_tattoo"}),
		strmangle.WhereClause("\"", "\"", 2, tattooCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDTattoo = related.ID
	if o.R == nil {
		o.R = &tattooCategoryR{
			IDTattooTattoo: related,
		}
	} else {
		o.R.IDTattooTattoo = related
	}

	if related.R == nil {
		related.R = &tattooR{
			IDTattooTattooCategories: TattooCategorySlice{o},
		}
	} else {
		related.R.IDTattooTattooCategories = append(related.R.IDTattooTattooCategories, o)
	}

	return nil
}

// SetIDCategoryCategory of the tattooCategory to the related item.
// Sets o.R.IDCategoryCategory to related.
// Adds o to related.R.IDCategoryTattooCategories.
func (o *TattooCategory) SetIDCategoryCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tattoo_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_category"}),
		strmangle.WhereClause("\"", "\"", 2, tattooCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategory = related.ID
	if o.R == nil {
		o.R = &tattooCategoryR{
			IDCategoryCategory: related,
		}
	} else {
		o.R.IDCategoryCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			IDCategoryTattooCategories: TattooCategorySlice{o},
		}
	} else {
		related.R.IDCategoryTattooCategories = append(related.R.IDCategoryTattooCategories, o)
	}

	return nil
}

// TattooCategories retrieves all the records using an executor.
func TattooCategories(mods ...qm.QueryMod) tattooCategoryQuery {
	mods = append(mods, qm.From("\"tattoo_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tattoo_categories\".*"})
	}

	return tattooCategoryQuery{q}
}

// FindTattooCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTattooCategory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TattooCategory, error) {
	tattooCategoryObj := &TattooCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tattoo_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tattooCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tattoo_categories")
	}

	if err = tattooCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tattooCategoryObj, err
	}

	return tattooCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TattooCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tattoo_categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tattooCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tattooCategoryInsertCacheMut.RLock()
	cache, cached := tattooCategoryInsertCache[key]
	tattooCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tattooCategoryAllColumns,
			tattooCategoryColumnsWithDefault,
			tattooCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tattooCategoryType, tattooCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tattooCategoryType, tattooCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tattoo_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tattoo_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tattoo_categories")
	}

	if !cached {
		tattooCategoryInsertCacheMut.Lock()
		tattooCategoryInsertCache[key] = cache
		tattooCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TattooCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TattooCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tattooCategoryUpdateCacheMut.RLock()
	cache, cached := tattooCategoryUpdateCache[key]
	tattooCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tattooCategoryAllColumns,
			tattooCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tattoo_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tattoo_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tattooCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tattooCategoryType, tattooCategoryMapping, append(wl, tattooCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tattoo_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tattoo_categories")
	}

	if !cached {
		tattooCategoryUpdateCacheMut.Lock()
		tattooCategoryUpdateCache[key] = cache
		tattooCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tattooCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tattoo_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tattoo_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TattooCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tattooCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tattoo_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tattooCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tattooCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tattooCategory")
	}
	return rowsAff, nil
}

// Delete deletes a single TattooCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TattooCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TattooCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tattooCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"tattoo_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tattoo_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tattoo_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tattooCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tattooCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tattoo_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tattoo_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TattooCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tattooCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tattooCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tattoo_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tattooCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tattooCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tattoo_categories")
	}

	if len(tattooCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TattooCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTattooCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TattooCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TattooCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tattooCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tattoo_categories\".* FROM \"tattoo_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tattooCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TattooCategorySlice")
	}

	*o = slice

	return nil
}

// TattooCategoryExists checks if the TattooCategory row exists.
func TattooCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tattoo_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tattoo_categories exists")
	}

	return exists, nil
}

// Exists checks if the TattooCategory row exists.
func (o *TattooCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TattooCategoryExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TattooCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tattoo_categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tattooCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tattooCategoryUpsertCacheMut.RLock()
	cache, cached := tattooCategoryUpsertCache[key]
	tattooCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tattooCategoryAllColumns,
			tattooCategoryColumnsWithDefault,
			tattooCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tattooCategoryAllColumns,
			tattooCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tattoo_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tattooCategoryPrimaryKeyColumns))
			copy(conflict, tattooCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"tattoo_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tattooCategoryType, tattooCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tattooCategoryType, tattooCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return fmt.Errorf("models: unable to upsert tattoo_categories: %w", err)
	}

	if !cached {
		tattooCategoryUpsertCacheMut.Lock()
		tattooCategoryUpsertCache[key] = cache
		tattooCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
