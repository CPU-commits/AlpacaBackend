// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// AppointmentImage is an object representing the database table.
type AppointmentImage struct {
	IDAppointment int64 `boil:"id_appointment" json:"id_appointment" toml:"id_appointment" yaml:"id_appointment"`
	IDImage       int64 `boil:"id_image" json:"id_image" toml:"id_image" yaml:"id_image"`
	ID            int64 `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *appointmentImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L appointmentImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AppointmentImageColumns = struct {
	IDAppointment string
	IDImage       string
	ID            string
}{
	IDAppointment: "id_appointment",
	IDImage:       "id_image",
	ID:            "id",
}

var AppointmentImageTableColumns = struct {
	IDAppointment string
	IDImage       string
	ID            string
}{
	IDAppointment: "appointment_images.id_appointment",
	IDImage:       "appointment_images.id_image",
	ID:            "appointment_images.id",
}

// Generated where

var AppointmentImageWhere = struct {
	IDAppointment whereHelperint64
	IDImage       whereHelperint64
	ID            whereHelperint64
}{
	IDAppointment: whereHelperint64{field: "\"appointment_images\".\"id_appointment\""},
	IDImage:       whereHelperint64{field: "\"appointment_images\".\"id_image\""},
	ID:            whereHelperint64{field: "\"appointment_images\".\"id\""},
}

// AppointmentImageRels is where relationship names are stored.
var AppointmentImageRels = struct {
	IDAppointmentAppointment string
	IDImageImage             string
}{
	IDAppointmentAppointment: "IDAppointmentAppointment",
	IDImageImage:             "IDImageImage",
}

// appointmentImageR is where relationships are stored.
type appointmentImageR struct {
	IDAppointmentAppointment *Appointment `boil:"IDAppointmentAppointment" json:"IDAppointmentAppointment" toml:"IDAppointmentAppointment" yaml:"IDAppointmentAppointment"`
	IDImageImage             *Image       `boil:"IDImageImage" json:"IDImageImage" toml:"IDImageImage" yaml:"IDImageImage"`
}

// NewStruct creates a new relationship struct
func (*appointmentImageR) NewStruct() *appointmentImageR {
	return &appointmentImageR{}
}

<<<<<<< HEAD
func (o *AppointmentImage) GetIDAppointmentAppointment() *Appointment {
	if o == nil {
		return nil
	}

	return o.R.GetIDAppointmentAppointment()
}

=======
>>>>>>> origin/master
func (r *appointmentImageR) GetIDAppointmentAppointment() *Appointment {
	if r == nil {
		return nil
	}

	return r.IDAppointmentAppointment
}

<<<<<<< HEAD
func (o *AppointmentImage) GetIDImageImage() *Image {
	if o == nil {
		return nil
	}

	return o.R.GetIDImageImage()
}

=======
>>>>>>> origin/master
func (r *appointmentImageR) GetIDImageImage() *Image {
	if r == nil {
		return nil
	}
<<<<<<< HEAD

=======
>>>>>>> origin/master
	return r.IDImageImage
}

// appointmentImageL is where Load methods for each relationship are stored.
type appointmentImageL struct{}

var (
	appointmentImageAllColumns            = []string{"id_appointment", "id_image", "id"}
	appointmentImageColumnsWithoutDefault = []string{"id_appointment", "id_image"}
	appointmentImageColumnsWithDefault    = []string{"id"}
	appointmentImagePrimaryKeyColumns     = []string{"id"}
	appointmentImageGeneratedColumns      = []string{}
)

type (
	// AppointmentImageSlice is an alias for a slice of pointers to AppointmentImage.
	// This should almost always be used instead of []AppointmentImage.
	AppointmentImageSlice []*AppointmentImage
	// AppointmentImageHook is the signature for custom AppointmentImage hook methods
	AppointmentImageHook func(context.Context, boil.ContextExecutor, *AppointmentImage) error

	appointmentImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	appointmentImageType                 = reflect.TypeOf(&AppointmentImage{})
	appointmentImageMapping              = queries.MakeStructMapping(appointmentImageType)
	appointmentImagePrimaryKeyMapping, _ = queries.BindMapping(appointmentImageType, appointmentImageMapping, appointmentImagePrimaryKeyColumns)
	appointmentImageInsertCacheMut       sync.RWMutex
	appointmentImageInsertCache          = make(map[string]insertCache)
	appointmentImageUpdateCacheMut       sync.RWMutex
	appointmentImageUpdateCache          = make(map[string]updateCache)
	appointmentImageUpsertCacheMut       sync.RWMutex
	appointmentImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var appointmentImageAfterSelectMu sync.Mutex
var appointmentImageAfterSelectHooks []AppointmentImageHook

var appointmentImageBeforeInsertMu sync.Mutex
var appointmentImageBeforeInsertHooks []AppointmentImageHook
var appointmentImageAfterInsertMu sync.Mutex
var appointmentImageAfterInsertHooks []AppointmentImageHook

var appointmentImageBeforeUpdateMu sync.Mutex
var appointmentImageBeforeUpdateHooks []AppointmentImageHook
var appointmentImageAfterUpdateMu sync.Mutex
var appointmentImageAfterUpdateHooks []AppointmentImageHook

var appointmentImageBeforeDeleteMu sync.Mutex
var appointmentImageBeforeDeleteHooks []AppointmentImageHook
var appointmentImageAfterDeleteMu sync.Mutex
var appointmentImageAfterDeleteHooks []AppointmentImageHook

var appointmentImageBeforeUpsertMu sync.Mutex
var appointmentImageBeforeUpsertHooks []AppointmentImageHook
var appointmentImageAfterUpsertMu sync.Mutex
var appointmentImageAfterUpsertHooks []AppointmentImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AppointmentImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AppointmentImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AppointmentImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AppointmentImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AppointmentImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AppointmentImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AppointmentImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AppointmentImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AppointmentImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range appointmentImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAppointmentImageHook registers your hook function for all future operations.
func AddAppointmentImageHook(hookPoint boil.HookPoint, appointmentImageHook AppointmentImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		appointmentImageAfterSelectMu.Lock()
		appointmentImageAfterSelectHooks = append(appointmentImageAfterSelectHooks, appointmentImageHook)
		appointmentImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		appointmentImageBeforeInsertMu.Lock()
		appointmentImageBeforeInsertHooks = append(appointmentImageBeforeInsertHooks, appointmentImageHook)
		appointmentImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		appointmentImageAfterInsertMu.Lock()
		appointmentImageAfterInsertHooks = append(appointmentImageAfterInsertHooks, appointmentImageHook)
		appointmentImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		appointmentImageBeforeUpdateMu.Lock()
		appointmentImageBeforeUpdateHooks = append(appointmentImageBeforeUpdateHooks, appointmentImageHook)
		appointmentImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		appointmentImageAfterUpdateMu.Lock()
		appointmentImageAfterUpdateHooks = append(appointmentImageAfterUpdateHooks, appointmentImageHook)
		appointmentImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		appointmentImageBeforeDeleteMu.Lock()
		appointmentImageBeforeDeleteHooks = append(appointmentImageBeforeDeleteHooks, appointmentImageHook)
		appointmentImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		appointmentImageAfterDeleteMu.Lock()
		appointmentImageAfterDeleteHooks = append(appointmentImageAfterDeleteHooks, appointmentImageHook)
		appointmentImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		appointmentImageBeforeUpsertMu.Lock()
		appointmentImageBeforeUpsertHooks = append(appointmentImageBeforeUpsertHooks, appointmentImageHook)
		appointmentImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		appointmentImageAfterUpsertMu.Lock()
		appointmentImageAfterUpsertHooks = append(appointmentImageAfterUpsertHooks, appointmentImageHook)
		appointmentImageAfterUpsertMu.Unlock()
	}
}

// One returns a single appointmentImage record from the query.
func (q appointmentImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AppointmentImage, error) {
	o := &AppointmentImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for appointment_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AppointmentImage records from the query.
func (q appointmentImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (AppointmentImageSlice, error) {
	var o []*AppointmentImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AppointmentImage slice")
	}

	if len(appointmentImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AppointmentImage records in the query.
func (q appointmentImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count appointment_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q appointmentImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if appointment_images exists")
	}

	return count > 0, nil
}

// IDAppointmentAppointment pointed to by the foreign key.
func (o *AppointmentImage) IDAppointmentAppointment(mods ...qm.QueryMod) appointmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDAppointment),
	}

	queryMods = append(queryMods, mods...)

	return Appointments(queryMods...)
}

// IDImageImage pointed to by the foreign key.
func (o *AppointmentImage) IDImageImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDImage),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// LoadIDAppointmentAppointment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (appointmentImageL) LoadIDAppointmentAppointment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppointmentImage interface{}, mods queries.Applicator) error {
	var slice []*AppointmentImage
	var object *AppointmentImage

	if singular {
		var ok bool
		object, ok = maybeAppointmentImage.(*AppointmentImage)
		if !ok {
			object = new(AppointmentImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppointmentImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppointmentImage))
			}
		}
	} else {
		s, ok := maybeAppointmentImage.(*[]*AppointmentImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppointmentImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppointmentImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &appointmentImageR{}
		}
		args[object.IDAppointment] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentImageR{}
			}

			args[obj.IDAppointment] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`appointments`),
		qm.WhereIn(`appointments.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Appointment")
	}

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Appointment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for appointments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDAppointmentAppointment = foreign
		if foreign.R == nil {
			foreign.R = &appointmentR{}
		}
		foreign.R.IDAppointmentAppointmentImages = append(foreign.R.IDAppointmentAppointmentImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDAppointment == foreign.ID {
				local.R.IDAppointmentAppointment = foreign
				if foreign.R == nil {
					foreign.R = &appointmentR{}
				}
				foreign.R.IDAppointmentAppointmentImages = append(foreign.R.IDAppointmentAppointmentImages, local)
				break
			}
		}
	}

	return nil
}

// LoadIDImageImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (appointmentImageL) LoadIDImageImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAppointmentImage interface{}, mods queries.Applicator) error {
	var slice []*AppointmentImage
	var object *AppointmentImage

	if singular {
		var ok bool
		object, ok = maybeAppointmentImage.(*AppointmentImage)
		if !ok {
			object = new(AppointmentImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAppointmentImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAppointmentImage))
			}
		}
	} else {
		s, ok := maybeAppointmentImage.(*[]*AppointmentImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAppointmentImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAppointmentImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &appointmentImageR{}
		}
		args[object.IDImage] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &appointmentImageR{}
			}

			args[obj.IDImage] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDImageImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDImageAppointmentImage = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDImage == foreign.ID {
				local.R.IDImageImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDImageAppointmentImage = local
				break
			}
		}
	}

	return nil
}

// SetIDAppointmentAppointment of the appointmentImage to the related item.
// Sets o.R.IDAppointmentAppointment to related.
// Adds o to related.R.IDAppointmentAppointmentImages.
func (o *AppointmentImage) SetIDAppointmentAppointment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Appointment) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"appointment_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_appointment"}),
		strmangle.WhereClause("\"", "\"", 2, appointmentImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDAppointment = related.ID
	if o.R == nil {
		o.R = &appointmentImageR{
			IDAppointmentAppointment: related,
		}
	} else {
		o.R.IDAppointmentAppointment = related
	}

	if related.R == nil {
		related.R = &appointmentR{
			IDAppointmentAppointmentImages: AppointmentImageSlice{o},
		}
	} else {
		related.R.IDAppointmentAppointmentImages = append(related.R.IDAppointmentAppointmentImages, o)
	}

	return nil
}

// SetIDImageImage of the appointmentImage to the related item.
// Sets o.R.IDImageImage to related.
// Adds o to related.R.IDImageAppointmentImage.
func (o *AppointmentImage) SetIDImageImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"appointment_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_image"}),
		strmangle.WhereClause("\"", "\"", 2, appointmentImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDImage = related.ID
	if o.R == nil {
		o.R = &appointmentImageR{
			IDImageImage: related,
		}
	} else {
		o.R.IDImageImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDImageAppointmentImage: o,
		}
	} else {
		related.R.IDImageAppointmentImage = o
	}

	return nil
}

// AppointmentImages retrieves all the records using an executor.
func AppointmentImages(mods ...qm.QueryMod) appointmentImageQuery {
	mods = append(mods, qm.From("\"appointment_images\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"appointment_images\".*"})
	}

	return appointmentImageQuery{q}
}

// FindAppointmentImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAppointmentImage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*AppointmentImage, error) {
	appointmentImageObj := &AppointmentImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"appointment_images\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, appointmentImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from appointment_images")
	}

	if err = appointmentImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return appointmentImageObj, err
	}

	return appointmentImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AppointmentImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no appointment_images provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appointmentImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	appointmentImageInsertCacheMut.RLock()
	cache, cached := appointmentImageInsertCache[key]
	appointmentImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			appointmentImageAllColumns,
			appointmentImageColumnsWithDefault,
			appointmentImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(appointmentImageType, appointmentImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(appointmentImageType, appointmentImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"appointment_images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"appointment_images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into appointment_images")
	}

	if !cached {
		appointmentImageInsertCacheMut.Lock()
		appointmentImageInsertCache[key] = cache
		appointmentImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AppointmentImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AppointmentImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	appointmentImageUpdateCacheMut.RLock()
	cache, cached := appointmentImageUpdateCache[key]
	appointmentImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			appointmentImageAllColumns,
			appointmentImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update appointment_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"appointment_images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, appointmentImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(appointmentImageType, appointmentImageMapping, append(wl, appointmentImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update appointment_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for appointment_images")
	}

	if !cached {
		appointmentImageUpdateCacheMut.Lock()
		appointmentImageUpdateCache[key] = cache
		appointmentImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q appointmentImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for appointment_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for appointment_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AppointmentImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"appointment_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, appointmentImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in appointmentImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all appointmentImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AppointmentImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no appointment_images provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(appointmentImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	appointmentImageUpsertCacheMut.RLock()
	cache, cached := appointmentImageUpsertCache[key]
	appointmentImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			appointmentImageAllColumns,
			appointmentImageColumnsWithDefault,
			appointmentImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			appointmentImageAllColumns,
			appointmentImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert appointment_images, could not build update column list")
		}

		ret := strmangle.SetComplement(appointmentImageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(appointmentImagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert appointment_images, could not build conflict column list")
			}

			conflict = make([]string, len(appointmentImagePrimaryKeyColumns))
			copy(conflict, appointmentImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"appointment_images\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(appointmentImageType, appointmentImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(appointmentImageType, appointmentImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert appointment_images")
	}

	if !cached {
		appointmentImageUpsertCacheMut.Lock()
		appointmentImageUpsertCache[key] = cache
		appointmentImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AppointmentImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AppointmentImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AppointmentImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), appointmentImagePrimaryKeyMapping)
	sql := "DELETE FROM \"appointment_images\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from appointment_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for appointment_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q appointmentImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no appointmentImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from appointment_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for appointment_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AppointmentImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(appointmentImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"appointment_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appointmentImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from appointmentImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for appointment_images")
	}

	if len(appointmentImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AppointmentImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAppointmentImage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AppointmentImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AppointmentImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), appointmentImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"appointment_images\".* FROM \"appointment_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, appointmentImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AppointmentImageSlice")
	}

	*o = slice

	return nil
}

// AppointmentImageExists checks if the AppointmentImage row exists.
func AppointmentImageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"appointment_images\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if appointment_images exists")
	}

	return exists, nil
}

// Exists checks if the AppointmentImage row exists.
func (o *AppointmentImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AppointmentImageExists(ctx, exec, o.ID)
}
