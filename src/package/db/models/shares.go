// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Share is an object representing the database table.
type Share struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDPost    int64     `boil:"id_post" json:"id_post" toml:"id_post" yaml:"id_post"`
	IDUser    int64     `boil:"id_user" json:"id_user" toml:"id_user" yaml:"id_user"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *shareR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shareL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShareColumns = struct {
	ID        string
	IDPost    string
	IDUser    string
	CreatedAt string
}{
	ID:        "id",
	IDPost:    "id_post",
	IDUser:    "id_user",
	CreatedAt: "created_at",
}

var ShareTableColumns = struct {
	ID        string
	IDPost    string
	IDUser    string
	CreatedAt string
}{
	ID:        "shares.id",
	IDPost:    "shares.id_post",
	IDUser:    "shares.id_user",
	CreatedAt: "shares.created_at",
}

// Generated where

var ShareWhere = struct {
	ID        whereHelperint64
	IDPost    whereHelperint64
	IDUser    whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"shares\".\"id\""},
	IDPost:    whereHelperint64{field: "\"shares\".\"id_post\""},
	IDUser:    whereHelperint64{field: "\"shares\".\"id_user\""},
	CreatedAt: whereHelpertime_Time{field: "\"shares\".\"created_at\""},
}

// ShareRels is where relationship names are stored.
var ShareRels = struct {
	IDPostPost string
	IDUserUser string
}{
	IDPostPost: "IDPostPost",
	IDUserUser: "IDUserUser",
}

// shareR is where relationships are stored.
type shareR struct {
	IDPostPost *Post `boil:"IDPostPost" json:"IDPostPost" toml:"IDPostPost" yaml:"IDPostPost"`
	IDUserUser *User `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
}

// NewStruct creates a new relationship struct
func (*shareR) NewStruct() *shareR {
	return &shareR{}
}

func (o *Share) GetIDPostPost() *Post {
	if o == nil {
		return nil
	}

	return o.R.GetIDPostPost()
}

func (r *shareR) GetIDPostPost() *Post {
	if r == nil {
		return nil
	}

	return r.IDPostPost
}

func (o *Share) GetIDUserUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserUser()
}

func (r *shareR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}

	return r.IDUserUser
}

// shareL is where Load methods for each relationship are stored.
type shareL struct{}

var (
	shareAllColumns            = []string{"id", "id_post", "id_user", "created_at"}
	shareColumnsWithoutDefault = []string{"id_post", "id_user"}
	shareColumnsWithDefault    = []string{"id", "created_at"}
	sharePrimaryKeyColumns     = []string{"id"}
	shareGeneratedColumns      = []string{}
)

type (
	// ShareSlice is an alias for a slice of pointers to Share.
	// This should almost always be used instead of []Share.
	ShareSlice []*Share
	// ShareHook is the signature for custom Share hook methods
	ShareHook func(context.Context, boil.ContextExecutor, *Share) error

	shareQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shareType                 = reflect.TypeOf(&Share{})
	shareMapping              = queries.MakeStructMapping(shareType)
	sharePrimaryKeyMapping, _ = queries.BindMapping(shareType, shareMapping, sharePrimaryKeyColumns)
	shareInsertCacheMut       sync.RWMutex
	shareInsertCache          = make(map[string]insertCache)
	shareUpdateCacheMut       sync.RWMutex
	shareUpdateCache          = make(map[string]updateCache)
	shareUpsertCacheMut       sync.RWMutex
	shareUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shareAfterSelectMu sync.Mutex
var shareAfterSelectHooks []ShareHook

var shareBeforeInsertMu sync.Mutex
var shareBeforeInsertHooks []ShareHook
var shareAfterInsertMu sync.Mutex
var shareAfterInsertHooks []ShareHook

var shareBeforeUpdateMu sync.Mutex
var shareBeforeUpdateHooks []ShareHook
var shareAfterUpdateMu sync.Mutex
var shareAfterUpdateHooks []ShareHook

var shareBeforeDeleteMu sync.Mutex
var shareBeforeDeleteHooks []ShareHook
var shareAfterDeleteMu sync.Mutex
var shareAfterDeleteHooks []ShareHook

var shareBeforeUpsertMu sync.Mutex
var shareBeforeUpsertHooks []ShareHook
var shareAfterUpsertMu sync.Mutex
var shareAfterUpsertHooks []ShareHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Share) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Share) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Share) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Share) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Share) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Share) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Share) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Share) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Share) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shareAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShareHook registers your hook function for all future operations.
func AddShareHook(hookPoint boil.HookPoint, shareHook ShareHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shareAfterSelectMu.Lock()
		shareAfterSelectHooks = append(shareAfterSelectHooks, shareHook)
		shareAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		shareBeforeInsertMu.Lock()
		shareBeforeInsertHooks = append(shareBeforeInsertHooks, shareHook)
		shareBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		shareAfterInsertMu.Lock()
		shareAfterInsertHooks = append(shareAfterInsertHooks, shareHook)
		shareAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		shareBeforeUpdateMu.Lock()
		shareBeforeUpdateHooks = append(shareBeforeUpdateHooks, shareHook)
		shareBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		shareAfterUpdateMu.Lock()
		shareAfterUpdateHooks = append(shareAfterUpdateHooks, shareHook)
		shareAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		shareBeforeDeleteMu.Lock()
		shareBeforeDeleteHooks = append(shareBeforeDeleteHooks, shareHook)
		shareBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		shareAfterDeleteMu.Lock()
		shareAfterDeleteHooks = append(shareAfterDeleteHooks, shareHook)
		shareAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		shareBeforeUpsertMu.Lock()
		shareBeforeUpsertHooks = append(shareBeforeUpsertHooks, shareHook)
		shareBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		shareAfterUpsertMu.Lock()
		shareAfterUpsertHooks = append(shareAfterUpsertHooks, shareHook)
		shareAfterUpsertMu.Unlock()
	}
}

// One returns a single share record from the query.
func (q shareQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Share, error) {
	o := &Share{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shares")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Share records from the query.
func (q shareQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShareSlice, error) {
	var o []*Share

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Share slice")
	}

	if len(shareAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Share records in the query.
func (q shareQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shares rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shareQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shares exists")
	}

	return count > 0, nil
}

// IDPostPost pointed to by the foreign key.
func (o *Share) IDPostPost(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPost),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// IDUserUser pointed to by the foreign key.
func (o *Share) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadIDPostPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shareL) LoadIDPostPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShare interface{}, mods queries.Applicator) error {
	var slice []*Share
	var object *Share

	if singular {
		var ok bool
		object, ok = maybeShare.(*Share)
		if !ok {
			object = new(Share)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShare)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShare))
			}
		}
	} else {
		s, ok := maybeShare.(*[]*Share)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShare)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShare))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shareR{}
		}
		args[object.IDPost] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shareR{}
			}

			args[obj.IDPost] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPostPost = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.IDPostShares = append(foreign.R.IDPostShares, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPost == foreign.ID {
				local.R.IDPostPost = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDPostShares = append(foreign.R.IDPostShares, local)
				break
			}
		}
	}

	return nil
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shareL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShare interface{}, mods queries.Applicator) error {
	var slice []*Share
	var object *Share

	if singular {
		var ok bool
		object, ok = maybeShare.(*Share)
		if !ok {
			object = new(Share)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShare)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShare))
			}
		}
	} else {
		s, ok := maybeShare.(*[]*Share)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShare)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShare))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shareR{}
		}
		args[object.IDUser] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shareR{}
			}

			args[obj.IDUser] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserShares = append(foreign.R.IDUserShares, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUser == foreign.ID {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserShares = append(foreign.R.IDUserShares, local)
				break
			}
		}
	}

	return nil
}

// SetIDPostPost of the share to the related item.
// Sets o.R.IDPostPost to related.
// Adds o to related.R.IDPostShares.
func (o *Share) SetIDPostPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shares\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_post"}),
		strmangle.WhereClause("\"", "\"", 2, sharePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPost = related.ID
	if o.R == nil {
		o.R = &shareR{
			IDPostPost: related,
		}
	} else {
		o.R.IDPostPost = related
	}

	if related.R == nil {
		related.R = &postR{
			IDPostShares: ShareSlice{o},
		}
	} else {
		related.R.IDPostShares = append(related.R.IDPostShares, o)
	}

	return nil
}

// SetIDUserUser of the share to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserShares.
func (o *Share) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shares\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, sharePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUser = related.ID
	if o.R == nil {
		o.R = &shareR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserShares: ShareSlice{o},
		}
	} else {
		related.R.IDUserShares = append(related.R.IDUserShares, o)
	}

	return nil
}

// Shares retrieves all the records using an executor.
func Shares(mods ...qm.QueryMod) shareQuery {
	mods = append(mods, qm.From("\"shares\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shares\".*"})
	}

	return shareQuery{q}
}

// FindShare retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShare(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Share, error) {
	shareObj := &Share{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shares\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shareObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shares")
	}

	if err = shareObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shareObj, err
	}

	return shareObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Share) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shares provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shareColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shareInsertCacheMut.RLock()
	cache, cached := shareInsertCache[key]
	shareInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shareAllColumns,
			shareColumnsWithDefault,
			shareColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shareType, shareMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shareType, shareMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shares\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shares\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shares")
	}

	if !cached {
		shareInsertCacheMut.Lock()
		shareInsertCache[key] = cache
		shareInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Share.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Share) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shareUpdateCacheMut.RLock()
	cache, cached := shareUpdateCache[key]
	shareUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shareAllColumns,
			sharePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shares, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shares\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sharePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shareType, shareMapping, append(wl, sharePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shares row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shares")
	}

	if !cached {
		shareUpdateCacheMut.Lock()
		shareUpdateCache[key] = cache
		shareUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shareQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shares")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shares")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShareSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sharePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shares\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sharePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in share slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all share")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Share) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no shares provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shareColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shareUpsertCacheMut.RLock()
	cache, cached := shareUpsertCache[key]
	shareUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shareAllColumns,
			shareColumnsWithDefault,
			shareColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shareAllColumns,
			sharePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shares, could not build update column list")
		}

		ret := strmangle.SetComplement(shareAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sharePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert shares, could not build conflict column list")
			}

			conflict = make([]string, len(sharePrimaryKeyColumns))
			copy(conflict, sharePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shares\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shareType, shareMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shareType, shareMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shares")
	}

	if !cached {
		shareUpsertCacheMut.Lock()
		shareUpsertCache[key] = cache
		shareUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Share record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Share) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Share provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sharePrimaryKeyMapping)
	sql := "DELETE FROM \"shares\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shares")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shares")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shareQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shareQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shares")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shares")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShareSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shareBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sharePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shares\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sharePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from share slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shares")
	}

	if len(shareAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Share) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShare(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShareSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShareSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sharePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shares\".* FROM \"shares\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sharePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShareSlice")
	}

	*o = slice

	return nil
}

// ShareExists checks if the Share row exists.
func ShareExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shares\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shares exists")
	}

	return exists, nil
}

// Exists checks if the Share row exists.
func (o *Share) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShareExists(ctx, exec, o.ID)
}
