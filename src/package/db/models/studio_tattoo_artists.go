// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// StudioTattooArtist is an object representing the database table.
type StudioTattooArtist struct {
	ID             int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDStudio       int64     `boil:"id_studio" json:"id_studio" toml:"id_studio" yaml:"id_studio"`
	IDTattooArtist int64     `boil:"id_tattoo_artist" json:"id_tattoo_artist" toml:"id_tattoo_artist" yaml:"id_tattoo_artist"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *studioTattooArtistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studioTattooArtistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudioTattooArtistColumns = struct {
	ID             string
	IDStudio       string
	IDTattooArtist string
	CreatedAt      string
}{
	ID:             "id",
	IDStudio:       "id_studio",
	IDTattooArtist: "id_tattoo_artist",
	CreatedAt:      "created_at",
}

var StudioTattooArtistTableColumns = struct {
	ID             string
	IDStudio       string
	IDTattooArtist string
	CreatedAt      string
}{
	ID:             "studio_tattoo_artists.id",
	IDStudio:       "studio_tattoo_artists.id_studio",
	IDTattooArtist: "studio_tattoo_artists.id_tattoo_artist",
	CreatedAt:      "studio_tattoo_artists.created_at",
}

// Generated where

var StudioTattooArtistWhere = struct {
	ID             whereHelperint64
	IDStudio       whereHelperint64
	IDTattooArtist whereHelperint64
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"studio_tattoo_artists\".\"id\""},
	IDStudio:       whereHelperint64{field: "\"studio_tattoo_artists\".\"id_studio\""},
	IDTattooArtist: whereHelperint64{field: "\"studio_tattoo_artists\".\"id_tattoo_artist\""},
	CreatedAt:      whereHelpertime_Time{field: "\"studio_tattoo_artists\".\"created_at\""},
}

// StudioTattooArtistRels is where relationship names are stored.
var StudioTattooArtistRels = struct {
	IDStudioStudio     string
	IDTattooArtistUser string
}{
	IDStudioStudio:     "IDStudioStudio",
	IDTattooArtistUser: "IDTattooArtistUser",
}

// studioTattooArtistR is where relationships are stored.
type studioTattooArtistR struct {
	IDStudioStudio     *Studio `boil:"IDStudioStudio" json:"IDStudioStudio" toml:"IDStudioStudio" yaml:"IDStudioStudio"`
	IDTattooArtistUser *User   `boil:"IDTattooArtistUser" json:"IDTattooArtistUser" toml:"IDTattooArtistUser" yaml:"IDTattooArtistUser"`
}

// NewStruct creates a new relationship struct
func (*studioTattooArtistR) NewStruct() *studioTattooArtistR {
	return &studioTattooArtistR{}
}

func (o *StudioTattooArtist) GetIDStudioStudio() *Studio {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudio()
}

func (r *studioTattooArtistR) GetIDStudioStudio() *Studio {
	if r == nil {
		return nil
	}

	return r.IDStudioStudio
}

func (o *StudioTattooArtist) GetIDTattooArtistUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDTattooArtistUser()
}

func (r *studioTattooArtistR) GetIDTattooArtistUser() *User {
	if r == nil {
		return nil
	}

	return r.IDTattooArtistUser
}

// studioTattooArtistL is where Load methods for each relationship are stored.
type studioTattooArtistL struct{}

var (
	studioTattooArtistAllColumns            = []string{"id", "id_studio", "id_tattoo_artist", "created_at"}
	studioTattooArtistColumnsWithoutDefault = []string{"id_studio", "id_tattoo_artist"}
	studioTattooArtistColumnsWithDefault    = []string{"id", "created_at"}
	studioTattooArtistPrimaryKeyColumns     = []string{"id"}
	studioTattooArtistGeneratedColumns      = []string{}
)

type (
	// StudioTattooArtistSlice is an alias for a slice of pointers to StudioTattooArtist.
	// This should almost always be used instead of []StudioTattooArtist.
	StudioTattooArtistSlice []*StudioTattooArtist
	// StudioTattooArtistHook is the signature for custom StudioTattooArtist hook methods
	StudioTattooArtistHook func(context.Context, boil.ContextExecutor, *StudioTattooArtist) error

	studioTattooArtistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studioTattooArtistType                 = reflect.TypeOf(&StudioTattooArtist{})
	studioTattooArtistMapping              = queries.MakeStructMapping(studioTattooArtistType)
	studioTattooArtistPrimaryKeyMapping, _ = queries.BindMapping(studioTattooArtistType, studioTattooArtistMapping, studioTattooArtistPrimaryKeyColumns)
	studioTattooArtistInsertCacheMut       sync.RWMutex
	studioTattooArtistInsertCache          = make(map[string]insertCache)
	studioTattooArtistUpdateCacheMut       sync.RWMutex
	studioTattooArtistUpdateCache          = make(map[string]updateCache)
	studioTattooArtistUpsertCacheMut       sync.RWMutex
	studioTattooArtistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var studioTattooArtistAfterSelectMu sync.Mutex
var studioTattooArtistAfterSelectHooks []StudioTattooArtistHook

var studioTattooArtistBeforeInsertMu sync.Mutex
var studioTattooArtistBeforeInsertHooks []StudioTattooArtistHook
var studioTattooArtistAfterInsertMu sync.Mutex
var studioTattooArtistAfterInsertHooks []StudioTattooArtistHook

var studioTattooArtistBeforeUpdateMu sync.Mutex
var studioTattooArtistBeforeUpdateHooks []StudioTattooArtistHook
var studioTattooArtistAfterUpdateMu sync.Mutex
var studioTattooArtistAfterUpdateHooks []StudioTattooArtistHook

var studioTattooArtistBeforeDeleteMu sync.Mutex
var studioTattooArtistBeforeDeleteHooks []StudioTattooArtistHook
var studioTattooArtistAfterDeleteMu sync.Mutex
var studioTattooArtistAfterDeleteHooks []StudioTattooArtistHook

var studioTattooArtistBeforeUpsertMu sync.Mutex
var studioTattooArtistBeforeUpsertHooks []StudioTattooArtistHook
var studioTattooArtistAfterUpsertMu sync.Mutex
var studioTattooArtistAfterUpsertHooks []StudioTattooArtistHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StudioTattooArtist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StudioTattooArtist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StudioTattooArtist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StudioTattooArtist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StudioTattooArtist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StudioTattooArtist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StudioTattooArtist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StudioTattooArtist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StudioTattooArtist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioTattooArtistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudioTattooArtistHook registers your hook function for all future operations.
func AddStudioTattooArtistHook(hookPoint boil.HookPoint, studioTattooArtistHook StudioTattooArtistHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		studioTattooArtistAfterSelectMu.Lock()
		studioTattooArtistAfterSelectHooks = append(studioTattooArtistAfterSelectHooks, studioTattooArtistHook)
		studioTattooArtistAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		studioTattooArtistBeforeInsertMu.Lock()
		studioTattooArtistBeforeInsertHooks = append(studioTattooArtistBeforeInsertHooks, studioTattooArtistHook)
		studioTattooArtistBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		studioTattooArtistAfterInsertMu.Lock()
		studioTattooArtistAfterInsertHooks = append(studioTattooArtistAfterInsertHooks, studioTattooArtistHook)
		studioTattooArtistAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		studioTattooArtistBeforeUpdateMu.Lock()
		studioTattooArtistBeforeUpdateHooks = append(studioTattooArtistBeforeUpdateHooks, studioTattooArtistHook)
		studioTattooArtistBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		studioTattooArtistAfterUpdateMu.Lock()
		studioTattooArtistAfterUpdateHooks = append(studioTattooArtistAfterUpdateHooks, studioTattooArtistHook)
		studioTattooArtistAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		studioTattooArtistBeforeDeleteMu.Lock()
		studioTattooArtistBeforeDeleteHooks = append(studioTattooArtistBeforeDeleteHooks, studioTattooArtistHook)
		studioTattooArtistBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		studioTattooArtistAfterDeleteMu.Lock()
		studioTattooArtistAfterDeleteHooks = append(studioTattooArtistAfterDeleteHooks, studioTattooArtistHook)
		studioTattooArtistAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		studioTattooArtistBeforeUpsertMu.Lock()
		studioTattooArtistBeforeUpsertHooks = append(studioTattooArtistBeforeUpsertHooks, studioTattooArtistHook)
		studioTattooArtistBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		studioTattooArtistAfterUpsertMu.Lock()
		studioTattooArtistAfterUpsertHooks = append(studioTattooArtistAfterUpsertHooks, studioTattooArtistHook)
		studioTattooArtistAfterUpsertMu.Unlock()
	}
}

// One returns a single studioTattooArtist record from the query.
func (q studioTattooArtistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StudioTattooArtist, error) {
	o := &StudioTattooArtist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for studio_tattoo_artists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StudioTattooArtist records from the query.
func (q studioTattooArtistQuery) All(ctx context.Context, exec boil.ContextExecutor) (StudioTattooArtistSlice, error) {
	var o []*StudioTattooArtist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StudioTattooArtist slice")
	}

	if len(studioTattooArtistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StudioTattooArtist records in the query.
func (q studioTattooArtistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count studio_tattoo_artists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q studioTattooArtistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if studio_tattoo_artists exists")
	}

	return count > 0, nil
}

// IDStudioStudio pointed to by the foreign key.
func (o *StudioTattooArtist) IDStudioStudio(mods ...qm.QueryMod) studioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDStudio),
	}

	queryMods = append(queryMods, mods...)

	return Studios(queryMods...)
}

// IDTattooArtistUser pointed to by the foreign key.
func (o *StudioTattooArtist) IDTattooArtistUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDTattooArtist),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadIDStudioStudio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioTattooArtistL) LoadIDStudioStudio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioTattooArtist interface{}, mods queries.Applicator) error {
	var slice []*StudioTattooArtist
	var object *StudioTattooArtist

	if singular {
		var ok bool
		object, ok = maybeStudioTattooArtist.(*StudioTattooArtist)
		if !ok {
			object = new(StudioTattooArtist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioTattooArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioTattooArtist))
			}
		}
	} else {
		s, ok := maybeStudioTattooArtist.(*[]*StudioTattooArtist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioTattooArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioTattooArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioTattooArtistR{}
		}
		args[object.IDStudio] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioTattooArtistR{}
			}

			args[obj.IDStudio] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studios`),
		qm.WhereIn(`studios.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Studio")
	}

	var resultSlice []*Studio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Studio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for studios")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studios")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDStudioStudio = foreign
		if foreign.R == nil {
			foreign.R = &studioR{}
		}
		foreign.R.IDStudioStudioTattooArtists = append(foreign.R.IDStudioStudioTattooArtists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDStudio == foreign.ID {
				local.R.IDStudioStudio = foreign
				if foreign.R == nil {
					foreign.R = &studioR{}
				}
				foreign.R.IDStudioStudioTattooArtists = append(foreign.R.IDStudioStudioTattooArtists, local)
				break
			}
		}
	}

	return nil
}

// LoadIDTattooArtistUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioTattooArtistL) LoadIDTattooArtistUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioTattooArtist interface{}, mods queries.Applicator) error {
	var slice []*StudioTattooArtist
	var object *StudioTattooArtist

	if singular {
		var ok bool
		object, ok = maybeStudioTattooArtist.(*StudioTattooArtist)
		if !ok {
			object = new(StudioTattooArtist)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioTattooArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioTattooArtist))
			}
		}
	} else {
		s, ok := maybeStudioTattooArtist.(*[]*StudioTattooArtist)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioTattooArtist)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioTattooArtist))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioTattooArtistR{}
		}
		args[object.IDTattooArtist] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioTattooArtistR{}
			}

			args[obj.IDTattooArtist] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDTattooArtistUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDTattooArtistStudioTattooArtists = append(foreign.R.IDTattooArtistStudioTattooArtists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDTattooArtist == foreign.ID {
				local.R.IDTattooArtistUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDTattooArtistStudioTattooArtists = append(foreign.R.IDTattooArtistStudioTattooArtists, local)
				break
			}
		}
	}

	return nil
}

// SetIDStudioStudio of the studioTattooArtist to the related item.
// Sets o.R.IDStudioStudio to related.
// Adds o to related.R.IDStudioStudioTattooArtists.
func (o *StudioTattooArtist) SetIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Studio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studio_tattoo_artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
		strmangle.WhereClause("\"", "\"", 2, studioTattooArtistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDStudio = related.ID
	if o.R == nil {
		o.R = &studioTattooArtistR{
			IDStudioStudio: related,
		}
	} else {
		o.R.IDStudioStudio = related
	}

	if related.R == nil {
		related.R = &studioR{
			IDStudioStudioTattooArtists: StudioTattooArtistSlice{o},
		}
	} else {
		related.R.IDStudioStudioTattooArtists = append(related.R.IDStudioStudioTattooArtists, o)
	}

	return nil
}

// SetIDTattooArtistUser of the studioTattooArtist to the related item.
// Sets o.R.IDTattooArtistUser to related.
// Adds o to related.R.IDTattooArtistStudioTattooArtists.
func (o *StudioTattooArtist) SetIDTattooArtistUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studio_tattoo_artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_tattoo_artist"}),
		strmangle.WhereClause("\"", "\"", 2, studioTattooArtistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDTattooArtist = related.ID
	if o.R == nil {
		o.R = &studioTattooArtistR{
			IDTattooArtistUser: related,
		}
	} else {
		o.R.IDTattooArtistUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDTattooArtistStudioTattooArtists: StudioTattooArtistSlice{o},
		}
	} else {
		related.R.IDTattooArtistStudioTattooArtists = append(related.R.IDTattooArtistStudioTattooArtists, o)
	}

	return nil
}

// StudioTattooArtists retrieves all the records using an executor.
func StudioTattooArtists(mods ...qm.QueryMod) studioTattooArtistQuery {
	mods = append(mods, qm.From("\"studio_tattoo_artists\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"studio_tattoo_artists\".*"})
	}

	return studioTattooArtistQuery{q}
}

// FindStudioTattooArtist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudioTattooArtist(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*StudioTattooArtist, error) {
	studioTattooArtistObj := &StudioTattooArtist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"studio_tattoo_artists\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, studioTattooArtistObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from studio_tattoo_artists")
	}

	if err = studioTattooArtistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return studioTattooArtistObj, err
	}

	return studioTattooArtistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StudioTattooArtist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no studio_tattoo_artists provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioTattooArtistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	studioTattooArtistInsertCacheMut.RLock()
	cache, cached := studioTattooArtistInsertCache[key]
	studioTattooArtistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			studioTattooArtistAllColumns,
			studioTattooArtistColumnsWithDefault,
			studioTattooArtistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(studioTattooArtistType, studioTattooArtistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studioTattooArtistType, studioTattooArtistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"studio_tattoo_artists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"studio_tattoo_artists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into studio_tattoo_artists")
	}

	if !cached {
		studioTattooArtistInsertCacheMut.Lock()
		studioTattooArtistInsertCache[key] = cache
		studioTattooArtistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StudioTattooArtist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StudioTattooArtist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	studioTattooArtistUpdateCacheMut.RLock()
	cache, cached := studioTattooArtistUpdateCache[key]
	studioTattooArtistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			studioTattooArtistAllColumns,
			studioTattooArtistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update studio_tattoo_artists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"studio_tattoo_artists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studioTattooArtistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studioTattooArtistType, studioTattooArtistMapping, append(wl, studioTattooArtistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update studio_tattoo_artists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for studio_tattoo_artists")
	}

	if !cached {
		studioTattooArtistUpdateCacheMut.Lock()
		studioTattooArtistUpdateCache[key] = cache
		studioTattooArtistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q studioTattooArtistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for studio_tattoo_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for studio_tattoo_artists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudioTattooArtistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioTattooArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"studio_tattoo_artists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studioTattooArtistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in studioTattooArtist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all studioTattooArtist")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StudioTattooArtist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no studio_tattoo_artists provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioTattooArtistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studioTattooArtistUpsertCacheMut.RLock()
	cache, cached := studioTattooArtistUpsertCache[key]
	studioTattooArtistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			studioTattooArtistAllColumns,
			studioTattooArtistColumnsWithDefault,
			studioTattooArtistColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			studioTattooArtistAllColumns,
			studioTattooArtistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert studio_tattoo_artists, could not build update column list")
		}

		ret := strmangle.SetComplement(studioTattooArtistAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(studioTattooArtistPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert studio_tattoo_artists, could not build conflict column list")
			}

			conflict = make([]string, len(studioTattooArtistPrimaryKeyColumns))
			copy(conflict, studioTattooArtistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"studio_tattoo_artists\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(studioTattooArtistType, studioTattooArtistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studioTattooArtistType, studioTattooArtistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert studio_tattoo_artists")
	}

	if !cached {
		studioTattooArtistUpsertCacheMut.Lock()
		studioTattooArtistUpsertCache[key] = cache
		studioTattooArtistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StudioTattooArtist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StudioTattooArtist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StudioTattooArtist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studioTattooArtistPrimaryKeyMapping)
	sql := "DELETE FROM \"studio_tattoo_artists\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from studio_tattoo_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for studio_tattoo_artists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q studioTattooArtistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no studioTattooArtistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studio_tattoo_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studio_tattoo_artists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudioTattooArtistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(studioTattooArtistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioTattooArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"studio_tattoo_artists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioTattooArtistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studioTattooArtist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studio_tattoo_artists")
	}

	if len(studioTattooArtistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StudioTattooArtist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStudioTattooArtist(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudioTattooArtistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StudioTattooArtistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioTattooArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"studio_tattoo_artists\".* FROM \"studio_tattoo_artists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioTattooArtistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudioTattooArtistSlice")
	}

	*o = slice

	return nil
}

// StudioTattooArtistExists checks if the StudioTattooArtist row exists.
func StudioTattooArtistExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"studio_tattoo_artists\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if studio_tattoo_artists exists")
	}

	return exists, nil
}

// Exists checks if the StudioTattooArtist row exists.
func (o *StudioTattooArtist) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StudioTattooArtistExists(ctx, exec, o.ID)
}
