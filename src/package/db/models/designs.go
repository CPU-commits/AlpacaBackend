// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Design is an object representing the database table.
type Design struct {
	ID          int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProfile   int64             `boil:"id_profile" json:"id_profile" toml:"id_profile" yaml:"id_profile"`
	IDImage     int64             `boil:"id_image" json:"id_image" toml:"id_image" yaml:"id_image"`
	Description null.String       `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Price       null.Int64        `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Categories  types.StringArray `boil:"categories" json:"categories,omitempty" toml:"categories" yaml:"categories,omitempty"`
	Coordinate  null.String       `boil:"coordinate" json:"coordinate,omitempty" toml:"coordinate" yaml:"coordinate,omitempty"`
	CreatedAt   time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IsDeleted   bool              `boil:"is_deleted" json:"is_deleted" toml:"is_deleted" yaml:"is_deleted"`

	R *designR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L designL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DesignColumns = struct {
	ID          string
	IDProfile   string
	IDImage     string
	Description string
	Price       string
	Categories  string
	Coordinate  string
	CreatedAt   string
	IsDeleted   string
}{
	ID:          "id",
	IDProfile:   "id_profile",
	IDImage:     "id_image",
	Description: "description",
	Price:       "price",
	Categories:  "categories",
	Coordinate:  "coordinate",
	CreatedAt:   "created_at",
	IsDeleted:   "is_deleted",
}

var DesignTableColumns = struct {
	ID          string
	IDProfile   string
	IDImage     string
	Description string
	Price       string
	Categories  string
	Coordinate  string
	CreatedAt   string
	IsDeleted   string
}{
	ID:          "designs.id",
	IDProfile:   "designs.id_profile",
	IDImage:     "designs.id_image",
	Description: "designs.description",
	Price:       "designs.price",
	Categories:  "designs.categories",
	Coordinate:  "designs.coordinate",
	CreatedAt:   "designs.created_at",
	IsDeleted:   "designs.is_deleted",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var DesignWhere = struct {
	ID          whereHelperint64
	IDProfile   whereHelperint64
	IDImage     whereHelperint64
	Description whereHelpernull_String
	Price       whereHelpernull_Int64
	Categories  whereHelpertypes_StringArray
	Coordinate  whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	IsDeleted   whereHelperbool
}{
	ID:          whereHelperint64{field: "\"designs\".\"id\""},
	IDProfile:   whereHelperint64{field: "\"designs\".\"id_profile\""},
	IDImage:     whereHelperint64{field: "\"designs\".\"id_image\""},
	Description: whereHelpernull_String{field: "\"designs\".\"description\""},
	Price:       whereHelpernull_Int64{field: "\"designs\".\"price\""},
	Categories:  whereHelpertypes_StringArray{field: "\"designs\".\"categories\""},
	Coordinate:  whereHelpernull_String{field: "\"designs\".\"coordinate\""},
	CreatedAt:   whereHelpertime_Time{field: "\"designs\".\"created_at\""},
	IsDeleted:   whereHelperbool{field: "\"designs\".\"is_deleted\""},
}

// DesignRels is where relationship names are stored.
var DesignRels = struct {
	IDImageImage         string
	IDProfileProfile     string
	IDDesignAppointments string
}{
	IDImageImage:         "IDImageImage",
	IDProfileProfile:     "IDProfileProfile",
	IDDesignAppointments: "IDDesignAppointments",
}

// designR is where relationships are stored.
type designR struct {
	IDImageImage         *Image           `boil:"IDImageImage" json:"IDImageImage" toml:"IDImageImage" yaml:"IDImageImage"`
	IDProfileProfile     *Profile         `boil:"IDProfileProfile" json:"IDProfileProfile" toml:"IDProfileProfile" yaml:"IDProfileProfile"`
	IDDesignAppointments AppointmentSlice `boil:"IDDesignAppointments" json:"IDDesignAppointments" toml:"IDDesignAppointments" yaml:"IDDesignAppointments"`
}

// NewStruct creates a new relationship struct
func (*designR) NewStruct() *designR {
	return &designR{}
}

func (o *Design) GetIDImageImage() *Image {
	if o == nil {
		return nil
	}

	return o.R.GetIDImageImage()
}

func (r *designR) GetIDImageImage() *Image {
	if r == nil {
		return nil
	}

	return r.IDImageImage
}

func (o *Design) GetIDProfileProfile() *Profile {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileProfile()
}

func (r *designR) GetIDProfileProfile() *Profile {
	if r == nil {
		return nil
	}

	return r.IDProfileProfile
}

func (o *Design) GetIDDesignAppointments() AppointmentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDDesignAppointments()
}

func (r *designR) GetIDDesignAppointments() AppointmentSlice {
	if r == nil {
		return nil
	}

	return r.IDDesignAppointments
}

// designL is where Load methods for each relationship are stored.
type designL struct{}

var (
	designAllColumns            = []string{"id", "id_profile", "id_image", "description", "price", "categories", "coordinate", "created_at", "is_deleted"}
	designColumnsWithoutDefault = []string{"id_profile", "id_image"}
	designColumnsWithDefault    = []string{"id", "description", "price", "categories", "coordinate", "created_at", "is_deleted"}
	designPrimaryKeyColumns     = []string{"id"}
	designGeneratedColumns      = []string{}
)

type (
	// DesignSlice is an alias for a slice of pointers to Design.
	// This should almost always be used instead of []Design.
	DesignSlice []*Design
	// DesignHook is the signature for custom Design hook methods
	DesignHook func(context.Context, boil.ContextExecutor, *Design) error

	designQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	designType                 = reflect.TypeOf(&Design{})
	designMapping              = queries.MakeStructMapping(designType)
	designPrimaryKeyMapping, _ = queries.BindMapping(designType, designMapping, designPrimaryKeyColumns)
	designInsertCacheMut       sync.RWMutex
	designInsertCache          = make(map[string]insertCache)
	designUpdateCacheMut       sync.RWMutex
	designUpdateCache          = make(map[string]updateCache)
	designUpsertCacheMut       sync.RWMutex
	designUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var designAfterSelectMu sync.Mutex
var designAfterSelectHooks []DesignHook

var designBeforeInsertMu sync.Mutex
var designBeforeInsertHooks []DesignHook
var designAfterInsertMu sync.Mutex
var designAfterInsertHooks []DesignHook

var designBeforeUpdateMu sync.Mutex
var designBeforeUpdateHooks []DesignHook
var designAfterUpdateMu sync.Mutex
var designAfterUpdateHooks []DesignHook

var designBeforeDeleteMu sync.Mutex
var designBeforeDeleteHooks []DesignHook
var designAfterDeleteMu sync.Mutex
var designAfterDeleteHooks []DesignHook

var designBeforeUpsertMu sync.Mutex
var designBeforeUpsertHooks []DesignHook
var designAfterUpsertMu sync.Mutex
var designAfterUpsertHooks []DesignHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Design) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Design) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Design) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Design) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Design) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Design) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Design) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Design) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Design) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range designAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDesignHook registers your hook function for all future operations.
func AddDesignHook(hookPoint boil.HookPoint, designHook DesignHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		designAfterSelectMu.Lock()
		designAfterSelectHooks = append(designAfterSelectHooks, designHook)
		designAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		designBeforeInsertMu.Lock()
		designBeforeInsertHooks = append(designBeforeInsertHooks, designHook)
		designBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		designAfterInsertMu.Lock()
		designAfterInsertHooks = append(designAfterInsertHooks, designHook)
		designAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		designBeforeUpdateMu.Lock()
		designBeforeUpdateHooks = append(designBeforeUpdateHooks, designHook)
		designBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		designAfterUpdateMu.Lock()
		designAfterUpdateHooks = append(designAfterUpdateHooks, designHook)
		designAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		designBeforeDeleteMu.Lock()
		designBeforeDeleteHooks = append(designBeforeDeleteHooks, designHook)
		designBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		designAfterDeleteMu.Lock()
		designAfterDeleteHooks = append(designAfterDeleteHooks, designHook)
		designAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		designBeforeUpsertMu.Lock()
		designBeforeUpsertHooks = append(designBeforeUpsertHooks, designHook)
		designBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		designAfterUpsertMu.Lock()
		designAfterUpsertHooks = append(designAfterUpsertHooks, designHook)
		designAfterUpsertMu.Unlock()
	}
}

// One returns a single design record from the query.
func (q designQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Design, error) {
	o := &Design{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for designs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Design records from the query.
func (q designQuery) All(ctx context.Context, exec boil.ContextExecutor) (DesignSlice, error) {
	var o []*Design

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Design slice")
	}

	if len(designAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Design records in the query.
func (q designQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count designs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q designQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if designs exists")
	}

	return count > 0, nil
}

// IDImageImage pointed to by the foreign key.
func (o *Design) IDImageImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDImage),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// IDProfileProfile pointed to by the foreign key.
func (o *Design) IDProfileProfile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProfile),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// IDDesignAppointments retrieves all the appointment's Appointments with an executor via id_design column.
func (o *Design) IDDesignAppointments(mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"appointments\".\"id_design\"=?", o.ID),
	)

	return Appointments(queryMods...)
}

// LoadIDImageImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (designL) LoadIDImageImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDesign interface{}, mods queries.Applicator) error {
	var slice []*Design
	var object *Design

	if singular {
		var ok bool
		object, ok = maybeDesign.(*Design)
		if !ok {
			object = new(Design)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDesign)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDesign))
			}
		}
	} else {
		s, ok := maybeDesign.(*[]*Design)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDesign)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDesign))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &designR{}
		}
		args[object.IDImage] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &designR{}
			}

			args[obj.IDImage] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDImageImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDImageDesign = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDImage == foreign.ID {
				local.R.IDImageImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDImageDesign = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (designL) LoadIDProfileProfile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDesign interface{}, mods queries.Applicator) error {
	var slice []*Design
	var object *Design

	if singular {
		var ok bool
		object, ok = maybeDesign.(*Design)
		if !ok {
			object = new(Design)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDesign)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDesign))
			}
		}
	} else {
		s, ok := maybeDesign.(*[]*Design)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDesign)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDesign))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &designR{}
		}
		args[object.IDProfile] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &designR{}
			}

			args[obj.IDProfile] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProfileProfile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.IDProfileDesigns = append(foreign.R.IDProfileDesigns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDProfile == foreign.ID {
				local.R.IDProfileProfile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.IDProfileDesigns = append(foreign.R.IDProfileDesigns, local)
				break
			}
		}
	}

	return nil
}

// LoadIDDesignAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (designL) LoadIDDesignAppointments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDesign interface{}, mods queries.Applicator) error {
	var slice []*Design
	var object *Design

	if singular {
		var ok bool
		object, ok = maybeDesign.(*Design)
		if !ok {
			object = new(Design)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDesign)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDesign))
			}
		}
	} else {
		s, ok := maybeDesign.(*[]*Design)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDesign)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDesign))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &designR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &designR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`appointments`),
		qm.WhereIn(`appointments.id_design in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointments")
	}

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on appointments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDDesignAppointments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appointmentR{}
			}
			foreign.R.IDDesignDesign = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDDesign) {
				local.R.IDDesignAppointments = append(local.R.IDDesignAppointments, foreign)
				if foreign.R == nil {
					foreign.R = &appointmentR{}
				}
				foreign.R.IDDesignDesign = local
				break
			}
		}
	}

	return nil
}

// SetIDImageImage of the design to the related item.
// Sets o.R.IDImageImage to related.
// Adds o to related.R.IDImageDesign.
func (o *Design) SetIDImageImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_image"}),
		strmangle.WhereClause("\"", "\"", 2, designPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDImage = related.ID
	if o.R == nil {
		o.R = &designR{
			IDImageImage: related,
		}
	} else {
		o.R.IDImageImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDImageDesign: o,
		}
	} else {
		related.R.IDImageDesign = o
	}

	return nil
}

// SetIDProfileProfile of the design to the related item.
// Sets o.R.IDProfileProfile to related.
// Adds o to related.R.IDProfileDesigns.
func (o *Design) SetIDProfileProfile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
		strmangle.WhereClause("\"", "\"", 2, designPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDProfile = related.ID
	if o.R == nil {
		o.R = &designR{
			IDProfileProfile: related,
		}
	} else {
		o.R.IDProfileProfile = related
	}

	if related.R == nil {
		related.R = &profileR{
			IDProfileDesigns: DesignSlice{o},
		}
	} else {
		related.R.IDProfileDesigns = append(related.R.IDProfileDesigns, o)
	}

	return nil
}

// AddIDDesignAppointments adds the given related objects to the existing relationships
// of the design, optionally inserting them as new records.
// Appends related to o.R.IDDesignAppointments.
// Sets related.R.IDDesignDesign appropriately.
func (o *Design) AddIDDesignAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDDesign, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"appointments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_design"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDDesign, o.ID)
		}
	}

	if o.R == nil {
		o.R = &designR{
			IDDesignAppointments: related,
		}
	} else {
		o.R.IDDesignAppointments = append(o.R.IDDesignAppointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				IDDesignDesign: o,
			}
		} else {
			rel.R.IDDesignDesign = o
		}
	}
	return nil
}

// SetIDDesignAppointments removes all previously related items of the
// design replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDDesignDesign's IDDesignAppointments accordingly.
// Replaces o.R.IDDesignAppointments with related.
// Sets related.R.IDDesignDesign's IDDesignAppointments accordingly.
func (o *Design) SetIDDesignAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	query := "update \"appointments\" set \"id_design\" = null where \"id_design\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDDesignAppointments {
			queries.SetScanner(&rel.IDDesign, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDDesignDesign = nil
		}
		o.R.IDDesignAppointments = nil
	}

	return o.AddIDDesignAppointments(ctx, exec, insert, related...)
}

// RemoveIDDesignAppointments relationships from objects passed in.
// Removes related items from R.IDDesignAppointments (uses pointer comparison, removal does not keep order)
// Sets related.R.IDDesignDesign.
func (o *Design) RemoveIDDesignAppointments(ctx context.Context, exec boil.ContextExecutor, related ...*Appointment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDDesign, nil)
		if rel.R != nil {
			rel.R.IDDesignDesign = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_design")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDDesignAppointments {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDDesignAppointments)
			if ln > 1 && i < ln-1 {
				o.R.IDDesignAppointments[i] = o.R.IDDesignAppointments[ln-1]
			}
			o.R.IDDesignAppointments = o.R.IDDesignAppointments[:ln-1]
			break
		}
	}

	return nil
}

// Designs retrieves all the records using an executor.
func Designs(mods ...qm.QueryMod) designQuery {
	mods = append(mods, qm.From("\"designs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"designs\".*"})
	}

	return designQuery{q}
}

// FindDesign retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDesign(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Design, error) {
	designObj := &Design{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"designs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, designObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from designs")
	}

	if err = designObj.doAfterSelectHooks(ctx, exec); err != nil {
		return designObj, err
	}

	return designObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Design) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no designs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(designColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	designInsertCacheMut.RLock()
	cache, cached := designInsertCache[key]
	designInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			designAllColumns,
			designColumnsWithDefault,
			designColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(designType, designMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(designType, designMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"designs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"designs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into designs")
	}

	if !cached {
		designInsertCacheMut.Lock()
		designInsertCache[key] = cache
		designInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Design.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Design) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	designUpdateCacheMut.RLock()
	cache, cached := designUpdateCache[key]
	designUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			designAllColumns,
			designPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update designs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"designs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, designPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(designType, designMapping, append(wl, designPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update designs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for designs")
	}

	if !cached {
		designUpdateCacheMut.Lock()
		designUpdateCache[key] = cache
		designUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q designQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for designs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for designs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DesignSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), designPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"designs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, designPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in design slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all design")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Design) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no designs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(designColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	designUpsertCacheMut.RLock()
	cache, cached := designUpsertCache[key]
	designUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			designAllColumns,
			designColumnsWithDefault,
			designColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			designAllColumns,
			designPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert designs, could not build update column list")
		}

		ret := strmangle.SetComplement(designAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(designPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert designs, could not build conflict column list")
			}

			conflict = make([]string, len(designPrimaryKeyColumns))
			copy(conflict, designPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"designs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(designType, designMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(designType, designMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert designs")
	}

	if !cached {
		designUpsertCacheMut.Lock()
		designUpsertCache[key] = cache
		designUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Design record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Design) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Design provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), designPrimaryKeyMapping)
	sql := "DELETE FROM \"designs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from designs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for designs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q designQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no designQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from designs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for designs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DesignSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(designBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), designPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"designs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, designPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from design slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for designs")
	}

	if len(designAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Design) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDesign(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DesignSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DesignSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), designPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"designs\".* FROM \"designs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, designPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DesignSlice")
	}

	*o = slice

	return nil
}

// DesignExists checks if the Design row exists.
func DesignExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"designs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if designs exists")
	}

	return exists, nil
}

// Exists checks if the Design row exists.
func (o *Design) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DesignExists(ctx, exec, o.ID)
}
