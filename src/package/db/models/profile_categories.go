// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProfileCategory is an object representing the database table.
type ProfileCategory struct {
	ID           int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProfile    int64 `boil:"id_profile" json:"id_profile" toml:"id_profile" yaml:"id_profile"`
	IDCategories int64 `boil:"id_categories" json:"id_categories" toml:"id_categories" yaml:"id_categories"`

	R *profileCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileCategoryColumns = struct {
	ID           string
	IDProfile    string
	IDCategories string
}{
	ID:           "id",
	IDProfile:    "id_profile",
	IDCategories: "id_categories",
}

var ProfileCategoryTableColumns = struct {
	ID           string
	IDProfile    string
	IDCategories string
}{
	ID:           "profile_categories.id",
	IDProfile:    "profile_categories.id_profile",
	IDCategories: "profile_categories.id_categories",
}

// Generated where

var ProfileCategoryWhere = struct {
	ID           whereHelperint64
	IDProfile    whereHelperint64
	IDCategories whereHelperint64
}{
	ID:           whereHelperint64{field: "\"profile_categories\".\"id\""},
	IDProfile:    whereHelperint64{field: "\"profile_categories\".\"id_profile\""},
	IDCategories: whereHelperint64{field: "\"profile_categories\".\"id_categories\""},
}

// ProfileCategoryRels is where relationship names are stored.
var ProfileCategoryRels = struct {
	IDProfileProfile string
	IDCategory       string
}{
	IDProfileProfile: "IDProfileProfile",
	IDCategory:       "IDCategory",
}

// profileCategoryR is where relationships are stored.
type profileCategoryR struct {
	IDProfileProfile *Profile  `boil:"IDProfileProfile" json:"IDProfileProfile" toml:"IDProfileProfile" yaml:"IDProfileProfile"`
	IDCategory       *Category `boil:"IDCategory" json:"IDCategory" toml:"IDCategory" yaml:"IDCategory"`
}

// NewStruct creates a new relationship struct
func (*profileCategoryR) NewStruct() *profileCategoryR {
	return &profileCategoryR{}
}

func (r *profileCategoryR) GetIDProfileProfile() *Profile {
	if r == nil {
		return nil
	}
	return r.IDProfileProfile
}

func (r *profileCategoryR) GetIDCategory() *Category {
	if r == nil {
		return nil
	}
	return r.IDCategory
}

// profileCategoryL is where Load methods for each relationship are stored.
type profileCategoryL struct{}

var (
	profileCategoryAllColumns            = []string{"id", "id_profile", "id_categories"}
	profileCategoryColumnsWithoutDefault = []string{"id_profile", "id_categories"}
	profileCategoryColumnsWithDefault    = []string{"id"}
	profileCategoryPrimaryKeyColumns     = []string{"id"}
	profileCategoryGeneratedColumns      = []string{}
)

type (
	// ProfileCategorySlice is an alias for a slice of pointers to ProfileCategory.
	// This should almost always be used instead of []ProfileCategory.
	ProfileCategorySlice []*ProfileCategory
	// ProfileCategoryHook is the signature for custom ProfileCategory hook methods
	ProfileCategoryHook func(context.Context, boil.ContextExecutor, *ProfileCategory) error

	profileCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileCategoryType                 = reflect.TypeOf(&ProfileCategory{})
	profileCategoryMapping              = queries.MakeStructMapping(profileCategoryType)
	profileCategoryPrimaryKeyMapping, _ = queries.BindMapping(profileCategoryType, profileCategoryMapping, profileCategoryPrimaryKeyColumns)
	profileCategoryInsertCacheMut       sync.RWMutex
	profileCategoryInsertCache          = make(map[string]insertCache)
	profileCategoryUpdateCacheMut       sync.RWMutex
	profileCategoryUpdateCache          = make(map[string]updateCache)
	profileCategoryUpsertCacheMut       sync.RWMutex
	profileCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var profileCategoryAfterSelectMu sync.Mutex
var profileCategoryAfterSelectHooks []ProfileCategoryHook

var profileCategoryBeforeInsertMu sync.Mutex
var profileCategoryBeforeInsertHooks []ProfileCategoryHook
var profileCategoryAfterInsertMu sync.Mutex
var profileCategoryAfterInsertHooks []ProfileCategoryHook

var profileCategoryBeforeUpdateMu sync.Mutex
var profileCategoryBeforeUpdateHooks []ProfileCategoryHook
var profileCategoryAfterUpdateMu sync.Mutex
var profileCategoryAfterUpdateHooks []ProfileCategoryHook

var profileCategoryBeforeDeleteMu sync.Mutex
var profileCategoryBeforeDeleteHooks []ProfileCategoryHook
var profileCategoryAfterDeleteMu sync.Mutex
var profileCategoryAfterDeleteHooks []ProfileCategoryHook

var profileCategoryBeforeUpsertMu sync.Mutex
var profileCategoryBeforeUpsertHooks []ProfileCategoryHook
var profileCategoryAfterUpsertMu sync.Mutex
var profileCategoryAfterUpsertHooks []ProfileCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProfileCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProfileCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProfileCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProfileCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProfileCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProfileCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProfileCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProfileCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProfileCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProfileCategoryHook registers your hook function for all future operations.
func AddProfileCategoryHook(hookPoint boil.HookPoint, profileCategoryHook ProfileCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		profileCategoryAfterSelectMu.Lock()
		profileCategoryAfterSelectHooks = append(profileCategoryAfterSelectHooks, profileCategoryHook)
		profileCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		profileCategoryBeforeInsertMu.Lock()
		profileCategoryBeforeInsertHooks = append(profileCategoryBeforeInsertHooks, profileCategoryHook)
		profileCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		profileCategoryAfterInsertMu.Lock()
		profileCategoryAfterInsertHooks = append(profileCategoryAfterInsertHooks, profileCategoryHook)
		profileCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		profileCategoryBeforeUpdateMu.Lock()
		profileCategoryBeforeUpdateHooks = append(profileCategoryBeforeUpdateHooks, profileCategoryHook)
		profileCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		profileCategoryAfterUpdateMu.Lock()
		profileCategoryAfterUpdateHooks = append(profileCategoryAfterUpdateHooks, profileCategoryHook)
		profileCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		profileCategoryBeforeDeleteMu.Lock()
		profileCategoryBeforeDeleteHooks = append(profileCategoryBeforeDeleteHooks, profileCategoryHook)
		profileCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		profileCategoryAfterDeleteMu.Lock()
		profileCategoryAfterDeleteHooks = append(profileCategoryAfterDeleteHooks, profileCategoryHook)
		profileCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		profileCategoryBeforeUpsertMu.Lock()
		profileCategoryBeforeUpsertHooks = append(profileCategoryBeforeUpsertHooks, profileCategoryHook)
		profileCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		profileCategoryAfterUpsertMu.Lock()
		profileCategoryAfterUpsertHooks = append(profileCategoryAfterUpsertHooks, profileCategoryHook)
		profileCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single profileCategory record from the query.
func (q profileCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProfileCategory, error) {
	o := &ProfileCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for profile_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProfileCategory records from the query.
func (q profileCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProfileCategorySlice, error) {
	var o []*ProfileCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProfileCategory slice")
	}

	if len(profileCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProfileCategory records in the query.
func (q profileCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count profile_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q profileCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if profile_categories exists")
	}

	return count > 0, nil
}

// IDProfileProfile pointed to by the foreign key.
func (o *ProfileCategory) IDProfileProfile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProfile),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// IDCategory pointed to by the foreign key.
func (o *ProfileCategory) IDCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategories),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// LoadIDProfileProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCategoryL) LoadIDProfileProfile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfileCategory interface{}, mods queries.Applicator) error {
	var slice []*ProfileCategory
	var object *ProfileCategory

	if singular {
		var ok bool
		object, ok = maybeProfileCategory.(*ProfileCategory)
		if !ok {
			object = new(ProfileCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfileCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfileCategory))
			}
		}
	} else {
		s, ok := maybeProfileCategory.(*[]*ProfileCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfileCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfileCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileCategoryR{}
		}
		args[object.IDProfile] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCategoryR{}
			}

			args[obj.IDProfile] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProfileProfile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.IDProfileProfileCategories = append(foreign.R.IDProfileProfileCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDProfile == foreign.ID {
				local.R.IDProfileProfile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.IDProfileProfileCategories = append(foreign.R.IDProfileProfileCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCategoryL) LoadIDCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfileCategory interface{}, mods queries.Applicator) error {
	var slice []*ProfileCategory
	var object *ProfileCategory

	if singular {
		var ok bool
		object, ok = maybeProfileCategory.(*ProfileCategory)
		if !ok {
			object = new(ProfileCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfileCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfileCategory))
			}
		}
	} else {
		s, ok := maybeProfileCategory.(*[]*ProfileCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfileCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfileCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileCategoryR{}
		}
		args[object.IDCategories] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCategoryR{}
			}

			args[obj.IDCategories] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.IDCategoryProfileCategories = append(foreign.R.IDCategoryProfileCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategories == foreign.ID {
				local.R.IDCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.IDCategoryProfileCategories = append(foreign.R.IDCategoryProfileCategories, local)
				break
			}
		}
	}

	return nil
}

// SetIDProfileProfile of the profileCategory to the related item.
// Sets o.R.IDProfileProfile to related.
// Adds o to related.R.IDProfileProfileCategories.
func (o *ProfileCategory) SetIDProfileProfile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
		strmangle.WhereClause("\"", "\"", 2, profileCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDProfile = related.ID
	if o.R == nil {
		o.R = &profileCategoryR{
			IDProfileProfile: related,
		}
	} else {
		o.R.IDProfileProfile = related
	}

	if related.R == nil {
		related.R = &profileR{
			IDProfileProfileCategories: ProfileCategorySlice{o},
		}
	} else {
		related.R.IDProfileProfileCategories = append(related.R.IDProfileProfileCategories, o)
	}

	return nil
}

// SetIDCategory of the profileCategory to the related item.
// Sets o.R.IDCategory to related.
// Adds o to related.R.IDCategoryProfileCategories.
func (o *ProfileCategory) SetIDCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categories"}),
		strmangle.WhereClause("\"", "\"", 2, profileCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategories = related.ID
	if o.R == nil {
		o.R = &profileCategoryR{
			IDCategory: related,
		}
	} else {
		o.R.IDCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			IDCategoryProfileCategories: ProfileCategorySlice{o},
		}
	} else {
		related.R.IDCategoryProfileCategories = append(related.R.IDCategoryProfileCategories, o)
	}

	return nil
}

// ProfileCategories retrieves all the records using an executor.
func ProfileCategories(mods ...qm.QueryMod) profileCategoryQuery {
	mods = append(mods, qm.From("\"profile_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"profile_categories\".*"})
	}

	return profileCategoryQuery{q}
}

// FindProfileCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfileCategory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ProfileCategory, error) {
	profileCategoryObj := &ProfileCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"profile_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, profileCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from profile_categories")
	}

	if err = profileCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return profileCategoryObj, err
	}

	return profileCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProfileCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profile_categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileCategoryInsertCacheMut.RLock()
	cache, cached := profileCategoryInsertCache[key]
	profileCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileCategoryAllColumns,
			profileCategoryColumnsWithDefault,
			profileCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileCategoryType, profileCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileCategoryType, profileCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"profile_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"profile_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into profile_categories")
	}

	if !cached {
		profileCategoryInsertCacheMut.Lock()
		profileCategoryInsertCache[key] = cache
		profileCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProfileCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProfileCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	profileCategoryUpdateCacheMut.RLock()
	cache, cached := profileCategoryUpdateCache[key]
	profileCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileCategoryAllColumns,
			profileCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update profile_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"profile_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, profileCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileCategoryType, profileCategoryMapping, append(wl, profileCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update profile_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for profile_categories")
	}

	if !cached {
		profileCategoryUpdateCacheMut.Lock()
		profileCategoryUpdateCache[key] = cache
		profileCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q profileCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for profile_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for profile_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"profile_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profileCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in profileCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all profileCategory")
	}
	return rowsAff, nil
}

// Delete deletes a single ProfileCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProfileCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProfileCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profileCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"profile_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from profile_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for profile_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q profileCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no profileCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profile_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profile_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(profileCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"profile_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profileCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profile_categories")
	}

	if len(profileCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProfileCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProfileCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"profile_categories\".* FROM \"profile_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProfileCategorySlice")
	}

	*o = slice

	return nil
}

// ProfileCategoryExists checks if the ProfileCategory row exists.
func ProfileCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"profile_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if profile_categories exists")
	}

	return exists, nil
}

// Exists checks if the ProfileCategory row exists.
func (o *ProfileCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProfileCategoryExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProfileCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profile_categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileCategoryUpsertCacheMut.RLock()
	cache, cached := profileCategoryUpsertCache[key]
	profileCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			profileCategoryAllColumns,
			profileCategoryColumnsWithDefault,
			profileCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			profileCategoryAllColumns,
			profileCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert profile_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(profileCategoryPrimaryKeyColumns))
			copy(conflict, profileCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"profile_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(profileCategoryType, profileCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileCategoryType, profileCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert profile_categories")
	}

	if !cached {
		profileCategoryUpsertCacheMut.Lock()
		profileCategoryUpsertCache[key] = cache
		profileCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
