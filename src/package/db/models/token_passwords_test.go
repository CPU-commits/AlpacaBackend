// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTokenPasswords(t *testing.T) {
	t.Parallel()

	query := TokenPasswords()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTokenPasswordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPasswordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TokenPasswords().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPasswordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenPasswordSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTokenPasswordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TokenPasswordExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TokenPassword exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TokenPasswordExists to return true, but got false.")
	}
}

func testTokenPasswordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tokenPasswordFound, err := FindTokenPassword(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tokenPasswordFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTokenPasswordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TokenPasswords().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTokenPasswordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TokenPasswords().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTokenPasswordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tokenPasswordOne := &TokenPassword{}
	tokenPasswordTwo := &TokenPassword{}
	if err = randomize.Struct(seed, tokenPasswordOne, tokenPasswordDBTypes, false, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenPasswordTwo, tokenPasswordDBTypes, false, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenPasswordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenPasswordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenPasswords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTokenPasswordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tokenPasswordOne := &TokenPassword{}
	tokenPasswordTwo := &TokenPassword{}
	if err = randomize.Struct(seed, tokenPasswordOne, tokenPasswordDBTypes, false, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}
	if err = randomize.Struct(seed, tokenPasswordTwo, tokenPasswordDBTypes, false, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tokenPasswordOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tokenPasswordTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tokenPasswordBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func tokenPasswordAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TokenPassword) error {
	*o = TokenPassword{}
	return nil
}

func testTokenPasswordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TokenPassword{}
	o := &TokenPassword{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TokenPassword object: %s", err)
	}

	AddTokenPasswordHook(boil.BeforeInsertHook, tokenPasswordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tokenPasswordBeforeInsertHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.AfterInsertHook, tokenPasswordAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tokenPasswordAfterInsertHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.AfterSelectHook, tokenPasswordAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tokenPasswordAfterSelectHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.BeforeUpdateHook, tokenPasswordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tokenPasswordBeforeUpdateHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.AfterUpdateHook, tokenPasswordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tokenPasswordAfterUpdateHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.BeforeDeleteHook, tokenPasswordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tokenPasswordBeforeDeleteHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.AfterDeleteHook, tokenPasswordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tokenPasswordAfterDeleteHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.BeforeUpsertHook, tokenPasswordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tokenPasswordBeforeUpsertHooks = []TokenPasswordHook{}

	AddTokenPasswordHook(boil.AfterUpsertHook, tokenPasswordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tokenPasswordAfterUpsertHooks = []TokenPasswordHook{}
}

func testTokenPasswordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenPasswordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tokenPasswordColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTokenPasswordToOneUserUsingIDUserUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TokenPassword
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tokenPasswordDBTypes, false, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDUser = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDUserUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TokenPasswordSlice{&local}
	if err = local.L.LoadIDUserUser(ctx, tx, false, (*[]*TokenPassword)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDUserUser = nil
	if err = local.L.LoadIDUserUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTokenPasswordToOneSetOpUserUsingIDUserUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TokenPassword
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tokenPasswordDBTypes, false, strmangle.SetComplement(tokenPasswordPrimaryKeyColumns, tokenPasswordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDUserUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDUserUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDUserTokenPassword != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDUser))
		reflect.Indirect(reflect.ValueOf(&a.IDUser)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser, x.ID)
		}
	}
}

func testTokenPasswordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenPasswordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TokenPasswordSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTokenPasswordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TokenPasswords().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tokenPasswordDBTypes = map[string]string{`ID`: `bigint`, `Token`: `text`, `IDUser`: `bigint`, `CreatedAt`: `timestamp without time zone`}
	_                    = bytes.MinRead
)

func testTokenPasswordsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tokenPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tokenPasswordAllColumns) == len(tokenPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTokenPasswordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tokenPasswordAllColumns) == len(tokenPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TokenPassword{}
	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tokenPasswordDBTypes, true, tokenPasswordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tokenPasswordAllColumns, tokenPasswordPrimaryKeyColumns) {
		fields = tokenPasswordAllColumns
	} else {
		fields = strmangle.SetComplement(
			tokenPasswordAllColumns,
			tokenPasswordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TokenPasswordSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTokenPasswordsUpsert(t *testing.T) {
	t.Parallel()

	if len(tokenPasswordAllColumns) == len(tokenPasswordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TokenPassword{}
	if err = randomize.Struct(seed, &o, tokenPasswordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenPassword: %s", err)
	}

	count, err := TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tokenPasswordDBTypes, false, tokenPasswordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TokenPassword struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TokenPassword: %s", err)
	}

	count, err = TokenPasswords().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
