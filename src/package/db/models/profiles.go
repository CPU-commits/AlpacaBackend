// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Profile is an object representing the database table.
type Profile struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	IDAvatar    null.Int64  `boil:"id_avatar" json:"id_avatar,omitempty" toml:"id_avatar" yaml:"id_avatar,omitempty"`
	Likes       int         `boil:"likes" json:"likes" toml:"likes" yaml:"likes"`
	IDUser      int64       `boil:"id_user" json:"id_user" toml:"id_user" yaml:"id_user"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *profileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileColumns = struct {
	ID          string
	Description string
	IDAvatar    string
	Likes       string
	IDUser      string
	CreatedAt   string
}{
	ID:          "id",
	Description: "description",
	IDAvatar:    "id_avatar",
	Likes:       "likes",
	IDUser:      "id_user",
	CreatedAt:   "created_at",
}

var ProfileTableColumns = struct {
	ID          string
	Description string
	IDAvatar    string
	Likes       string
	IDUser      string
	CreatedAt   string
}{
	ID:          "profiles.id",
	Description: "profiles.description",
	IDAvatar:    "profiles.id_avatar",
	Likes:       "profiles.likes",
	IDUser:      "profiles.id_user",
	CreatedAt:   "profiles.created_at",
}

// Generated where

var ProfileWhere = struct {
	ID          whereHelperint64
	Description whereHelpernull_String
	IDAvatar    whereHelpernull_Int64
	Likes       whereHelperint
	IDUser      whereHelperint64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"profiles\".\"id\""},
	Description: whereHelpernull_String{field: "\"profiles\".\"description\""},
	IDAvatar:    whereHelpernull_Int64{field: "\"profiles\".\"id_avatar\""},
	Likes:       whereHelperint{field: "\"profiles\".\"likes\""},
	IDUser:      whereHelperint64{field: "\"profiles\".\"id_user\""},
	CreatedAt:   whereHelpertime_Time{field: "\"profiles\".\"created_at\""},
}

// ProfileRels is where relationship names are stored.
var ProfileRels = struct {
	IDAvatarImage    string
	IDUserUser       string
	IDProfileDesigns string
	IDProfileFollows string
	IDProfileLikes   string
	IDProfilePosts   string
	IDProfileReviews string
	IDProfileTattoos string
	IDProfileViews   string
}{
	IDAvatarImage:    "IDAvatarImage",
	IDUserUser:       "IDUserUser",
	IDProfileDesigns: "IDProfileDesigns",
	IDProfileFollows: "IDProfileFollows",
	IDProfileLikes:   "IDProfileLikes",
	IDProfilePosts:   "IDProfilePosts",
	IDProfileReviews: "IDProfileReviews",
	IDProfileTattoos: "IDProfileTattoos",
	IDProfileViews:   "IDProfileViews",
}

// profileR is where relationships are stored.
type profileR struct {
	IDAvatarImage    *Image      `boil:"IDAvatarImage" json:"IDAvatarImage" toml:"IDAvatarImage" yaml:"IDAvatarImage"`
	IDUserUser       *User       `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
	IDProfileDesigns DesignSlice `boil:"IDProfileDesigns" json:"IDProfileDesigns" toml:"IDProfileDesigns" yaml:"IDProfileDesigns"`
	IDProfileFollows FollowSlice `boil:"IDProfileFollows" json:"IDProfileFollows" toml:"IDProfileFollows" yaml:"IDProfileFollows"`
	IDProfileLikes   LikeSlice   `boil:"IDProfileLikes" json:"IDProfileLikes" toml:"IDProfileLikes" yaml:"IDProfileLikes"`
	IDProfilePosts   PostSlice   `boil:"IDProfilePosts" json:"IDProfilePosts" toml:"IDProfilePosts" yaml:"IDProfilePosts"`
	IDProfileReviews ReviewSlice `boil:"IDProfileReviews" json:"IDProfileReviews" toml:"IDProfileReviews" yaml:"IDProfileReviews"`
	IDProfileTattoos TattooSlice `boil:"IDProfileTattoos" json:"IDProfileTattoos" toml:"IDProfileTattoos" yaml:"IDProfileTattoos"`
	IDProfileViews   ViewSlice   `boil:"IDProfileViews" json:"IDProfileViews" toml:"IDProfileViews" yaml:"IDProfileViews"`
}

// NewStruct creates a new relationship struct
func (*profileR) NewStruct() *profileR {
	return &profileR{}
}

func (o *Profile) GetIDAvatarImage() *Image {
	if o == nil {
		return nil
	}

	return o.R.GetIDAvatarImage()
}

func (r *profileR) GetIDAvatarImage() *Image {
	if r == nil {
		return nil
	}

	return r.IDAvatarImage
}

func (o *Profile) GetIDUserUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserUser()
}

func (r *profileR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}

	return r.IDUserUser
}

func (o *Profile) GetIDProfileDesigns() DesignSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileDesigns()
}

func (r *profileR) GetIDProfileDesigns() DesignSlice {
	if r == nil {
		return nil
	}

	return r.IDProfileDesigns
}

func (o *Profile) GetIDProfileFollows() FollowSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileFollows()
}

func (r *profileR) GetIDProfileFollows() FollowSlice {
	if r == nil {
		return nil
	}

	return r.IDProfileFollows
}

func (o *Profile) GetIDProfileLikes() LikeSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileLikes()
}

func (r *profileR) GetIDProfileLikes() LikeSlice {
	if r == nil {
		return nil
	}

	return r.IDProfileLikes
}

func (o *Profile) GetIDProfilePosts() PostSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfilePosts()
}

func (r *profileR) GetIDProfilePosts() PostSlice {
	if r == nil {
		return nil
	}

	return r.IDProfilePosts
}

func (o *Profile) GetIDProfileReviews() ReviewSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileReviews()
}

func (r *profileR) GetIDProfileReviews() ReviewSlice {
	if r == nil {
		return nil
	}

	return r.IDProfileReviews
}

func (o *Profile) GetIDProfileTattoos() TattooSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileTattoos()
}

func (r *profileR) GetIDProfileTattoos() TattooSlice {
	if r == nil {
		return nil
	}

	return r.IDProfileTattoos
}

func (o *Profile) GetIDProfileViews() ViewSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileViews()
}

func (r *profileR) GetIDProfileViews() ViewSlice {
	if r == nil {
		return nil
	}

	return r.IDProfileViews
}

// profileL is where Load methods for each relationship are stored.
type profileL struct{}

var (
	profileAllColumns            = []string{"id", "description", "id_avatar", "likes", "id_user", "created_at"}
	profileColumnsWithoutDefault = []string{"id_user"}
	profileColumnsWithDefault    = []string{"id", "description", "id_avatar", "likes", "created_at"}
	profilePrimaryKeyColumns     = []string{"id"}
	profileGeneratedColumns      = []string{}
)

type (
	// ProfileSlice is an alias for a slice of pointers to Profile.
	// This should almost always be used instead of []Profile.
	ProfileSlice []*Profile
	// ProfileHook is the signature for custom Profile hook methods
	ProfileHook func(context.Context, boil.ContextExecutor, *Profile) error

	profileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileType                 = reflect.TypeOf(&Profile{})
	profileMapping              = queries.MakeStructMapping(profileType)
	profilePrimaryKeyMapping, _ = queries.BindMapping(profileType, profileMapping, profilePrimaryKeyColumns)
	profileInsertCacheMut       sync.RWMutex
	profileInsertCache          = make(map[string]insertCache)
	profileUpdateCacheMut       sync.RWMutex
	profileUpdateCache          = make(map[string]updateCache)
	profileUpsertCacheMut       sync.RWMutex
	profileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var profileAfterSelectMu sync.Mutex
var profileAfterSelectHooks []ProfileHook

var profileBeforeInsertMu sync.Mutex
var profileBeforeInsertHooks []ProfileHook
var profileAfterInsertMu sync.Mutex
var profileAfterInsertHooks []ProfileHook

var profileBeforeUpdateMu sync.Mutex
var profileBeforeUpdateHooks []ProfileHook
var profileAfterUpdateMu sync.Mutex
var profileAfterUpdateHooks []ProfileHook

var profileBeforeDeleteMu sync.Mutex
var profileBeforeDeleteHooks []ProfileHook
var profileAfterDeleteMu sync.Mutex
var profileAfterDeleteHooks []ProfileHook

var profileBeforeUpsertMu sync.Mutex
var profileBeforeUpsertHooks []ProfileHook
var profileAfterUpsertMu sync.Mutex
var profileAfterUpsertHooks []ProfileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Profile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Profile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Profile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Profile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Profile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Profile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Profile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Profile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Profile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range profileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProfileHook registers your hook function for all future operations.
func AddProfileHook(hookPoint boil.HookPoint, profileHook ProfileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		profileAfterSelectMu.Lock()
		profileAfterSelectHooks = append(profileAfterSelectHooks, profileHook)
		profileAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		profileBeforeInsertMu.Lock()
		profileBeforeInsertHooks = append(profileBeforeInsertHooks, profileHook)
		profileBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		profileAfterInsertMu.Lock()
		profileAfterInsertHooks = append(profileAfterInsertHooks, profileHook)
		profileAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		profileBeforeUpdateMu.Lock()
		profileBeforeUpdateHooks = append(profileBeforeUpdateHooks, profileHook)
		profileBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		profileAfterUpdateMu.Lock()
		profileAfterUpdateHooks = append(profileAfterUpdateHooks, profileHook)
		profileAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		profileBeforeDeleteMu.Lock()
		profileBeforeDeleteHooks = append(profileBeforeDeleteHooks, profileHook)
		profileBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		profileAfterDeleteMu.Lock()
		profileAfterDeleteHooks = append(profileAfterDeleteHooks, profileHook)
		profileAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		profileBeforeUpsertMu.Lock()
		profileBeforeUpsertHooks = append(profileBeforeUpsertHooks, profileHook)
		profileBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		profileAfterUpsertMu.Lock()
		profileAfterUpsertHooks = append(profileAfterUpsertHooks, profileHook)
		profileAfterUpsertMu.Unlock()
	}
}

// One returns a single profile record from the query.
func (q profileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Profile, error) {
	o := &Profile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for profiles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Profile records from the query.
func (q profileQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProfileSlice, error) {
	var o []*Profile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Profile slice")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Profile records in the query.
func (q profileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count profiles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q profileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if profiles exists")
	}

	return count > 0, nil
}

// IDAvatarImage pointed to by the foreign key.
func (o *Profile) IDAvatarImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDAvatar),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// IDUserUser pointed to by the foreign key.
func (o *Profile) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDProfileDesigns retrieves all the design's Designs with an executor via id_profile column.
func (o *Profile) IDProfileDesigns(mods ...qm.QueryMod) designQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"designs\".\"id_profile\"=?", o.ID),
	)

	return Designs(queryMods...)
}

// IDProfileFollows retrieves all the follow's Follows with an executor via id_profile column.
func (o *Profile) IDProfileFollows(mods ...qm.QueryMod) followQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follows\".\"id_profile\"=?", o.ID),
	)

	return Follows(queryMods...)
}

// IDProfileLikes retrieves all the like's Likes with an executor via id_profile column.
func (o *Profile) IDProfileLikes(mods ...qm.QueryMod) likeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"likes\".\"id_profile\"=?", o.ID),
	)

	return Likes(queryMods...)
}

// IDProfilePosts retrieves all the post's Posts with an executor via id_profile column.
func (o *Profile) IDProfilePosts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"id_profile\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// IDProfileReviews retrieves all the review's Reviews with an executor via id_profile column.
func (o *Profile) IDProfileReviews(mods ...qm.QueryMod) reviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reviews\".\"id_profile\"=?", o.ID),
	)

	return Reviews(queryMods...)
}

// IDProfileTattoos retrieves all the tattoo's Tattoos with an executor via id_profile column.
func (o *Profile) IDProfileTattoos(mods ...qm.QueryMod) tattooQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tattoos\".\"id_profile\"=?", o.ID),
	)

	return Tattoos(queryMods...)
}

// IDProfileViews retrieves all the view's Views with an executor via id_profile column.
func (o *Profile) IDProfileViews(mods ...qm.QueryMod) viewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"views\".\"id_profile\"=?", o.ID),
	)

	return Views(queryMods...)
}

// LoadIDAvatarImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileL) LoadIDAvatarImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		if !queries.IsNil(object.IDAvatar) {
			args[object.IDAvatar] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			if !queries.IsNil(obj.IDAvatar) {
				args[obj.IDAvatar] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDAvatarImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDAvatarProfile = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDAvatar, foreign.ID) {
				local.R.IDAvatarImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDAvatarProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.IDUser] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}

			args[obj.IDUser] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserProfile = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUser == foreign.ID {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileDesigns allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfileDesigns(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`designs`),
		qm.WhereIn(`designs.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load designs")
	}

	var resultSlice []*Design
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice designs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on designs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for designs")
	}

	if len(designAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfileDesigns = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &designR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDProfile {
				local.R.IDProfileDesigns = append(local.R.IDProfileDesigns, foreign)
				if foreign.R == nil {
					foreign.R = &designR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileFollows allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfileFollows(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`follows`),
		qm.WhereIn(`follows.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follows")
	}

	var resultSlice []*Follow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follows")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follows")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfileFollows = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDProfile) {
				local.R.IDProfileFollows = append(local.R.IDProfileFollows, foreign)
				if foreign.R == nil {
					foreign.R = &followR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileLikes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfileLikes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`likes`),
		qm.WhereIn(`likes.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load likes")
	}

	var resultSlice []*Like
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice likes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on likes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for likes")
	}

	if len(likeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfileLikes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &likeR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDProfile {
				local.R.IDProfileLikes = append(local.R.IDProfileLikes, foreign)
				if foreign.R == nil {
					foreign.R = &likeR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfilePosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfilePosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfilePosts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDProfile {
				local.R.IDProfilePosts = append(local.R.IDProfilePosts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfileReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reviews`),
		qm.WhereIn(`reviews.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reviews")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviews")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfileReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDProfile {
				local.R.IDProfileReviews = append(local.R.IDProfileReviews, foreign)
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileTattoos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfileTattoos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tattoos`),
		qm.WhereIn(`tattoos.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tattoos")
	}

	var resultSlice []*Tattoo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tattoos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tattoos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tattoos")
	}

	if len(tattooAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfileTattoos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tattooR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDProfile {
				local.R.IDProfileTattoos = append(local.R.IDProfileTattoos, foreign)
				if foreign.R == nil {
					foreign.R = &tattooR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// LoadIDProfileViews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileL) LoadIDProfileViews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProfile interface{}, mods queries.Applicator) error {
	var slice []*Profile
	var object *Profile

	if singular {
		var ok bool
		object, ok = maybeProfile.(*Profile)
		if !ok {
			object = new(Profile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProfile))
			}
		}
	} else {
		s, ok := maybeProfile.(*[]*Profile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProfile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &profileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`views`),
		qm.WhereIn(`views.id_profile in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load views")
	}

	var resultSlice []*View
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice views")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on views")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for views")
	}

	if len(viewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProfileViews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &viewR{}
			}
			foreign.R.IDProfileProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDProfile) {
				local.R.IDProfileViews = append(local.R.IDProfileViews, foreign)
				if foreign.R == nil {
					foreign.R = &viewR{}
				}
				foreign.R.IDProfileProfile = local
				break
			}
		}
	}

	return nil
}

// SetIDAvatarImage of the profile to the related item.
// Sets o.R.IDAvatarImage to related.
// Adds o to related.R.IDAvatarProfile.
func (o *Profile) SetIDAvatarImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_avatar"}),
		strmangle.WhereClause("\"", "\"", 2, profilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDAvatar, related.ID)
	if o.R == nil {
		o.R = &profileR{
			IDAvatarImage: related,
		}
	} else {
		o.R.IDAvatarImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDAvatarProfile: o,
		}
	} else {
		related.R.IDAvatarProfile = o
	}

	return nil
}

// RemoveIDAvatarImage relationship.
// Sets o.R.IDAvatarImage to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Profile) RemoveIDAvatarImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.IDAvatar, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_avatar")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDAvatarImage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.IDAvatarProfile = nil
	return nil
}

// SetIDUserUser of the profile to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserProfile.
func (o *Profile) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, profilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUser = related.ID
	if o.R == nil {
		o.R = &profileR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserProfile: o,
		}
	} else {
		related.R.IDUserProfile = o
	}

	return nil
}

// AddIDProfileDesigns adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfileDesigns.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfileDesigns(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Design) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDProfile = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"designs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, designPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDProfile = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfileDesigns: related,
		}
	} else {
		o.R.IDProfileDesigns = append(o.R.IDProfileDesigns, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &designR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// AddIDProfileFollows adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfileFollows.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfileFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDProfile, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follows\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDProfile, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfileFollows: related,
		}
	} else {
		o.R.IDProfileFollows = append(o.R.IDProfileFollows, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// SetIDProfileFollows removes all previously related items of the
// profile replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDProfileProfile's IDProfileFollows accordingly.
// Replaces o.R.IDProfileFollows with related.
// Sets related.R.IDProfileProfile's IDProfileFollows accordingly.
func (o *Profile) SetIDProfileFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	query := "update \"follows\" set \"id_profile\" = null where \"id_profile\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDProfileFollows {
			queries.SetScanner(&rel.IDProfile, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDProfileProfile = nil
		}
		o.R.IDProfileFollows = nil
	}

	return o.AddIDProfileFollows(ctx, exec, insert, related...)
}

// RemoveIDProfileFollows relationships from objects passed in.
// Removes related items from R.IDProfileFollows (uses pointer comparison, removal does not keep order)
// Sets related.R.IDProfileProfile.
func (o *Profile) RemoveIDProfileFollows(ctx context.Context, exec boil.ContextExecutor, related ...*Follow) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDProfile, nil)
		if rel.R != nil {
			rel.R.IDProfileProfile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_profile")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDProfileFollows {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDProfileFollows)
			if ln > 1 && i < ln-1 {
				o.R.IDProfileFollows[i] = o.R.IDProfileFollows[ln-1]
			}
			o.R.IDProfileFollows = o.R.IDProfileFollows[:ln-1]
			break
		}
	}

	return nil
}

// AddIDProfileLikes adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfileLikes.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfileLikes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Like) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDProfile = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"likes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, likePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDProfile = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfileLikes: related,
		}
	} else {
		o.R.IDProfileLikes = append(o.R.IDProfileLikes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &likeR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// AddIDProfilePosts adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfilePosts.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfilePosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDProfile = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDProfile = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfilePosts: related,
		}
	} else {
		o.R.IDProfilePosts = append(o.R.IDProfilePosts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// AddIDProfileReviews adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfileReviews.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfileReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Review) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDProfile = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDProfile = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfileReviews: related,
		}
	} else {
		o.R.IDProfileReviews = append(o.R.IDProfileReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// AddIDProfileTattoos adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfileTattoos.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfileTattoos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tattoo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDProfile = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tattoos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, tattooPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDProfile = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfileTattoos: related,
		}
	} else {
		o.R.IDProfileTattoos = append(o.R.IDProfileTattoos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tattooR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// AddIDProfileViews adds the given related objects to the existing relationships
// of the profile, optionally inserting them as new records.
// Appends related to o.R.IDProfileViews.
// Sets related.R.IDProfileProfile appropriately.
func (o *Profile) AddIDProfileViews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*View) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDProfile, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"views\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
				strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDProfile, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileR{
			IDProfileViews: related,
		}
	} else {
		o.R.IDProfileViews = append(o.R.IDProfileViews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &viewR{
				IDProfileProfile: o,
			}
		} else {
			rel.R.IDProfileProfile = o
		}
	}
	return nil
}

// SetIDProfileViews removes all previously related items of the
// profile replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDProfileProfile's IDProfileViews accordingly.
// Replaces o.R.IDProfileViews with related.
// Sets related.R.IDProfileProfile's IDProfileViews accordingly.
func (o *Profile) SetIDProfileViews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*View) error {
	query := "update \"views\" set \"id_profile\" = null where \"id_profile\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDProfileViews {
			queries.SetScanner(&rel.IDProfile, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDProfileProfile = nil
		}
		o.R.IDProfileViews = nil
	}

	return o.AddIDProfileViews(ctx, exec, insert, related...)
}

// RemoveIDProfileViews relationships from objects passed in.
// Removes related items from R.IDProfileViews (uses pointer comparison, removal does not keep order)
// Sets related.R.IDProfileProfile.
func (o *Profile) RemoveIDProfileViews(ctx context.Context, exec boil.ContextExecutor, related ...*View) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDProfile, nil)
		if rel.R != nil {
			rel.R.IDProfileProfile = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_profile")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDProfileViews {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDProfileViews)
			if ln > 1 && i < ln-1 {
				o.R.IDProfileViews[i] = o.R.IDProfileViews[ln-1]
			}
			o.R.IDProfileViews = o.R.IDProfileViews[:ln-1]
			break
		}
	}

	return nil
}

// Profiles retrieves all the records using an executor.
func Profiles(mods ...qm.QueryMod) profileQuery {
	mods = append(mods, qm.From("\"profiles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"profiles\".*"})
	}

	return profileQuery{q}
}

// FindProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfile(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Profile, error) {
	profileObj := &Profile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"profiles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, profileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from profiles")
	}

	if err = profileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return profileObj, err
	}

	return profileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Profile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no profiles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileInsertCacheMut.RLock()
	cache, cached := profileInsertCache[key]
	profileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileAllColumns,
			profileColumnsWithDefault,
			profileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileType, profileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"profiles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"profiles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into profiles")
	}

	if !cached {
		profileInsertCacheMut.Lock()
		profileInsertCache[key] = cache
		profileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Profile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Profile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	profileUpdateCacheMut.RLock()
	cache, cached := profileUpdateCache[key]
	profileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update profiles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"profiles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, profilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, append(wl, profilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update profiles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for profiles")
	}

	if !cached {
		profileUpdateCacheMut.Lock()
		profileUpdateCache[key] = cache
		profileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q profileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for profiles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"profiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in profile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all profile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Profile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no profiles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileUpsertCacheMut.RLock()
	cache, cached := profileUpsertCache[key]
	profileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			profileAllColumns,
			profileColumnsWithDefault,
			profileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			profileAllColumns,
			profilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert profiles, could not build update column list")
		}

		ret := strmangle.SetComplement(profileAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(profilePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert profiles, could not build conflict column list")
			}

			conflict = make([]string, len(profilePrimaryKeyColumns))
			copy(conflict, profilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"profiles\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(profileType, profileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileType, profileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert profiles")
	}

	if !cached {
		profileUpsertCacheMut.Lock()
		profileUpsertCache[key] = cache
		profileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Profile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Profile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Profile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profilePrimaryKeyMapping)
	sql := "DELETE FROM \"profiles\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for profiles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q profileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no profileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profiles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(profileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"profiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from profile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for profiles")
	}

	if len(profileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Profile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProfile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"profiles\".* FROM \"profiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProfileSlice")
	}

	*o = slice

	return nil
}

// ProfileExists checks if the Profile row exists.
func ProfileExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"profiles\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if profiles exists")
	}

	return exists, nil
}

// Exists checks if the Profile row exists.
func (o *Profile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProfileExists(ctx, exec, o.ID)
}
