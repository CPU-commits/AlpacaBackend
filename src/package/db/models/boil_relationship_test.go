// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccessToSessionUsingIDSessionSession", testAccessToOneSessionUsingIDSessionSession)
	t.Run("AppointmentImageToAppointmentUsingIDAppointmentAppointment", testAppointmentImageToOneAppointmentUsingIDAppointmentAppointment)
	t.Run("AppointmentImageToImageUsingIDImageImage", testAppointmentImageToOneImageUsingIDImageImage)
	t.Run("AppointmentToUserUsingIDTattooArtistUser", testAppointmentToOneUserUsingIDTattooArtistUser)
	t.Run("AppointmentToUserUsingIDUserUser", testAppointmentToOneUserUsingIDUserUser)
	t.Run("AuthToUserUsingIDUserUser", testAuthToOneUserUsingIDUserUser)
	t.Run("CodeToUserUsingIDUserUser", testCodeToOneUserUsingIDUserUser)
	t.Run("FollowToProfileUsingIDProfileProfile", testFollowToOneProfileUsingIDProfileProfile)
	t.Run("FollowToUserUsingIDUserUser", testFollowToOneUserUsingIDUserUser)
	t.Run("LikeToPostUsingIDPostPost", testLikeToOnePostUsingIDPostPost)
	t.Run("LikeToProfileUsingIDProfileProfile", testLikeToOneProfileUsingIDProfileProfile)
	t.Run("LikeToUserUsingIDUserUser", testLikeToOneUserUsingIDUserUser)
	t.Run("PostImageToImageUsingIDImageImage", testPostImageToOneImageUsingIDImageImage)
	t.Run("PostImageToPostUsingIDPostPost", testPostImageToOnePostUsingIDPostPost)
	t.Run("PostToProfileUsingIDProfileProfile", testPostToOneProfileUsingIDProfileProfile)
	t.Run("ProfileToImageUsingIDAvatarImage", testProfileToOneImageUsingIDAvatarImage)
	t.Run("ProfileToUserUsingIDUserUser", testProfileToOneUserUsingIDUserUser)
	t.Run("ReviewToProfileUsingIDProfileProfile", testReviewToOneProfileUsingIDProfileProfile)
	t.Run("ReviewToUserUsingIDUserUser", testReviewToOneUserUsingIDUserUser)
	t.Run("RolesUserToUserUsingIDUserUser", testRolesUserToOneUserUsingIDUserUser)
	t.Run("SessionToAuthUsingIDAuthAuth", testSessionToOneAuthUsingIDAuthAuth)
	t.Run("StudioAdminToUserUsingIDOwnerUser", testStudioAdminToOneUserUsingIDOwnerUser)
	t.Run("StudioAdminToStudioUsingIDStudioStudio", testStudioAdminToOneStudioUsingIDStudioStudio)
	t.Run("StudioTattooArtistToStudioUsingIDStudioStudio", testStudioTattooArtistToOneStudioUsingIDStudioStudio)
	t.Run("StudioTattooArtistToUserUsingIDTattooArtistUser", testStudioTattooArtistToOneUserUsingIDTattooArtistUser)
	t.Run("TattooToImageUsingIDImageImage", testTattooToOneImageUsingIDImageImage)
	t.Run("TattooToPostUsingIDPostPost", testTattooToOnePostUsingIDPostPost)
	t.Run("TattooToProfileUsingIDProfileProfile", testTattooToOneProfileUsingIDProfileProfile)
	t.Run("TokenPasswordToUserUsingIDUserUser", testTokenPasswordToOneUserUsingIDUserUser)
	t.Run("TokenToUserUsingIDUserUser", testTokenToOneUserUsingIDUserUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("ImageToAppointmentImageUsingIDImageAppointmentImage", testImageOneToOneAppointmentImageUsingIDImageAppointmentImage)
	t.Run("ImageToPostImageUsingIDImagePostImage", testImageOneToOnePostImageUsingIDImagePostImage)
	t.Run("ImageToProfileUsingIDAvatarProfile", testImageOneToOneProfileUsingIDAvatarProfile)
	t.Run("ImageToTattooUsingIDImageTattoo", testImageOneToOneTattooUsingIDImageTattoo)
	t.Run("UserToAuthUsingIDUserAuth", testUserOneToOneAuthUsingIDUserAuth)
	t.Run("UserToProfileUsingIDUserProfile", testUserOneToOneProfileUsingIDUserProfile)
	t.Run("UserToTokenPasswordUsingIDUserTokenPassword", testUserOneToOneTokenPasswordUsingIDUserTokenPassword)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AppointmentToIDAppointmentAppointmentImages", testAppointmentToManyIDAppointmentAppointmentImages)
	t.Run("AuthToIDAuthSessions", testAuthToManyIDAuthSessions)
	t.Run("PostToIDPostLikes", testPostToManyIDPostLikes)
	t.Run("PostToIDPostPostImages", testPostToManyIDPostPostImages)
	t.Run("PostToIDPostTattoos", testPostToManyIDPostTattoos)
	t.Run("ProfileToIDProfileFollows", testProfileToManyIDProfileFollows)
	t.Run("ProfileToIDProfileLikes", testProfileToManyIDProfileLikes)
	t.Run("ProfileToIDProfilePosts", testProfileToManyIDProfilePosts)
	t.Run("ProfileToIDProfileReviews", testProfileToManyIDProfileReviews)
	t.Run("ProfileToIDProfileTattoos", testProfileToManyIDProfileTattoos)
	t.Run("SessionToIDSessionAccesses", testSessionToManyIDSessionAccesses)
	t.Run("StudioToIDStudioStudioAdmins", testStudioToManyIDStudioStudioAdmins)
	t.Run("StudioToIDStudioStudioTattooArtists", testStudioToManyIDStudioStudioTattooArtists)
	t.Run("UserToIDTattooArtistAppointments", testUserToManyIDTattooArtistAppointments)
	t.Run("UserToIDUserAppointments", testUserToManyIDUserAppointments)
	t.Run("UserToIDUserCodes", testUserToManyIDUserCodes)
	t.Run("UserToIDUserFollows", testUserToManyIDUserFollows)
	t.Run("UserToIDUserLikes", testUserToManyIDUserLikes)
	t.Run("UserToIDUserReviews", testUserToManyIDUserReviews)
	t.Run("UserToIDUserRolesUsers", testUserToManyIDUserRolesUsers)
	t.Run("UserToIDOwnerStudioAdmins", testUserToManyIDOwnerStudioAdmins)
	t.Run("UserToIDTattooArtistStudioTattooArtists", testUserToManyIDTattooArtistStudioTattooArtists)
	t.Run("UserToIDUserTokens", testUserToManyIDUserTokens)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccessToSessionUsingIDSessionAccesses", testAccessToOneSetOpSessionUsingIDSessionSession)
	t.Run("AppointmentImageToAppointmentUsingIDAppointmentAppointmentImages", testAppointmentImageToOneSetOpAppointmentUsingIDAppointmentAppointment)
	t.Run("AppointmentImageToImageUsingIDImageAppointmentImage", testAppointmentImageToOneSetOpImageUsingIDImageImage)
	t.Run("AppointmentToUserUsingIDTattooArtistAppointments", testAppointmentToOneSetOpUserUsingIDTattooArtistUser)
	t.Run("AppointmentToUserUsingIDUserAppointments", testAppointmentToOneSetOpUserUsingIDUserUser)
	t.Run("AuthToUserUsingIDUserAuth", testAuthToOneSetOpUserUsingIDUserUser)
	t.Run("CodeToUserUsingIDUserCodes", testCodeToOneSetOpUserUsingIDUserUser)
	t.Run("FollowToProfileUsingIDProfileFollows", testFollowToOneSetOpProfileUsingIDProfileProfile)
	t.Run("FollowToUserUsingIDUserFollows", testFollowToOneSetOpUserUsingIDUserUser)
	t.Run("LikeToPostUsingIDPostLikes", testLikeToOneSetOpPostUsingIDPostPost)
	t.Run("LikeToProfileUsingIDProfileLikes", testLikeToOneSetOpProfileUsingIDProfileProfile)
	t.Run("LikeToUserUsingIDUserLikes", testLikeToOneSetOpUserUsingIDUserUser)
	t.Run("PostImageToImageUsingIDImagePostImage", testPostImageToOneSetOpImageUsingIDImageImage)
	t.Run("PostImageToPostUsingIDPostPostImages", testPostImageToOneSetOpPostUsingIDPostPost)
	t.Run("PostToProfileUsingIDProfilePosts", testPostToOneSetOpProfileUsingIDProfileProfile)
	t.Run("ProfileToImageUsingIDAvatarProfile", testProfileToOneSetOpImageUsingIDAvatarImage)
	t.Run("ProfileToUserUsingIDUserProfile", testProfileToOneSetOpUserUsingIDUserUser)
	t.Run("ReviewToProfileUsingIDProfileReviews", testReviewToOneSetOpProfileUsingIDProfileProfile)
	t.Run("ReviewToUserUsingIDUserReviews", testReviewToOneSetOpUserUsingIDUserUser)
	t.Run("RolesUserToUserUsingIDUserRolesUsers", testRolesUserToOneSetOpUserUsingIDUserUser)
	t.Run("SessionToAuthUsingIDAuthSessions", testSessionToOneSetOpAuthUsingIDAuthAuth)
	t.Run("StudioAdminToUserUsingIDOwnerStudioAdmins", testStudioAdminToOneSetOpUserUsingIDOwnerUser)
	t.Run("StudioAdminToStudioUsingIDStudioStudioAdmins", testStudioAdminToOneSetOpStudioUsingIDStudioStudio)
	t.Run("StudioTattooArtistToStudioUsingIDStudioStudioTattooArtists", testStudioTattooArtistToOneSetOpStudioUsingIDStudioStudio)
	t.Run("StudioTattooArtistToUserUsingIDTattooArtistStudioTattooArtists", testStudioTattooArtistToOneSetOpUserUsingIDTattooArtistUser)
	t.Run("TattooToImageUsingIDImageTattoo", testTattooToOneSetOpImageUsingIDImageImage)
	t.Run("TattooToPostUsingIDPostTattoos", testTattooToOneSetOpPostUsingIDPostPost)
	t.Run("TattooToProfileUsingIDProfileTattoos", testTattooToOneSetOpProfileUsingIDProfileProfile)
	t.Run("TokenPasswordToUserUsingIDUserTokenPassword", testTokenPasswordToOneSetOpUserUsingIDUserUser)
	t.Run("TokenToUserUsingIDUserTokens", testTokenToOneSetOpUserUsingIDUserUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ProfileToImageUsingIDAvatarProfile", testProfileToOneRemoveOpImageUsingIDAvatarImage)
	t.Run("TattooToPostUsingIDPostTattoos", testTattooToOneRemoveOpPostUsingIDPostPost)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("ImageToAppointmentImageUsingIDImageAppointmentImage", testImageOneToOneSetOpAppointmentImageUsingIDImageAppointmentImage)
	t.Run("ImageToPostImageUsingIDImagePostImage", testImageOneToOneSetOpPostImageUsingIDImagePostImage)
	t.Run("ImageToProfileUsingIDAvatarProfile", testImageOneToOneSetOpProfileUsingIDAvatarProfile)
	t.Run("ImageToTattooUsingIDImageTattoo", testImageOneToOneSetOpTattooUsingIDImageTattoo)
	t.Run("UserToAuthUsingIDUserAuth", testUserOneToOneSetOpAuthUsingIDUserAuth)
	t.Run("UserToProfileUsingIDUserProfile", testUserOneToOneSetOpProfileUsingIDUserProfile)
	t.Run("UserToTokenPasswordUsingIDUserTokenPassword", testUserOneToOneSetOpTokenPasswordUsingIDUserTokenPassword)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {
	t.Run("ImageToProfileUsingIDAvatarProfile", testImageOneToOneRemoveOpProfileUsingIDAvatarProfile)
}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AppointmentToIDAppointmentAppointmentImages", testAppointmentToManyAddOpIDAppointmentAppointmentImages)
	t.Run("AuthToIDAuthSessions", testAuthToManyAddOpIDAuthSessions)
	t.Run("PostToIDPostLikes", testPostToManyAddOpIDPostLikes)
	t.Run("PostToIDPostPostImages", testPostToManyAddOpIDPostPostImages)
	t.Run("PostToIDPostTattoos", testPostToManyAddOpIDPostTattoos)
	t.Run("ProfileToIDProfileFollows", testProfileToManyAddOpIDProfileFollows)
	t.Run("ProfileToIDProfileLikes", testProfileToManyAddOpIDProfileLikes)
	t.Run("ProfileToIDProfilePosts", testProfileToManyAddOpIDProfilePosts)
	t.Run("ProfileToIDProfileReviews", testProfileToManyAddOpIDProfileReviews)
	t.Run("ProfileToIDProfileTattoos", testProfileToManyAddOpIDProfileTattoos)
	t.Run("SessionToIDSessionAccesses", testSessionToManyAddOpIDSessionAccesses)
	t.Run("StudioToIDStudioStudioAdmins", testStudioToManyAddOpIDStudioStudioAdmins)
	t.Run("StudioToIDStudioStudioTattooArtists", testStudioToManyAddOpIDStudioStudioTattooArtists)
	t.Run("UserToIDTattooArtistAppointments", testUserToManyAddOpIDTattooArtistAppointments)
	t.Run("UserToIDUserAppointments", testUserToManyAddOpIDUserAppointments)
	t.Run("UserToIDUserCodes", testUserToManyAddOpIDUserCodes)
	t.Run("UserToIDUserFollows", testUserToManyAddOpIDUserFollows)
	t.Run("UserToIDUserLikes", testUserToManyAddOpIDUserLikes)
	t.Run("UserToIDUserReviews", testUserToManyAddOpIDUserReviews)
	t.Run("UserToIDUserRolesUsers", testUserToManyAddOpIDUserRolesUsers)
	t.Run("UserToIDOwnerStudioAdmins", testUserToManyAddOpIDOwnerStudioAdmins)
	t.Run("UserToIDTattooArtistStudioTattooArtists", testUserToManyAddOpIDTattooArtistStudioTattooArtists)
	t.Run("UserToIDUserTokens", testUserToManyAddOpIDUserTokens)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("PostToIDPostTattoos", testPostToManySetOpIDPostTattoos)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("PostToIDPostTattoos", testPostToManyRemoveOpIDPostTattoos)
}
