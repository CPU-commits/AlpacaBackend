// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testAppointmentImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(appointmentImageAllColumns) == len(appointmentImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AppointmentImage{}
	if err = randomize.Struct(seed, &o, appointmentImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AppointmentImage: %s", err)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, appointmentImageDBTypes, false, appointmentImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AppointmentImage: %s", err)
	}

	count, err = AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAppointmentImages(t *testing.T) {
	t.Parallel()

	query := AppointmentImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAppointmentImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AppointmentImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppointmentImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAppointmentImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AppointmentImageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AppointmentImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AppointmentImageExists to return true, but got false.")
	}
}

func testAppointmentImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	appointmentImageFound, err := FindAppointmentImage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if appointmentImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAppointmentImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AppointmentImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAppointmentImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AppointmentImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAppointmentImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	appointmentImageOne := &AppointmentImage{}
	appointmentImageTwo := &AppointmentImage{}
	if err = randomize.Struct(seed, appointmentImageOne, appointmentImageDBTypes, false, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}
	if err = randomize.Struct(seed, appointmentImageTwo, appointmentImageDBTypes, false, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appointmentImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appointmentImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AppointmentImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAppointmentImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	appointmentImageOne := &AppointmentImage{}
	appointmentImageTwo := &AppointmentImage{}
	if err = randomize.Struct(seed, appointmentImageOne, appointmentImageDBTypes, false, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}
	if err = randomize.Struct(seed, appointmentImageTwo, appointmentImageDBTypes, false, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = appointmentImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = appointmentImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func appointmentImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func appointmentImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AppointmentImage) error {
	*o = AppointmentImage{}
	return nil
}

func testAppointmentImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AppointmentImage{}
	o := &AppointmentImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AppointmentImage object: %s", err)
	}

	AddAppointmentImageHook(boil.BeforeInsertHook, appointmentImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	appointmentImageBeforeInsertHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.AfterInsertHook, appointmentImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	appointmentImageAfterInsertHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.AfterSelectHook, appointmentImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	appointmentImageAfterSelectHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.BeforeUpdateHook, appointmentImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	appointmentImageBeforeUpdateHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.AfterUpdateHook, appointmentImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	appointmentImageAfterUpdateHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.BeforeDeleteHook, appointmentImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	appointmentImageBeforeDeleteHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.AfterDeleteHook, appointmentImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	appointmentImageAfterDeleteHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.BeforeUpsertHook, appointmentImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	appointmentImageBeforeUpsertHooks = []AppointmentImageHook{}

	AddAppointmentImageHook(boil.AfterUpsertHook, appointmentImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	appointmentImageAfterUpsertHooks = []AppointmentImageHook{}
}

func testAppointmentImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppointmentImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(appointmentImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAppointmentImageToOneImageUsingIDImageImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AppointmentImage
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appointmentImageDBTypes, false, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDImage = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDImageImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AppointmentImageSlice{&local}
	if err = local.L.LoadIDImageImage(ctx, tx, false, (*[]*AppointmentImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDImageImage = nil
	if err = local.L.LoadIDImageImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAppointmentImageToOneAppointmentUsingIDAppointmentAppointment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AppointmentImage
	var foreign Appointment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, appointmentImageDBTypes, false, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Appointment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDAppointment = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDAppointmentAppointment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAppointmentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Appointment) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AppointmentImageSlice{&local}
	if err = local.L.LoadIDAppointmentAppointment(ctx, tx, false, (*[]*AppointmentImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAppointmentAppointment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDAppointmentAppointment = nil
	if err = local.L.LoadIDAppointmentAppointment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAppointmentAppointment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAppointmentImageToOneSetOpImageUsingIDImageImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AppointmentImage
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appointmentImageDBTypes, false, strmangle.SetComplement(appointmentImagePrimaryKeyColumns, appointmentImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDImageImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDImageImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDImageAppointmentImage != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDImage))
		reflect.Indirect(reflect.ValueOf(&a.IDImage)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage, x.ID)
		}
	}
}
func testAppointmentImageToOneSetOpAppointmentUsingIDAppointmentAppointment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AppointmentImage
	var b, c Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, appointmentImageDBTypes, false, strmangle.SetComplement(appointmentImagePrimaryKeyColumns, appointmentImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Appointment{&b, &c} {
		err = a.SetIDAppointmentAppointment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDAppointmentAppointment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDAppointmentAppointmentImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDAppointment != x.ID {
			t.Error("foreign key was wrong value", a.IDAppointment)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDAppointment))
		reflect.Indirect(reflect.ValueOf(&a.IDAppointment)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDAppointment != x.ID {
			t.Error("foreign key was wrong value", a.IDAppointment, x.ID)
		}
	}
}

func testAppointmentImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppointmentImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AppointmentImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAppointmentImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AppointmentImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	appointmentImageDBTypes = map[string]string{`ID`: `int8`, `IDAppointment`: `int8`, `IDImage`: `int8`}
	_                       = bytes.MinRead
)

func testAppointmentImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(appointmentImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(appointmentImageAllColumns) == len(appointmentImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAppointmentImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(appointmentImageAllColumns) == len(appointmentImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AppointmentImage{}
	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AppointmentImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, appointmentImageDBTypes, true, appointmentImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AppointmentImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(appointmentImageAllColumns, appointmentImagePrimaryKeyColumns) {
		fields = appointmentImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			appointmentImageAllColumns,
			appointmentImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AppointmentImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
