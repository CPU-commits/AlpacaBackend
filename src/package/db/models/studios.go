// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Studio is an object representing the database table.
type Studio struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Direction   types.JSON  `boil:"direction" json:"direction" toml:"direction" yaml:"direction"`
	Email       string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone       null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *studioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudioColumns = struct {
	ID          string
	Description string
	Direction   string
	Email       string
	Phone       string
	CreatedAt   string
}{
	ID:          "id",
	Description: "description",
	Direction:   "direction",
	Email:       "email",
	Phone:       "phone",
	CreatedAt:   "created_at",
}

var StudioTableColumns = struct {
	ID          string
	Description string
	Direction   string
	Email       string
	Phone       string
	CreatedAt   string
}{
	ID:          "studios.id",
	Description: "studios.description",
	Direction:   "studios.direction",
	Email:       "studios.email",
	Phone:       "studios.phone",
	CreatedAt:   "studios.created_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StudioWhere = struct {
	ID          whereHelperint64
	Description whereHelperstring
	Direction   whereHelpertypes_JSON
	Email       whereHelperstring
	Phone       whereHelpernull_String
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"studios\".\"id\""},
	Description: whereHelperstring{field: "\"studios\".\"description\""},
	Direction:   whereHelpertypes_JSON{field: "\"studios\".\"direction\""},
	Email:       whereHelperstring{field: "\"studios\".\"email\""},
	Phone:       whereHelpernull_String{field: "\"studios\".\"phone\""},
	CreatedAt:   whereHelpertime_Time{field: "\"studios\".\"created_at\""},
}

// StudioRels is where relationship names are stored.
var StudioRels = struct {
	IDStudioStudioAdmins        string
	IDStudioStudioTattooArtists string
}{
	IDStudioStudioAdmins:        "IDStudioStudioAdmins",
	IDStudioStudioTattooArtists: "IDStudioStudioTattooArtists",
}

// studioR is where relationships are stored.
type studioR struct {
	IDStudioStudioAdmins        StudioAdminSlice        `boil:"IDStudioStudioAdmins" json:"IDStudioStudioAdmins" toml:"IDStudioStudioAdmins" yaml:"IDStudioStudioAdmins"`
	IDStudioStudioTattooArtists StudioTattooArtistSlice `boil:"IDStudioStudioTattooArtists" json:"IDStudioStudioTattooArtists" toml:"IDStudioStudioTattooArtists" yaml:"IDStudioStudioTattooArtists"`
}

// NewStruct creates a new relationship struct
func (*studioR) NewStruct() *studioR {
	return &studioR{}
}

func (o *Studio) GetIDStudioStudioAdmins() StudioAdminSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudioAdmins()
}

func (r *studioR) GetIDStudioStudioAdmins() StudioAdminSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioStudioAdmins
}

func (o *Studio) GetIDStudioStudioTattooArtists() StudioTattooArtistSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudioTattooArtists()
}

func (r *studioR) GetIDStudioStudioTattooArtists() StudioTattooArtistSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioStudioTattooArtists
}

// studioL is where Load methods for each relationship are stored.
type studioL struct{}

var (
	studioAllColumns            = []string{"id", "description", "direction", "email", "phone", "created_at"}
	studioColumnsWithoutDefault = []string{"description", "direction", "email"}
	studioColumnsWithDefault    = []string{"id", "phone", "created_at"}
	studioPrimaryKeyColumns     = []string{"id"}
	studioGeneratedColumns      = []string{}
)

type (
	// StudioSlice is an alias for a slice of pointers to Studio.
	// This should almost always be used instead of []Studio.
	StudioSlice []*Studio
	// StudioHook is the signature for custom Studio hook methods
	StudioHook func(context.Context, boil.ContextExecutor, *Studio) error

	studioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studioType                 = reflect.TypeOf(&Studio{})
	studioMapping              = queries.MakeStructMapping(studioType)
	studioPrimaryKeyMapping, _ = queries.BindMapping(studioType, studioMapping, studioPrimaryKeyColumns)
	studioInsertCacheMut       sync.RWMutex
	studioInsertCache          = make(map[string]insertCache)
	studioUpdateCacheMut       sync.RWMutex
	studioUpdateCache          = make(map[string]updateCache)
	studioUpsertCacheMut       sync.RWMutex
	studioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var studioAfterSelectMu sync.Mutex
var studioAfterSelectHooks []StudioHook

var studioBeforeInsertMu sync.Mutex
var studioBeforeInsertHooks []StudioHook
var studioAfterInsertMu sync.Mutex
var studioAfterInsertHooks []StudioHook

var studioBeforeUpdateMu sync.Mutex
var studioBeforeUpdateHooks []StudioHook
var studioAfterUpdateMu sync.Mutex
var studioAfterUpdateHooks []StudioHook

var studioBeforeDeleteMu sync.Mutex
var studioBeforeDeleteHooks []StudioHook
var studioAfterDeleteMu sync.Mutex
var studioAfterDeleteHooks []StudioHook

var studioBeforeUpsertMu sync.Mutex
var studioBeforeUpsertHooks []StudioHook
var studioAfterUpsertMu sync.Mutex
var studioAfterUpsertHooks []StudioHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Studio) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Studio) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Studio) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Studio) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Studio) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Studio) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Studio) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Studio) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Studio) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudioHook registers your hook function for all future operations.
func AddStudioHook(hookPoint boil.HookPoint, studioHook StudioHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		studioAfterSelectMu.Lock()
		studioAfterSelectHooks = append(studioAfterSelectHooks, studioHook)
		studioAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		studioBeforeInsertMu.Lock()
		studioBeforeInsertHooks = append(studioBeforeInsertHooks, studioHook)
		studioBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		studioAfterInsertMu.Lock()
		studioAfterInsertHooks = append(studioAfterInsertHooks, studioHook)
		studioAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		studioBeforeUpdateMu.Lock()
		studioBeforeUpdateHooks = append(studioBeforeUpdateHooks, studioHook)
		studioBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		studioAfterUpdateMu.Lock()
		studioAfterUpdateHooks = append(studioAfterUpdateHooks, studioHook)
		studioAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		studioBeforeDeleteMu.Lock()
		studioBeforeDeleteHooks = append(studioBeforeDeleteHooks, studioHook)
		studioBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		studioAfterDeleteMu.Lock()
		studioAfterDeleteHooks = append(studioAfterDeleteHooks, studioHook)
		studioAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		studioBeforeUpsertMu.Lock()
		studioBeforeUpsertHooks = append(studioBeforeUpsertHooks, studioHook)
		studioBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		studioAfterUpsertMu.Lock()
		studioAfterUpsertHooks = append(studioAfterUpsertHooks, studioHook)
		studioAfterUpsertMu.Unlock()
	}
}

// One returns a single studio record from the query.
func (q studioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Studio, error) {
	o := &Studio{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for studios")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Studio records from the query.
func (q studioQuery) All(ctx context.Context, exec boil.ContextExecutor) (StudioSlice, error) {
	var o []*Studio

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Studio slice")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Studio records in the query.
func (q studioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count studios rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q studioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if studios exists")
	}

	return count > 0, nil
}

// IDStudioStudioAdmins retrieves all the studio_admin's StudioAdmins with an executor via id_studio column.
func (o *Studio) IDStudioStudioAdmins(mods ...qm.QueryMod) studioAdminQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"studio_admins\".\"id_studio\"=?", o.ID),
	)

	return StudioAdmins(queryMods...)
}

// IDStudioStudioTattooArtists retrieves all the studio_tattoo_artist's StudioTattooArtists with an executor via id_studio column.
func (o *Studio) IDStudioStudioTattooArtists(mods ...qm.QueryMod) studioTattooArtistQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"studio_tattoo_artists\".\"id_studio\"=?", o.ID),
	)

	return StudioTattooArtists(queryMods...)
}

// LoadIDStudioStudioAdmins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioStudioAdmins(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studio_admins`),
		qm.WhereIn(`studio_admins.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load studio_admins")
	}

	var resultSlice []*StudioAdmin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice studio_admins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on studio_admins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studio_admins")
	}

	if len(studioAdminAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioStudioAdmins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studioAdminR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDStudio {
				local.R.IDStudioStudioAdmins = append(local.R.IDStudioStudioAdmins, foreign)
				if foreign.R == nil {
					foreign.R = &studioAdminR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDStudioStudioTattooArtists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioStudioTattooArtists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studio_tattoo_artists`),
		qm.WhereIn(`studio_tattoo_artists.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load studio_tattoo_artists")
	}

	var resultSlice []*StudioTattooArtist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice studio_tattoo_artists")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on studio_tattoo_artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studio_tattoo_artists")
	}

	if len(studioTattooArtistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioStudioTattooArtists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studioTattooArtistR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDStudio {
				local.R.IDStudioStudioTattooArtists = append(local.R.IDStudioStudioTattooArtists, foreign)
				if foreign.R == nil {
					foreign.R = &studioTattooArtistR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// AddIDStudioStudioAdmins adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioStudioAdmins.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioStudioAdmins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StudioAdmin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDStudio = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"studio_admins\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, studioAdminPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDStudio = o.ID
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioStudioAdmins: related,
		}
	} else {
		o.R.IDStudioStudioAdmins = append(o.R.IDStudioStudioAdmins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studioAdminR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// AddIDStudioStudioTattooArtists adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioStudioTattooArtists.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioStudioTattooArtists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StudioTattooArtist) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDStudio = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"studio_tattoo_artists\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, studioTattooArtistPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDStudio = o.ID
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioStudioTattooArtists: related,
		}
	} else {
		o.R.IDStudioStudioTattooArtists = append(o.R.IDStudioStudioTattooArtists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studioTattooArtistR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// Studios retrieves all the records using an executor.
func Studios(mods ...qm.QueryMod) studioQuery {
	mods = append(mods, qm.From("\"studios\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"studios\".*"})
	}

	return studioQuery{q}
}

// FindStudio retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudio(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Studio, error) {
	studioObj := &Studio{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"studios\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, studioObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from studios")
	}

	if err = studioObj.doAfterSelectHooks(ctx, exec); err != nil {
		return studioObj, err
	}

	return studioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Studio) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no studios provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	studioInsertCacheMut.RLock()
	cache, cached := studioInsertCache[key]
	studioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			studioAllColumns,
			studioColumnsWithDefault,
			studioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(studioType, studioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studioType, studioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"studios\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"studios\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into studios")
	}

	if !cached {
		studioInsertCacheMut.Lock()
		studioInsertCache[key] = cache
		studioInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Studio.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Studio) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	studioUpdateCacheMut.RLock()
	cache, cached := studioUpdateCache[key]
	studioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			studioAllColumns,
			studioPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update studios, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"studios\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studioType, studioMapping, append(wl, studioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update studios row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for studios")
	}

	if !cached {
		studioUpdateCacheMut.Lock()
		studioUpdateCache[key] = cache
		studioUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q studioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for studios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for studios")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"studios\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studioPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in studio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all studio")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Studio) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no studios provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studioUpsertCacheMut.RLock()
	cache, cached := studioUpsertCache[key]
	studioUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			studioAllColumns,
			studioColumnsWithDefault,
			studioColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			studioAllColumns,
			studioPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert studios, could not build update column list")
		}

		ret := strmangle.SetComplement(studioAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(studioPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert studios, could not build conflict column list")
			}

			conflict = make([]string, len(studioPrimaryKeyColumns))
			copy(conflict, studioPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"studios\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(studioType, studioMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studioType, studioMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert studios")
	}

	if !cached {
		studioUpsertCacheMut.Lock()
		studioUpsertCache[key] = cache
		studioUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Studio record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Studio) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Studio provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studioPrimaryKeyMapping)
	sql := "DELETE FROM \"studios\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from studios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for studios")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q studioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no studioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studios")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(studioBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"studios\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studios")
	}

	if len(studioAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Studio) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStudio(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StudioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"studios\".* FROM \"studios\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudioSlice")
	}

	*o = slice

	return nil
}

// StudioExists checks if the Studio row exists.
func StudioExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"studios\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if studios exists")
	}

	return exists, nil
}

// Exists checks if the Studio row exists.
func (o *Studio) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StudioExists(ctx, exec, o.ID)
}
