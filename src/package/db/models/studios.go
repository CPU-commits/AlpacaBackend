// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Studio is an object representing the database table.
type Studio struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Username    string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	IDAvatar    null.Int64  `boil:"id_avatar" json:"id_avatar,omitempty" toml:"id_avatar" yaml:"id_avatar,omitempty"`
	IDBanner    null.Int64  `boil:"id_banner" json:"id_banner,omitempty" toml:"id_banner" yaml:"id_banner,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	FullAddress string      `boil:"full_address" json:"full_address" toml:"full_address" yaml:"full_address"`
	Email       string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Phone       null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	IDOwner     int64       `boil:"id_owner" json:"id_owner" toml:"id_owner" yaml:"id_owner"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *studioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudioColumns = struct {
	ID          string
	Name        string
	Username    string
	IDAvatar    string
	IDBanner    string
	Description string
	FullAddress string
	Email       string
	Phone       string
	IDOwner     string
	CreatedAt   string
}{
	ID:          "id",
	Name:        "name",
	Username:    "username",
	IDAvatar:    "id_avatar",
	IDBanner:    "id_banner",
	Description: "description",
	FullAddress: "full_address",
	Email:       "email",
	Phone:       "phone",
	IDOwner:     "id_owner",
	CreatedAt:   "created_at",
}

var StudioTableColumns = struct {
	ID          string
	Name        string
	Username    string
	IDAvatar    string
	IDBanner    string
	Description string
	FullAddress string
	Email       string
	Phone       string
	IDOwner     string
	CreatedAt   string
}{
	ID:          "studios.id",
	Name:        "studios.name",
	Username:    "studios.username",
	IDAvatar:    "studios.id_avatar",
	IDBanner:    "studios.id_banner",
	Description: "studios.description",
	FullAddress: "studios.full_address",
	Email:       "studios.email",
	Phone:       "studios.phone",
	IDOwner:     "studios.id_owner",
	CreatedAt:   "studios.created_at",
}

// Generated where

var StudioWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	Username    whereHelperstring
	IDAvatar    whereHelpernull_Int64
	IDBanner    whereHelpernull_Int64
	Description whereHelpernull_String
	FullAddress whereHelperstring
	Email       whereHelperstring
	Phone       whereHelpernull_String
	IDOwner     whereHelperint64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"studios\".\"id\""},
	Name:        whereHelperstring{field: "\"studios\".\"name\""},
	Username:    whereHelperstring{field: "\"studios\".\"username\""},
	IDAvatar:    whereHelpernull_Int64{field: "\"studios\".\"id_avatar\""},
	IDBanner:    whereHelpernull_Int64{field: "\"studios\".\"id_banner\""},
	Description: whereHelpernull_String{field: "\"studios\".\"description\""},
	FullAddress: whereHelperstring{field: "\"studios\".\"full_address\""},
	Email:       whereHelperstring{field: "\"studios\".\"email\""},
	Phone:       whereHelpernull_String{field: "\"studios\".\"phone\""},
	IDOwner:     whereHelperint64{field: "\"studios\".\"id_owner\""},
	CreatedAt:   whereHelpertime_Time{field: "\"studios\".\"created_at\""},
}

// StudioRels is where relationship names are stored.
var StudioRels = struct {
	IDAvatarImage        string
	IDBannerImage        string
	IDOwnerUser          string
	IDStudioAppointments string
	IDStudioFollows      string
	IDStudioLinks        string
	IDStudioPosts        string
	IDStudioStudioUsers  string
	IDStudioTattoos      string
}{
	IDAvatarImage:        "IDAvatarImage",
	IDBannerImage:        "IDBannerImage",
	IDOwnerUser:          "IDOwnerUser",
	IDStudioAppointments: "IDStudioAppointments",
	IDStudioFollows:      "IDStudioFollows",
	IDStudioLinks:        "IDStudioLinks",
	IDStudioPosts:        "IDStudioPosts",
	IDStudioStudioUsers:  "IDStudioStudioUsers",
	IDStudioTattoos:      "IDStudioTattoos",
}

// studioR is where relationships are stored.
type studioR struct {
	IDAvatarImage        *Image           `boil:"IDAvatarImage" json:"IDAvatarImage" toml:"IDAvatarImage" yaml:"IDAvatarImage"`
	IDBannerImage        *Image           `boil:"IDBannerImage" json:"IDBannerImage" toml:"IDBannerImage" yaml:"IDBannerImage"`
	IDOwnerUser          *User            `boil:"IDOwnerUser" json:"IDOwnerUser" toml:"IDOwnerUser" yaml:"IDOwnerUser"`
	IDStudioAppointments AppointmentSlice `boil:"IDStudioAppointments" json:"IDStudioAppointments" toml:"IDStudioAppointments" yaml:"IDStudioAppointments"`
	IDStudioFollows      FollowSlice      `boil:"IDStudioFollows" json:"IDStudioFollows" toml:"IDStudioFollows" yaml:"IDStudioFollows"`
	IDStudioLinks        LinkSlice        `boil:"IDStudioLinks" json:"IDStudioLinks" toml:"IDStudioLinks" yaml:"IDStudioLinks"`
	IDStudioPosts        PostSlice        `boil:"IDStudioPosts" json:"IDStudioPosts" toml:"IDStudioPosts" yaml:"IDStudioPosts"`
	IDStudioStudioUsers  StudioUserSlice  `boil:"IDStudioStudioUsers" json:"IDStudioStudioUsers" toml:"IDStudioStudioUsers" yaml:"IDStudioStudioUsers"`
	IDStudioTattoos      TattooSlice      `boil:"IDStudioTattoos" json:"IDStudioTattoos" toml:"IDStudioTattoos" yaml:"IDStudioTattoos"`
}

// NewStruct creates a new relationship struct
func (*studioR) NewStruct() *studioR {
	return &studioR{}
}

func (o *Studio) GetIDAvatarImage() *Image {
	if o == nil {
		return nil
	}

	return o.R.GetIDAvatarImage()
}

func (r *studioR) GetIDAvatarImage() *Image {
	if r == nil {
		return nil
	}

	return r.IDAvatarImage
}

func (o *Studio) GetIDBannerImage() *Image {
	if o == nil {
		return nil
	}

	return o.R.GetIDBannerImage()
}

func (r *studioR) GetIDBannerImage() *Image {
	if r == nil {
		return nil
	}

	return r.IDBannerImage
}

func (o *Studio) GetIDOwnerUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDOwnerUser()
}

func (r *studioR) GetIDOwnerUser() *User {
	if r == nil {
		return nil
	}

	return r.IDOwnerUser
}

func (o *Studio) GetIDStudioAppointments() AppointmentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioAppointments()
}

func (r *studioR) GetIDStudioAppointments() AppointmentSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioAppointments
}

func (o *Studio) GetIDStudioFollows() FollowSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioFollows()
}

func (r *studioR) GetIDStudioFollows() FollowSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioFollows
}

func (o *Studio) GetIDStudioLinks() LinkSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioLinks()
}

func (r *studioR) GetIDStudioLinks() LinkSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioLinks
}

func (o *Studio) GetIDStudioPosts() PostSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioPosts()
}

func (r *studioR) GetIDStudioPosts() PostSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioPosts
}

func (o *Studio) GetIDStudioStudioUsers() StudioUserSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudioUsers()
}

func (r *studioR) GetIDStudioStudioUsers() StudioUserSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioStudioUsers
}

func (o *Studio) GetIDStudioTattoos() TattooSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioTattoos()
}

func (r *studioR) GetIDStudioTattoos() TattooSlice {
	if r == nil {
		return nil
	}

	return r.IDStudioTattoos
}

// studioL is where Load methods for each relationship are stored.
type studioL struct{}

var (
	studioAllColumns            = []string{"id", "name", "username", "id_avatar", "id_banner", "description", "full_address", "email", "phone", "id_owner", "created_at"}
	studioColumnsWithoutDefault = []string{"name", "username", "full_address", "email", "id_owner"}
	studioColumnsWithDefault    = []string{"id", "id_avatar", "id_banner", "description", "phone", "created_at"}
	studioPrimaryKeyColumns     = []string{"id"}
	studioGeneratedColumns      = []string{}
)

type (
	// StudioSlice is an alias for a slice of pointers to Studio.
	// This should almost always be used instead of []Studio.
	StudioSlice []*Studio
	// StudioHook is the signature for custom Studio hook methods
	StudioHook func(context.Context, boil.ContextExecutor, *Studio) error

	studioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studioType                 = reflect.TypeOf(&Studio{})
	studioMapping              = queries.MakeStructMapping(studioType)
	studioPrimaryKeyMapping, _ = queries.BindMapping(studioType, studioMapping, studioPrimaryKeyColumns)
	studioInsertCacheMut       sync.RWMutex
	studioInsertCache          = make(map[string]insertCache)
	studioUpdateCacheMut       sync.RWMutex
	studioUpdateCache          = make(map[string]updateCache)
	studioUpsertCacheMut       sync.RWMutex
	studioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var studioAfterSelectMu sync.Mutex
var studioAfterSelectHooks []StudioHook

var studioBeforeInsertMu sync.Mutex
var studioBeforeInsertHooks []StudioHook
var studioAfterInsertMu sync.Mutex
var studioAfterInsertHooks []StudioHook

var studioBeforeUpdateMu sync.Mutex
var studioBeforeUpdateHooks []StudioHook
var studioAfterUpdateMu sync.Mutex
var studioAfterUpdateHooks []StudioHook

var studioBeforeDeleteMu sync.Mutex
var studioBeforeDeleteHooks []StudioHook
var studioAfterDeleteMu sync.Mutex
var studioAfterDeleteHooks []StudioHook

var studioBeforeUpsertMu sync.Mutex
var studioBeforeUpsertHooks []StudioHook
var studioAfterUpsertMu sync.Mutex
var studioAfterUpsertHooks []StudioHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Studio) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Studio) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Studio) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Studio) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Studio) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Studio) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Studio) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Studio) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Studio) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudioHook registers your hook function for all future operations.
func AddStudioHook(hookPoint boil.HookPoint, studioHook StudioHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		studioAfterSelectMu.Lock()
		studioAfterSelectHooks = append(studioAfterSelectHooks, studioHook)
		studioAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		studioBeforeInsertMu.Lock()
		studioBeforeInsertHooks = append(studioBeforeInsertHooks, studioHook)
		studioBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		studioAfterInsertMu.Lock()
		studioAfterInsertHooks = append(studioAfterInsertHooks, studioHook)
		studioAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		studioBeforeUpdateMu.Lock()
		studioBeforeUpdateHooks = append(studioBeforeUpdateHooks, studioHook)
		studioBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		studioAfterUpdateMu.Lock()
		studioAfterUpdateHooks = append(studioAfterUpdateHooks, studioHook)
		studioAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		studioBeforeDeleteMu.Lock()
		studioBeforeDeleteHooks = append(studioBeforeDeleteHooks, studioHook)
		studioBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		studioAfterDeleteMu.Lock()
		studioAfterDeleteHooks = append(studioAfterDeleteHooks, studioHook)
		studioAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		studioBeforeUpsertMu.Lock()
		studioBeforeUpsertHooks = append(studioBeforeUpsertHooks, studioHook)
		studioBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		studioAfterUpsertMu.Lock()
		studioAfterUpsertHooks = append(studioAfterUpsertHooks, studioHook)
		studioAfterUpsertMu.Unlock()
	}
}

// One returns a single studio record from the query.
func (q studioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Studio, error) {
	o := &Studio{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for studios")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Studio records from the query.
func (q studioQuery) All(ctx context.Context, exec boil.ContextExecutor) (StudioSlice, error) {
	var o []*Studio

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Studio slice")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Studio records in the query.
func (q studioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count studios rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q studioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if studios exists")
	}

	return count > 0, nil
}

// IDAvatarImage pointed to by the foreign key.
func (o *Studio) IDAvatarImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDAvatar),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// IDBannerImage pointed to by the foreign key.
func (o *Studio) IDBannerImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDBanner),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// IDOwnerUser pointed to by the foreign key.
func (o *Studio) IDOwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDOwner),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDStudioAppointments retrieves all the appointment's Appointments with an executor via id_studio column.
func (o *Studio) IDStudioAppointments(mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"appointments\".\"id_studio\"=?", o.ID),
	)

	return Appointments(queryMods...)
}

// IDStudioFollows retrieves all the follow's Follows with an executor via id_studio column.
func (o *Studio) IDStudioFollows(mods ...qm.QueryMod) followQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follows\".\"id_studio\"=?", o.ID),
	)

	return Follows(queryMods...)
}

// IDStudioLinks retrieves all the link's Links with an executor via id_studio column.
func (o *Studio) IDStudioLinks(mods ...qm.QueryMod) linkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"links\".\"id_studio\"=?", o.ID),
	)

	return Links(queryMods...)
}

// IDStudioPosts retrieves all the post's Posts with an executor via id_studio column.
func (o *Studio) IDStudioPosts(mods ...qm.QueryMod) postQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"posts\".\"id_studio\"=?", o.ID),
	)

	return Posts(queryMods...)
}

// IDStudioStudioUsers retrieves all the studio_user's StudioUsers with an executor via id_studio column.
func (o *Studio) IDStudioStudioUsers(mods ...qm.QueryMod) studioUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"studio_users\".\"id_studio\"=?", o.ID),
	)

	return StudioUsers(queryMods...)
}

// IDStudioTattoos retrieves all the tattoo's Tattoos with an executor via id_studio column.
func (o *Studio) IDStudioTattoos(mods ...qm.QueryMod) tattooQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tattoos\".\"id_studio\"=?", o.ID),
	)

	return Tattoos(queryMods...)
}

// LoadIDAvatarImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioL) LoadIDAvatarImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		if !queries.IsNil(object.IDAvatar) {
			args[object.IDAvatar] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}

			if !queries.IsNil(obj.IDAvatar) {
				args[obj.IDAvatar] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDAvatarImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDAvatarStudio = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDAvatar, foreign.ID) {
				local.R.IDAvatarImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDAvatarStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDBannerImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioL) LoadIDBannerImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		if !queries.IsNil(object.IDBanner) {
			args[object.IDBanner] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}

			if !queries.IsNil(obj.IDBanner) {
				args[obj.IDBanner] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDBannerImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDBannerStudio = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDBanner, foreign.ID) {
				local.R.IDBannerImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDBannerStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioL) LoadIDOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.IDOwner] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}

			args[obj.IDOwner] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDOwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDOwnerStudios = append(foreign.R.IDOwnerStudios, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDOwner == foreign.ID {
				local.R.IDOwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDOwnerStudios = append(foreign.R.IDOwnerStudios, local)
				break
			}
		}
	}

	return nil
}

// LoadIDStudioAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioAppointments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`appointments`),
		qm.WhereIn(`appointments.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointments")
	}

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on appointments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioAppointments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appointmentR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDStudio) {
				local.R.IDStudioAppointments = append(local.R.IDStudioAppointments, foreign)
				if foreign.R == nil {
					foreign.R = &appointmentR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDStudioFollows allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioFollows(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`follows`),
		qm.WhereIn(`follows.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follows")
	}

	var resultSlice []*Follow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follows")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follows")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioFollows = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDStudio) {
				local.R.IDStudioFollows = append(local.R.IDStudioFollows, foreign)
				if foreign.R == nil {
					foreign.R = &followR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDStudioLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`links`),
		qm.WhereIn(`links.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load links")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(linkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &linkR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDStudio) {
				local.R.IDStudioLinks = append(local.R.IDStudioLinks, foreign)
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDStudioPosts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioPosts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load posts")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice posts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioPosts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &postR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDStudio) {
				local.R.IDStudioPosts = append(local.R.IDStudioPosts, foreign)
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDStudioStudioUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioStudioUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studio_users`),
		qm.WhereIn(`studio_users.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load studio_users")
	}

	var resultSlice []*StudioUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice studio_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on studio_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studio_users")
	}

	if len(studioUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioStudioUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studioUserR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDStudio {
				local.R.IDStudioStudioUsers = append(local.R.IDStudioStudioUsers, foreign)
				if foreign.R == nil {
					foreign.R = &studioUserR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// LoadIDStudioTattoos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioL) LoadIDStudioTattoos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudio interface{}, mods queries.Applicator) error {
	var slice []*Studio
	var object *Studio

	if singular {
		var ok bool
		object, ok = maybeStudio.(*Studio)
		if !ok {
			object = new(Studio)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudio))
			}
		}
	} else {
		s, ok := maybeStudio.(*[]*Studio)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudio)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudio))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tattoos`),
		qm.WhereIn(`tattoos.id_studio in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tattoos")
	}

	var resultSlice []*Tattoo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tattoos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tattoos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tattoos")
	}

	if len(tattooAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStudioTattoos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tattooR{}
			}
			foreign.R.IDStudioStudio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDStudio) {
				local.R.IDStudioTattoos = append(local.R.IDStudioTattoos, foreign)
				if foreign.R == nil {
					foreign.R = &tattooR{}
				}
				foreign.R.IDStudioStudio = local
				break
			}
		}
	}

	return nil
}

// SetIDAvatarImage of the studio to the related item.
// Sets o.R.IDAvatarImage to related.
// Adds o to related.R.IDAvatarStudio.
func (o *Studio) SetIDAvatarImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studios\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_avatar"}),
		strmangle.WhereClause("\"", "\"", 2, studioPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDAvatar, related.ID)
	if o.R == nil {
		o.R = &studioR{
			IDAvatarImage: related,
		}
	} else {
		o.R.IDAvatarImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDAvatarStudio: o,
		}
	} else {
		related.R.IDAvatarStudio = o
	}

	return nil
}

// RemoveIDAvatarImage relationship.
// Sets o.R.IDAvatarImage to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Studio) RemoveIDAvatarImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.IDAvatar, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_avatar")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDAvatarImage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.IDAvatarStudio = nil
	return nil
}

// SetIDBannerImage of the studio to the related item.
// Sets o.R.IDBannerImage to related.
// Adds o to related.R.IDBannerStudio.
func (o *Studio) SetIDBannerImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studios\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_banner"}),
		strmangle.WhereClause("\"", "\"", 2, studioPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDBanner, related.ID)
	if o.R == nil {
		o.R = &studioR{
			IDBannerImage: related,
		}
	} else {
		o.R.IDBannerImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDBannerStudio: o,
		}
	} else {
		related.R.IDBannerStudio = o
	}

	return nil
}

// RemoveIDBannerImage relationship.
// Sets o.R.IDBannerImage to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Studio) RemoveIDBannerImage(ctx context.Context, exec boil.ContextExecutor, related *Image) error {
	var err error

	queries.SetScanner(&o.IDBanner, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_banner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDBannerImage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.IDBannerStudio = nil
	return nil
}

// SetIDOwnerUser of the studio to the related item.
// Sets o.R.IDOwnerUser to related.
// Adds o to related.R.IDOwnerStudios.
func (o *Studio) SetIDOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studios\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_owner"}),
		strmangle.WhereClause("\"", "\"", 2, studioPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDOwner = related.ID
	if o.R == nil {
		o.R = &studioR{
			IDOwnerUser: related,
		}
	} else {
		o.R.IDOwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDOwnerStudios: StudioSlice{o},
		}
	} else {
		related.R.IDOwnerStudios = append(related.R.IDOwnerStudios, o)
	}

	return nil
}

// AddIDStudioAppointments adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioAppointments.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDStudio, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"appointments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDStudio, o.ID)
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioAppointments: related,
		}
	} else {
		o.R.IDStudioAppointments = append(o.R.IDStudioAppointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// SetIDStudioAppointments removes all previously related items of the
// studio replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDStudioStudio's IDStudioAppointments accordingly.
// Replaces o.R.IDStudioAppointments with related.
// Sets related.R.IDStudioStudio's IDStudioAppointments accordingly.
func (o *Studio) SetIDStudioAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	query := "update \"appointments\" set \"id_studio\" = null where \"id_studio\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDStudioAppointments {
			queries.SetScanner(&rel.IDStudio, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDStudioStudio = nil
		}
		o.R.IDStudioAppointments = nil
	}

	return o.AddIDStudioAppointments(ctx, exec, insert, related...)
}

// RemoveIDStudioAppointments relationships from objects passed in.
// Removes related items from R.IDStudioAppointments (uses pointer comparison, removal does not keep order)
// Sets related.R.IDStudioStudio.
func (o *Studio) RemoveIDStudioAppointments(ctx context.Context, exec boil.ContextExecutor, related ...*Appointment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDStudio, nil)
		if rel.R != nil {
			rel.R.IDStudioStudio = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDStudioAppointments {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDStudioAppointments)
			if ln > 1 && i < ln-1 {
				o.R.IDStudioAppointments[i] = o.R.IDStudioAppointments[ln-1]
			}
			o.R.IDStudioAppointments = o.R.IDStudioAppointments[:ln-1]
			break
		}
	}

	return nil
}

// AddIDStudioFollows adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioFollows.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDStudio, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follows\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDStudio, o.ID)
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioFollows: related,
		}
	} else {
		o.R.IDStudioFollows = append(o.R.IDStudioFollows, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// SetIDStudioFollows removes all previously related items of the
// studio replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDStudioStudio's IDStudioFollows accordingly.
// Replaces o.R.IDStudioFollows with related.
// Sets related.R.IDStudioStudio's IDStudioFollows accordingly.
func (o *Studio) SetIDStudioFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	query := "update \"follows\" set \"id_studio\" = null where \"id_studio\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDStudioFollows {
			queries.SetScanner(&rel.IDStudio, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDStudioStudio = nil
		}
		o.R.IDStudioFollows = nil
	}

	return o.AddIDStudioFollows(ctx, exec, insert, related...)
}

// RemoveIDStudioFollows relationships from objects passed in.
// Removes related items from R.IDStudioFollows (uses pointer comparison, removal does not keep order)
// Sets related.R.IDStudioStudio.
func (o *Studio) RemoveIDStudioFollows(ctx context.Context, exec boil.ContextExecutor, related ...*Follow) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDStudio, nil)
		if rel.R != nil {
			rel.R.IDStudioStudio = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDStudioFollows {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDStudioFollows)
			if ln > 1 && i < ln-1 {
				o.R.IDStudioFollows[i] = o.R.IDStudioFollows[ln-1]
			}
			o.R.IDStudioFollows = o.R.IDStudioFollows[:ln-1]
			break
		}
	}

	return nil
}

// AddIDStudioLinks adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioLinks.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDStudio, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, linkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDStudio, o.ID)
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioLinks: related,
		}
	} else {
		o.R.IDStudioLinks = append(o.R.IDStudioLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &linkR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// SetIDStudioLinks removes all previously related items of the
// studio replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDStudioStudio's IDStudioLinks accordingly.
// Replaces o.R.IDStudioLinks with related.
// Sets related.R.IDStudioStudio's IDStudioLinks accordingly.
func (o *Studio) SetIDStudioLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	query := "update \"links\" set \"id_studio\" = null where \"id_studio\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDStudioLinks {
			queries.SetScanner(&rel.IDStudio, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDStudioStudio = nil
		}
		o.R.IDStudioLinks = nil
	}

	return o.AddIDStudioLinks(ctx, exec, insert, related...)
}

// RemoveIDStudioLinks relationships from objects passed in.
// Removes related items from R.IDStudioLinks (uses pointer comparison, removal does not keep order)
// Sets related.R.IDStudioStudio.
func (o *Studio) RemoveIDStudioLinks(ctx context.Context, exec boil.ContextExecutor, related ...*Link) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDStudio, nil)
		if rel.R != nil {
			rel.R.IDStudioStudio = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDStudioLinks {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDStudioLinks)
			if ln > 1 && i < ln-1 {
				o.R.IDStudioLinks[i] = o.R.IDStudioLinks[ln-1]
			}
			o.R.IDStudioLinks = o.R.IDStudioLinks[:ln-1]
			break
		}
	}

	return nil
}

// AddIDStudioPosts adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioPosts.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDStudio, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"posts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, postPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDStudio, o.ID)
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioPosts: related,
		}
	} else {
		o.R.IDStudioPosts = append(o.R.IDStudioPosts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &postR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// SetIDStudioPosts removes all previously related items of the
// studio replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDStudioStudio's IDStudioPosts accordingly.
// Replaces o.R.IDStudioPosts with related.
// Sets related.R.IDStudioStudio's IDStudioPosts accordingly.
func (o *Studio) SetIDStudioPosts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Post) error {
	query := "update \"posts\" set \"id_studio\" = null where \"id_studio\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDStudioPosts {
			queries.SetScanner(&rel.IDStudio, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDStudioStudio = nil
		}
		o.R.IDStudioPosts = nil
	}

	return o.AddIDStudioPosts(ctx, exec, insert, related...)
}

// RemoveIDStudioPosts relationships from objects passed in.
// Removes related items from R.IDStudioPosts (uses pointer comparison, removal does not keep order)
// Sets related.R.IDStudioStudio.
func (o *Studio) RemoveIDStudioPosts(ctx context.Context, exec boil.ContextExecutor, related ...*Post) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDStudio, nil)
		if rel.R != nil {
			rel.R.IDStudioStudio = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDStudioPosts {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDStudioPosts)
			if ln > 1 && i < ln-1 {
				o.R.IDStudioPosts[i] = o.R.IDStudioPosts[ln-1]
			}
			o.R.IDStudioPosts = o.R.IDStudioPosts[:ln-1]
			break
		}
	}

	return nil
}

// AddIDStudioStudioUsers adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioStudioUsers.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioStudioUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StudioUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDStudio = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"studio_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, studioUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDStudio = o.ID
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioStudioUsers: related,
		}
	} else {
		o.R.IDStudioStudioUsers = append(o.R.IDStudioStudioUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studioUserR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// AddIDStudioTattoos adds the given related objects to the existing relationships
// of the studio, optionally inserting them as new records.
// Appends related to o.R.IDStudioTattoos.
// Sets related.R.IDStudioStudio appropriately.
func (o *Studio) AddIDStudioTattoos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tattoo) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDStudio, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tattoos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
				strmangle.WhereClause("\"", "\"", 2, tattooPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDStudio, o.ID)
		}
	}

	if o.R == nil {
		o.R = &studioR{
			IDStudioTattoos: related,
		}
	} else {
		o.R.IDStudioTattoos = append(o.R.IDStudioTattoos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tattooR{
				IDStudioStudio: o,
			}
		} else {
			rel.R.IDStudioStudio = o
		}
	}
	return nil
}

// SetIDStudioTattoos removes all previously related items of the
// studio replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDStudioStudio's IDStudioTattoos accordingly.
// Replaces o.R.IDStudioTattoos with related.
// Sets related.R.IDStudioStudio's IDStudioTattoos accordingly.
func (o *Studio) SetIDStudioTattoos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tattoo) error {
	query := "update \"tattoos\" set \"id_studio\" = null where \"id_studio\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDStudioTattoos {
			queries.SetScanner(&rel.IDStudio, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDStudioStudio = nil
		}
		o.R.IDStudioTattoos = nil
	}

	return o.AddIDStudioTattoos(ctx, exec, insert, related...)
}

// RemoveIDStudioTattoos relationships from objects passed in.
// Removes related items from R.IDStudioTattoos (uses pointer comparison, removal does not keep order)
// Sets related.R.IDStudioStudio.
func (o *Studio) RemoveIDStudioTattoos(ctx context.Context, exec boil.ContextExecutor, related ...*Tattoo) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDStudio, nil)
		if rel.R != nil {
			rel.R.IDStudioStudio = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDStudioTattoos {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDStudioTattoos)
			if ln > 1 && i < ln-1 {
				o.R.IDStudioTattoos[i] = o.R.IDStudioTattoos[ln-1]
			}
			o.R.IDStudioTattoos = o.R.IDStudioTattoos[:ln-1]
			break
		}
	}

	return nil
}

// Studios retrieves all the records using an executor.
func Studios(mods ...qm.QueryMod) studioQuery {
	mods = append(mods, qm.From("\"studios\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"studios\".*"})
	}

	return studioQuery{q}
}

// FindStudio retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudio(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Studio, error) {
	studioObj := &Studio{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"studios\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, studioObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from studios")
	}

	if err = studioObj.doAfterSelectHooks(ctx, exec); err != nil {
		return studioObj, err
	}

	return studioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Studio) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no studios provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	studioInsertCacheMut.RLock()
	cache, cached := studioInsertCache[key]
	studioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			studioAllColumns,
			studioColumnsWithDefault,
			studioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(studioType, studioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studioType, studioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"studios\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"studios\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into studios")
	}

	if !cached {
		studioInsertCacheMut.Lock()
		studioInsertCache[key] = cache
		studioInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Studio.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Studio) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	studioUpdateCacheMut.RLock()
	cache, cached := studioUpdateCache[key]
	studioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			studioAllColumns,
			studioPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update studios, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"studios\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studioType, studioMapping, append(wl, studioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update studios row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for studios")
	}

	if !cached {
		studioUpdateCacheMut.Lock()
		studioUpdateCache[key] = cache
		studioUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q studioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for studios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for studios")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"studios\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studioPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in studio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all studio")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Studio) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no studios provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studioUpsertCacheMut.RLock()
	cache, cached := studioUpsertCache[key]
	studioUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			studioAllColumns,
			studioColumnsWithDefault,
			studioColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			studioAllColumns,
			studioPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert studios, could not build update column list")
		}

		ret := strmangle.SetComplement(studioAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(studioPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert studios, could not build conflict column list")
			}

			conflict = make([]string, len(studioPrimaryKeyColumns))
			copy(conflict, studioPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"studios\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(studioType, studioMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studioType, studioMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert studios")
	}

	if !cached {
		studioUpsertCacheMut.Lock()
		studioUpsertCache[key] = cache
		studioUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Studio record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Studio) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Studio provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studioPrimaryKeyMapping)
	sql := "DELETE FROM \"studios\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from studios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for studios")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q studioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no studioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studios")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studios")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(studioBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"studios\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studios")
	}

	if len(studioAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Studio) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStudio(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StudioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"studios\".* FROM \"studios\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudioSlice")
	}

	*o = slice

	return nil
}

// StudioExists checks if the Studio row exists.
func StudioExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"studios\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if studios exists")
	}

	return exists, nil
}

// Exists checks if the Studio row exists.
func (o *Studio) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StudioExists(ctx, exec, o.ID)
}
