// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShares(t *testing.T) {
	t.Parallel()

	query := Shares()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSharesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSharesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Shares().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSharesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShareSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSharesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShareExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Share exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShareExists to return true, but got false.")
	}
}

func testSharesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shareFound, err := FindShare(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shareFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSharesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Shares().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSharesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Shares().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSharesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shareOne := &Share{}
	shareTwo := &Share{}
	if err = randomize.Struct(seed, shareOne, shareDBTypes, false, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}
	if err = randomize.Struct(seed, shareTwo, shareDBTypes, false, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shareOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shareTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Shares().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSharesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shareOne := &Share{}
	shareTwo := &Share{}
	if err = randomize.Struct(seed, shareOne, shareDBTypes, false, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}
	if err = randomize.Struct(seed, shareTwo, shareDBTypes, false, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shareOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shareTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shareBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func shareAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Share) error {
	*o = Share{}
	return nil
}

func testSharesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Share{}
	o := &Share{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shareDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Share object: %s", err)
	}

	AddShareHook(boil.BeforeInsertHook, shareBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shareBeforeInsertHooks = []ShareHook{}

	AddShareHook(boil.AfterInsertHook, shareAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shareAfterInsertHooks = []ShareHook{}

	AddShareHook(boil.AfterSelectHook, shareAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shareAfterSelectHooks = []ShareHook{}

	AddShareHook(boil.BeforeUpdateHook, shareBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shareBeforeUpdateHooks = []ShareHook{}

	AddShareHook(boil.AfterUpdateHook, shareAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shareAfterUpdateHooks = []ShareHook{}

	AddShareHook(boil.BeforeDeleteHook, shareBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shareBeforeDeleteHooks = []ShareHook{}

	AddShareHook(boil.AfterDeleteHook, shareAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shareAfterDeleteHooks = []ShareHook{}

	AddShareHook(boil.BeforeUpsertHook, shareBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shareBeforeUpsertHooks = []ShareHook{}

	AddShareHook(boil.AfterUpsertHook, shareAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shareAfterUpsertHooks = []ShareHook{}
}

func testSharesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSharesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(sharePrimaryKeyColumns, shareColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShareToOnePostUsingIDPostPost(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Share
	var foreign Post

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shareDBTypes, false, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Post struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDPost = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDPostPost().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPostHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Post) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShareSlice{&local}
	if err = local.L.LoadIDPostPost(ctx, tx, false, (*[]*Share)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDPostPost == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDPostPost = nil
	if err = local.L.LoadIDPostPost(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDPostPost == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShareToOneUserUsingIDUserUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Share
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shareDBTypes, false, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDUser = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDUserUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShareSlice{&local}
	if err = local.L.LoadIDUserUser(ctx, tx, false, (*[]*Share)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDUserUser = nil
	if err = local.L.LoadIDUserUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShareToOneSetOpPostUsingIDPostPost(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Share
	var b, c Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shareDBTypes, false, strmangle.SetComplement(sharePrimaryKeyColumns, shareColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Post{&b, &c} {
		err = a.SetIDPostPost(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDPostPost != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDPostShares[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDPost != x.ID {
			t.Error("foreign key was wrong value", a.IDPost)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDPost))
		reflect.Indirect(reflect.ValueOf(&a.IDPost)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDPost != x.ID {
			t.Error("foreign key was wrong value", a.IDPost, x.ID)
		}
	}
}
func testShareToOneSetOpUserUsingIDUserUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Share
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shareDBTypes, false, strmangle.SetComplement(sharePrimaryKeyColumns, shareColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDUserUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDUserUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDUserShares[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDUser))
		reflect.Indirect(reflect.ValueOf(&a.IDUser)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser, x.ID)
		}
	}
}

func testSharesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSharesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShareSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSharesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Shares().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shareDBTypes = map[string]string{`ID`: `bigint`, `IDPost`: `bigint`, `IDUser`: `bigint`, `CreatedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testSharesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sharePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shareAllColumns) == len(sharePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shareDBTypes, true, sharePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSharesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shareAllColumns) == len(sharePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Share{}
	if err = randomize.Struct(seed, o, shareDBTypes, true, shareColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shareDBTypes, true, sharePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shareAllColumns, sharePrimaryKeyColumns) {
		fields = shareAllColumns
	} else {
		fields = strmangle.SetComplement(
			shareAllColumns,
			sharePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShareSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSharesUpsert(t *testing.T) {
	t.Parallel()

	if len(shareAllColumns) == len(sharePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Share{}
	if err = randomize.Struct(seed, &o, shareDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Share: %s", err)
	}

	count, err := Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shareDBTypes, false, sharePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Share struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Share: %s", err)
	}

	count, err = Shares().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
