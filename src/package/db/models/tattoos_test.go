// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTattoos(t *testing.T) {
	t.Parallel()

	query := Tattoos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTattoosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTattoosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tattoos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTattoosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TattooSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTattoosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TattooExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Tattoo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TattooExists to return true, but got false.")
	}
}

func testTattoosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tattooFound, err := FindTattoo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tattooFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTattoosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tattoos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTattoosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tattoos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTattoosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tattooOne := &Tattoo{}
	tattooTwo := &Tattoo{}
	if err = randomize.Struct(seed, tattooOne, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}
	if err = randomize.Struct(seed, tattooTwo, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tattooOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tattooTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tattoos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTattoosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tattooOne := &Tattoo{}
	tattooTwo := &Tattoo{}
	if err = randomize.Struct(seed, tattooOne, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}
	if err = randomize.Struct(seed, tattooTwo, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tattooOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tattooTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tattooBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func tattooAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tattoo) error {
	*o = Tattoo{}
	return nil
}

func testTattoosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Tattoo{}
	o := &Tattoo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tattooDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tattoo object: %s", err)
	}

	AddTattooHook(boil.BeforeInsertHook, tattooBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tattooBeforeInsertHooks = []TattooHook{}

	AddTattooHook(boil.AfterInsertHook, tattooAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tattooAfterInsertHooks = []TattooHook{}

	AddTattooHook(boil.AfterSelectHook, tattooAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tattooAfterSelectHooks = []TattooHook{}

	AddTattooHook(boil.BeforeUpdateHook, tattooBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tattooBeforeUpdateHooks = []TattooHook{}

	AddTattooHook(boil.AfterUpdateHook, tattooAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tattooAfterUpdateHooks = []TattooHook{}

	AddTattooHook(boil.BeforeDeleteHook, tattooBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tattooBeforeDeleteHooks = []TattooHook{}

	AddTattooHook(boil.AfterDeleteHook, tattooAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tattooAfterDeleteHooks = []TattooHook{}

	AddTattooHook(boil.BeforeUpsertHook, tattooBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tattooBeforeUpsertHooks = []TattooHook{}

	AddTattooHook(boil.AfterUpsertHook, tattooAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tattooAfterUpsertHooks = []TattooHook{}
}

func testTattoosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTattoosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTattooToOneImageUsingIDImageImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tattoo
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDImage = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDImageImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TattooSlice{&local}
	if err = local.L.LoadIDImageImage(ctx, tx, false, (*[]*Tattoo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDImageImage = nil
	if err = local.L.LoadIDImageImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTattooToOnePostUsingIDPostPost(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tattoo
	var foreign Post

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Post struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IDPost, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDPostPost().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPostHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Post) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TattooSlice{&local}
	if err = local.L.LoadIDPostPost(ctx, tx, false, (*[]*Tattoo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDPostPost == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDPostPost = nil
	if err = local.L.LoadIDPostPost(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDPostPost == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTattooToOneProfileUsingIDProfileProfile(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tattoo
	var foreign Profile

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, profileDBTypes, false, profileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Profile struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDProfile = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDProfileProfile().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProfileHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Profile) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TattooSlice{&local}
	if err = local.L.LoadIDProfileProfile(ctx, tx, false, (*[]*Tattoo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDProfileProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDProfileProfile = nil
	if err = local.L.LoadIDProfileProfile(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDProfileProfile == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTattooToOneSetOpImageUsingIDImageImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tattoo
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDImageImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDImageImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDImageTattoo != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDImage))
		reflect.Indirect(reflect.ValueOf(&a.IDImage)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage, x.ID)
		}
	}
}
func testTattooToOneSetOpPostUsingIDPostPost(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tattoo
	var b, c Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Post{&b, &c} {
		err = a.SetIDPostPost(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDPostPost != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDPostTattoos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IDPost, x.ID) {
			t.Error("foreign key was wrong value", a.IDPost)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDPost))
		reflect.Indirect(reflect.ValueOf(&a.IDPost)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IDPost, x.ID) {
			t.Error("foreign key was wrong value", a.IDPost, x.ID)
		}
	}
}

func testTattooToOneRemoveOpPostUsingIDPostPost(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tattoo
	var b Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIDPostPost(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIDPostPost(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.IDPostPost().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.IDPostPost != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IDPost) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.IDPostTattoos) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTattooToOneSetOpProfileUsingIDProfileProfile(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tattoo
	var b, c Profile

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, profileDBTypes, false, strmangle.SetComplement(profilePrimaryKeyColumns, profileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Profile{&b, &c} {
		err = a.SetIDProfileProfile(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDProfileProfile != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDProfileTattoos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDProfile != x.ID {
			t.Error("foreign key was wrong value", a.IDProfile)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDProfile))
		reflect.Indirect(reflect.ValueOf(&a.IDProfile)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDProfile != x.ID {
			t.Error("foreign key was wrong value", a.IDProfile, x.ID)
		}
	}
}

func testTattoosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTattoosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TattooSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTattoosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tattoos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tattooDBTypes = map[string]string{`ID`: `bigint`, `IDProfile`: `bigint`, `IDImage`: `bigint`, `Likes`: `integer`, `Description`: `text`, `Categories`: `ARRAY_text`, `CreatedAt`: `timestamp without time zone`, `Popularity`: `integer`, `IDPost`: `bigint`, `Views`: `integer`, `Coordinate`: `geometry`}
	_             = bytes.MinRead
)

func testTattoosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tattooPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tattooAllColumns) == len(tattooPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTattoosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tattooAllColumns) == len(tattooPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tattoo{}
	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tattooDBTypes, true, tattooPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tattooAllColumns, tattooPrimaryKeyColumns) {
		fields = tattooAllColumns
	} else {
		fields = strmangle.SetComplement(
			tattooAllColumns,
			tattooPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TattooSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTattoosUpsert(t *testing.T) {
	t.Parallel()

	if len(tattooAllColumns) == len(tattooPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Tattoo{}
	if err = randomize.Struct(seed, &o, tattooDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tattoo: %s", err)
	}

	count, err := Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tattooDBTypes, false, tattooPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tattoo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tattoo: %s", err)
	}

	count, err = Tattoos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
