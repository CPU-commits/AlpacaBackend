// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// View is an object representing the database table.
type View struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDPost    null.Int64  `boil:"id_post" json:"id_post,omitempty" toml:"id_post" yaml:"id_post,omitempty"`
	IDProfile null.Int64  `boil:"id_profile" json:"id_profile,omitempty" toml:"id_profile" yaml:"id_profile,omitempty"`
	IDLink    null.Int64  `boil:"id_link" json:"id_link,omitempty" toml:"id_link" yaml:"id_link,omitempty"`
	IDStudio  null.Int64  `boil:"id_studio" json:"id_studio,omitempty" toml:"id_studio" yaml:"id_studio,omitempty"`
	IDUser    null.Int64  `boil:"id_user" json:"id_user,omitempty" toml:"id_user" yaml:"id_user,omitempty"`
	Country   null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	City      null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Continent null.String `boil:"continent" json:"continent,omitempty" toml:"continent" yaml:"continent,omitempty"`
	Timezone  null.String `boil:"timezone" json:"timezone,omitempty" toml:"timezone" yaml:"timezone,omitempty"`
	Region    null.String `boil:"region" json:"region,omitempty" toml:"region" yaml:"region,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IDTattoo  null.Int64  `boil:"id_tattoo" json:"id_tattoo,omitempty" toml:"id_tattoo" yaml:"id_tattoo,omitempty"`

	R *viewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L viewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ViewColumns = struct {
	ID        string
	IDPost    string
	IDProfile string
	IDLink    string
	IDStudio  string
	IDUser    string
	Country   string
	City      string
	Continent string
	Timezone  string
	Region    string
	CreatedAt string
	IDTattoo  string
}{
	ID:        "id",
	IDPost:    "id_post",
	IDProfile: "id_profile",
	IDLink:    "id_link",
	IDStudio:  "id_studio",
	IDUser:    "id_user",
	Country:   "country",
	City:      "city",
	Continent: "continent",
	Timezone:  "timezone",
	Region:    "region",
	CreatedAt: "created_at",
	IDTattoo:  "id_tattoo",
}

var ViewTableColumns = struct {
	ID        string
	IDPost    string
	IDProfile string
	IDLink    string
	IDStudio  string
	IDUser    string
	Country   string
	City      string
	Continent string
	Timezone  string
	Region    string
	CreatedAt string
	IDTattoo  string
}{
	ID:        "views.id",
	IDPost:    "views.id_post",
	IDProfile: "views.id_profile",
	IDLink:    "views.id_link",
	IDStudio:  "views.id_studio",
	IDUser:    "views.id_user",
	Country:   "views.country",
	City:      "views.city",
	Continent: "views.continent",
	Timezone:  "views.timezone",
	Region:    "views.region",
	CreatedAt: "views.created_at",
	IDTattoo:  "views.id_tattoo",
}

// Generated where

var ViewWhere = struct {
	ID        whereHelperint64
	IDPost    whereHelpernull_Int64
	IDProfile whereHelpernull_Int64
	IDLink    whereHelpernull_Int64
	IDStudio  whereHelpernull_Int64
	IDUser    whereHelpernull_Int64
	Country   whereHelpernull_String
	City      whereHelpernull_String
	Continent whereHelpernull_String
	Timezone  whereHelpernull_String
	Region    whereHelpernull_String
	CreatedAt whereHelpertime_Time
	IDTattoo  whereHelpernull_Int64
}{
	ID:        whereHelperint64{field: "\"views\".\"id\""},
	IDPost:    whereHelpernull_Int64{field: "\"views\".\"id_post\""},
	IDProfile: whereHelpernull_Int64{field: "\"views\".\"id_profile\""},
	IDLink:    whereHelpernull_Int64{field: "\"views\".\"id_link\""},
	IDStudio:  whereHelpernull_Int64{field: "\"views\".\"id_studio\""},
	IDUser:    whereHelpernull_Int64{field: "\"views\".\"id_user\""},
	Country:   whereHelpernull_String{field: "\"views\".\"country\""},
	City:      whereHelpernull_String{field: "\"views\".\"city\""},
	Continent: whereHelpernull_String{field: "\"views\".\"continent\""},
	Timezone:  whereHelpernull_String{field: "\"views\".\"timezone\""},
	Region:    whereHelpernull_String{field: "\"views\".\"region\""},
	CreatedAt: whereHelpertime_Time{field: "\"views\".\"created_at\""},
	IDTattoo:  whereHelpernull_Int64{field: "\"views\".\"id_tattoo\""},
}

// ViewRels is where relationship names are stored.
var ViewRels = struct {
	IDLinkLink       string
	IDPostPost       string
	IDProfileProfile string
	IDStudioStudio   string
	IDTattooTattoo   string
	IDUserUser       string
}{
	IDLinkLink:       "IDLinkLink",
	IDPostPost:       "IDPostPost",
	IDProfileProfile: "IDProfileProfile",
	IDStudioStudio:   "IDStudioStudio",
	IDTattooTattoo:   "IDTattooTattoo",
	IDUserUser:       "IDUserUser",
}

// viewR is where relationships are stored.
type viewR struct {
	IDLinkLink       *Link    `boil:"IDLinkLink" json:"IDLinkLink" toml:"IDLinkLink" yaml:"IDLinkLink"`
	IDPostPost       *Post    `boil:"IDPostPost" json:"IDPostPost" toml:"IDPostPost" yaml:"IDPostPost"`
	IDProfileProfile *Profile `boil:"IDProfileProfile" json:"IDProfileProfile" toml:"IDProfileProfile" yaml:"IDProfileProfile"`
	IDStudioStudio   *Studio  `boil:"IDStudioStudio" json:"IDStudioStudio" toml:"IDStudioStudio" yaml:"IDStudioStudio"`
	IDTattooTattoo   *Tattoo  `boil:"IDTattooTattoo" json:"IDTattooTattoo" toml:"IDTattooTattoo" yaml:"IDTattooTattoo"`
	IDUserUser       *User    `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
}

// NewStruct creates a new relationship struct
func (*viewR) NewStruct() *viewR {
	return &viewR{}
}

func (o *View) GetIDLinkLink() *Link {
	if o == nil {
		return nil
	}

	return o.R.GetIDLinkLink()
}

func (r *viewR) GetIDLinkLink() *Link {
	if r == nil {
		return nil
	}

	return r.IDLinkLink
}

func (o *View) GetIDPostPost() *Post {
	if o == nil {
		return nil
	}

	return o.R.GetIDPostPost()
}

func (r *viewR) GetIDPostPost() *Post {
	if r == nil {
		return nil
	}

	return r.IDPostPost
}

func (o *View) GetIDProfileProfile() *Profile {
	if o == nil {
		return nil
	}

	return o.R.GetIDProfileProfile()
}

func (r *viewR) GetIDProfileProfile() *Profile {
	if r == nil {
		return nil
	}

	return r.IDProfileProfile
}

func (o *View) GetIDStudioStudio() *Studio {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudio()
}

func (r *viewR) GetIDStudioStudio() *Studio {
	if r == nil {
		return nil
	}

	return r.IDStudioStudio
}

func (o *View) GetIDTattooTattoo() *Tattoo {
	if o == nil {
		return nil
	}

	return o.R.GetIDTattooTattoo()
}

func (r *viewR) GetIDTattooTattoo() *Tattoo {
	if r == nil {
		return nil
	}

	return r.IDTattooTattoo
}

func (o *View) GetIDUserUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserUser()
}

func (r *viewR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}

	return r.IDUserUser
}

// viewL is where Load methods for each relationship are stored.
type viewL struct{}

var (
	viewAllColumns            = []string{"id", "id_post", "id_profile", "id_link", "id_studio", "id_user", "country", "city", "continent", "timezone", "region", "created_at", "id_tattoo"}
	viewColumnsWithoutDefault = []string{}
	viewColumnsWithDefault    = []string{"id", "id_post", "id_profile", "id_link", "id_studio", "id_user", "country", "city", "continent", "timezone", "region", "created_at", "id_tattoo"}
	viewPrimaryKeyColumns     = []string{"id"}
	viewGeneratedColumns      = []string{}
)

type (
	// ViewSlice is an alias for a slice of pointers to View.
	// This should almost always be used instead of []View.
	ViewSlice []*View
	// ViewHook is the signature for custom View hook methods
	ViewHook func(context.Context, boil.ContextExecutor, *View) error

	viewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	viewType                 = reflect.TypeOf(&View{})
	viewMapping              = queries.MakeStructMapping(viewType)
	viewPrimaryKeyMapping, _ = queries.BindMapping(viewType, viewMapping, viewPrimaryKeyColumns)
	viewInsertCacheMut       sync.RWMutex
	viewInsertCache          = make(map[string]insertCache)
	viewUpdateCacheMut       sync.RWMutex
	viewUpdateCache          = make(map[string]updateCache)
	viewUpsertCacheMut       sync.RWMutex
	viewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var viewAfterSelectMu sync.Mutex
var viewAfterSelectHooks []ViewHook

var viewBeforeInsertMu sync.Mutex
var viewBeforeInsertHooks []ViewHook
var viewAfterInsertMu sync.Mutex
var viewAfterInsertHooks []ViewHook

var viewBeforeUpdateMu sync.Mutex
var viewBeforeUpdateHooks []ViewHook
var viewAfterUpdateMu sync.Mutex
var viewAfterUpdateHooks []ViewHook

var viewBeforeDeleteMu sync.Mutex
var viewBeforeDeleteHooks []ViewHook
var viewAfterDeleteMu sync.Mutex
var viewAfterDeleteHooks []ViewHook

var viewBeforeUpsertMu sync.Mutex
var viewBeforeUpsertHooks []ViewHook
var viewAfterUpsertMu sync.Mutex
var viewAfterUpsertHooks []ViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *View) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *View) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *View) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *View) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *View) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *View) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *View) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *View) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *View) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range viewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddViewHook registers your hook function for all future operations.
func AddViewHook(hookPoint boil.HookPoint, viewHook ViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		viewAfterSelectMu.Lock()
		viewAfterSelectHooks = append(viewAfterSelectHooks, viewHook)
		viewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		viewBeforeInsertMu.Lock()
		viewBeforeInsertHooks = append(viewBeforeInsertHooks, viewHook)
		viewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		viewAfterInsertMu.Lock()
		viewAfterInsertHooks = append(viewAfterInsertHooks, viewHook)
		viewAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		viewBeforeUpdateMu.Lock()
		viewBeforeUpdateHooks = append(viewBeforeUpdateHooks, viewHook)
		viewBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		viewAfterUpdateMu.Lock()
		viewAfterUpdateHooks = append(viewAfterUpdateHooks, viewHook)
		viewAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		viewBeforeDeleteMu.Lock()
		viewBeforeDeleteHooks = append(viewBeforeDeleteHooks, viewHook)
		viewBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		viewAfterDeleteMu.Lock()
		viewAfterDeleteHooks = append(viewAfterDeleteHooks, viewHook)
		viewAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		viewBeforeUpsertMu.Lock()
		viewBeforeUpsertHooks = append(viewBeforeUpsertHooks, viewHook)
		viewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		viewAfterUpsertMu.Lock()
		viewAfterUpsertHooks = append(viewAfterUpsertHooks, viewHook)
		viewAfterUpsertMu.Unlock()
	}
}

// One returns a single view record from the query.
func (q viewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*View, error) {
	o := &View{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for views")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all View records from the query.
func (q viewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ViewSlice, error) {
	var o []*View

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to View slice")
	}

	if len(viewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all View records in the query.
func (q viewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count views rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q viewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if views exists")
	}

	return count > 0, nil
}

// IDLinkLink pointed to by the foreign key.
func (o *View) IDLinkLink(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDLink),
	}

	queryMods = append(queryMods, mods...)

	return Links(queryMods...)
}

// IDPostPost pointed to by the foreign key.
func (o *View) IDPostPost(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPost),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// IDProfileProfile pointed to by the foreign key.
func (o *View) IDProfileProfile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProfile),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// IDStudioStudio pointed to by the foreign key.
func (o *View) IDStudioStudio(mods ...qm.QueryMod) studioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDStudio),
	}

	queryMods = append(queryMods, mods...)

	return Studios(queryMods...)
}

// IDTattooTattoo pointed to by the foreign key.
func (o *View) IDTattooTattoo(mods ...qm.QueryMod) tattooQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDTattoo),
	}

	queryMods = append(queryMods, mods...)

	return Tattoos(queryMods...)
}

// IDUserUser pointed to by the foreign key.
func (o *View) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadIDLinkLink allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadIDLinkLink(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		if !queries.IsNil(object.IDLink) {
			args[object.IDLink] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			if !queries.IsNil(obj.IDLink) {
				args[obj.IDLink] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`links`),
		qm.WhereIn(`links.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(linkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDLinkLink = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.IDLinkViews = append(foreign.R.IDLinkViews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDLink, foreign.ID) {
				local.R.IDLinkLink = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.IDLinkViews = append(foreign.R.IDLinkViews, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPostPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadIDPostPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		if !queries.IsNil(object.IDPost) {
			args[object.IDPost] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			if !queries.IsNil(obj.IDPost) {
				args[obj.IDPost] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPostPost = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.IDPostViews = append(foreign.R.IDPostViews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDPost, foreign.ID) {
				local.R.IDPostPost = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDPostViews = append(foreign.R.IDPostViews, local)
				break
			}
		}
	}

	return nil
}

// LoadIDProfileProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadIDProfileProfile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		if !queries.IsNil(object.IDProfile) {
			args[object.IDProfile] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			if !queries.IsNil(obj.IDProfile) {
				args[obj.IDProfile] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProfileProfile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.IDProfileViews = append(foreign.R.IDProfileViews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDProfile, foreign.ID) {
				local.R.IDProfileProfile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.IDProfileViews = append(foreign.R.IDProfileViews, local)
				break
			}
		}
	}

	return nil
}

// LoadIDStudioStudio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadIDStudioStudio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		if !queries.IsNil(object.IDStudio) {
			args[object.IDStudio] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			if !queries.IsNil(obj.IDStudio) {
				args[obj.IDStudio] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studios`),
		qm.WhereIn(`studios.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Studio")
	}

	var resultSlice []*Studio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Studio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for studios")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studios")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDStudioStudio = foreign
		if foreign.R == nil {
			foreign.R = &studioR{}
		}
		foreign.R.IDStudioViews = append(foreign.R.IDStudioViews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDStudio, foreign.ID) {
				local.R.IDStudioStudio = foreign
				if foreign.R == nil {
					foreign.R = &studioR{}
				}
				foreign.R.IDStudioViews = append(foreign.R.IDStudioViews, local)
				break
			}
		}
	}

	return nil
}

// LoadIDTattooTattoo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadIDTattooTattoo(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		if !queries.IsNil(object.IDTattoo) {
			args[object.IDTattoo] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			if !queries.IsNil(obj.IDTattoo) {
				args[obj.IDTattoo] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tattoos`),
		qm.WhereIn(`tattoos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tattoo")
	}

	var resultSlice []*Tattoo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tattoo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tattoos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tattoos")
	}

	if len(tattooAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDTattooTattoo = foreign
		if foreign.R == nil {
			foreign.R = &tattooR{}
		}
		foreign.R.IDTattooViews = append(foreign.R.IDTattooViews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDTattoo, foreign.ID) {
				local.R.IDTattooTattoo = foreign
				if foreign.R == nil {
					foreign.R = &tattooR{}
				}
				foreign.R.IDTattooViews = append(foreign.R.IDTattooViews, local)
				break
			}
		}
	}

	return nil
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (viewL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeView interface{}, mods queries.Applicator) error {
	var slice []*View
	var object *View

	if singular {
		var ok bool
		object, ok = maybeView.(*View)
		if !ok {
			object = new(View)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeView))
			}
		}
	} else {
		s, ok := maybeView.(*[]*View)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeView)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeView))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &viewR{}
		}
		if !queries.IsNil(object.IDUser) {
			args[object.IDUser] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &viewR{}
			}

			if !queries.IsNil(obj.IDUser) {
				args[obj.IDUser] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserViews = append(foreign.R.IDUserViews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDUser, foreign.ID) {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserViews = append(foreign.R.IDUserViews, local)
				break
			}
		}
	}

	return nil
}

// SetIDLinkLink of the view to the related item.
// Sets o.R.IDLinkLink to related.
// Adds o to related.R.IDLinkViews.
func (o *View) SetIDLinkLink(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_link"}),
		strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDLink, related.ID)
	if o.R == nil {
		o.R = &viewR{
			IDLinkLink: related,
		}
	} else {
		o.R.IDLinkLink = related
	}

	if related.R == nil {
		related.R = &linkR{
			IDLinkViews: ViewSlice{o},
		}
	} else {
		related.R.IDLinkViews = append(related.R.IDLinkViews, o)
	}

	return nil
}

// RemoveIDLinkLink relationship.
// Sets o.R.IDLinkLink to nil.
// Removes o from all passed in related items' relationships struct.
func (o *View) RemoveIDLinkLink(ctx context.Context, exec boil.ContextExecutor, related *Link) error {
	var err error

	queries.SetScanner(&o.IDLink, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_link")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDLinkLink = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDLinkViews {
		if queries.Equal(o.IDLink, ri.IDLink) {
			continue
		}

		ln := len(related.R.IDLinkViews)
		if ln > 1 && i < ln-1 {
			related.R.IDLinkViews[i] = related.R.IDLinkViews[ln-1]
		}
		related.R.IDLinkViews = related.R.IDLinkViews[:ln-1]
		break
	}
	return nil
}

// SetIDPostPost of the view to the related item.
// Sets o.R.IDPostPost to related.
// Adds o to related.R.IDPostViews.
func (o *View) SetIDPostPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_post"}),
		strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDPost, related.ID)
	if o.R == nil {
		o.R = &viewR{
			IDPostPost: related,
		}
	} else {
		o.R.IDPostPost = related
	}

	if related.R == nil {
		related.R = &postR{
			IDPostViews: ViewSlice{o},
		}
	} else {
		related.R.IDPostViews = append(related.R.IDPostViews, o)
	}

	return nil
}

// RemoveIDPostPost relationship.
// Sets o.R.IDPostPost to nil.
// Removes o from all passed in related items' relationships struct.
func (o *View) RemoveIDPostPost(ctx context.Context, exec boil.ContextExecutor, related *Post) error {
	var err error

	queries.SetScanner(&o.IDPost, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_post")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDPostPost = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDPostViews {
		if queries.Equal(o.IDPost, ri.IDPost) {
			continue
		}

		ln := len(related.R.IDPostViews)
		if ln > 1 && i < ln-1 {
			related.R.IDPostViews[i] = related.R.IDPostViews[ln-1]
		}
		related.R.IDPostViews = related.R.IDPostViews[:ln-1]
		break
	}
	return nil
}

// SetIDProfileProfile of the view to the related item.
// Sets o.R.IDProfileProfile to related.
// Adds o to related.R.IDProfileViews.
func (o *View) SetIDProfileProfile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
		strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDProfile, related.ID)
	if o.R == nil {
		o.R = &viewR{
			IDProfileProfile: related,
		}
	} else {
		o.R.IDProfileProfile = related
	}

	if related.R == nil {
		related.R = &profileR{
			IDProfileViews: ViewSlice{o},
		}
	} else {
		related.R.IDProfileViews = append(related.R.IDProfileViews, o)
	}

	return nil
}

// RemoveIDProfileProfile relationship.
// Sets o.R.IDProfileProfile to nil.
// Removes o from all passed in related items' relationships struct.
func (o *View) RemoveIDProfileProfile(ctx context.Context, exec boil.ContextExecutor, related *Profile) error {
	var err error

	queries.SetScanner(&o.IDProfile, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_profile")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDProfileProfile = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDProfileViews {
		if queries.Equal(o.IDProfile, ri.IDProfile) {
			continue
		}

		ln := len(related.R.IDProfileViews)
		if ln > 1 && i < ln-1 {
			related.R.IDProfileViews[i] = related.R.IDProfileViews[ln-1]
		}
		related.R.IDProfileViews = related.R.IDProfileViews[:ln-1]
		break
	}
	return nil
}

// SetIDStudioStudio of the view to the related item.
// Sets o.R.IDStudioStudio to related.
// Adds o to related.R.IDStudioViews.
func (o *View) SetIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Studio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
		strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDStudio, related.ID)
	if o.R == nil {
		o.R = &viewR{
			IDStudioStudio: related,
		}
	} else {
		o.R.IDStudioStudio = related
	}

	if related.R == nil {
		related.R = &studioR{
			IDStudioViews: ViewSlice{o},
		}
	} else {
		related.R.IDStudioViews = append(related.R.IDStudioViews, o)
	}

	return nil
}

// RemoveIDStudioStudio relationship.
// Sets o.R.IDStudioStudio to nil.
// Removes o from all passed in related items' relationships struct.
func (o *View) RemoveIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, related *Studio) error {
	var err error

	queries.SetScanner(&o.IDStudio, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_studio")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDStudioStudio = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDStudioViews {
		if queries.Equal(o.IDStudio, ri.IDStudio) {
			continue
		}

		ln := len(related.R.IDStudioViews)
		if ln > 1 && i < ln-1 {
			related.R.IDStudioViews[i] = related.R.IDStudioViews[ln-1]
		}
		related.R.IDStudioViews = related.R.IDStudioViews[:ln-1]
		break
	}
	return nil
}

// SetIDTattooTattoo of the view to the related item.
// Sets o.R.IDTattooTattoo to related.
// Adds o to related.R.IDTattooViews.
func (o *View) SetIDTattooTattoo(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tattoo) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_tattoo"}),
		strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDTattoo, related.ID)
	if o.R == nil {
		o.R = &viewR{
			IDTattooTattoo: related,
		}
	} else {
		o.R.IDTattooTattoo = related
	}

	if related.R == nil {
		related.R = &tattooR{
			IDTattooViews: ViewSlice{o},
		}
	} else {
		related.R.IDTattooViews = append(related.R.IDTattooViews, o)
	}

	return nil
}

// RemoveIDTattooTattoo relationship.
// Sets o.R.IDTattooTattoo to nil.
// Removes o from all passed in related items' relationships struct.
func (o *View) RemoveIDTattooTattoo(ctx context.Context, exec boil.ContextExecutor, related *Tattoo) error {
	var err error

	queries.SetScanner(&o.IDTattoo, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_tattoo")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDTattooTattoo = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDTattooViews {
		if queries.Equal(o.IDTattoo, ri.IDTattoo) {
			continue
		}

		ln := len(related.R.IDTattooViews)
		if ln > 1 && i < ln-1 {
			related.R.IDTattooViews[i] = related.R.IDTattooViews[ln-1]
		}
		related.R.IDTattooViews = related.R.IDTattooViews[:ln-1]
		break
	}
	return nil
}

// SetIDUserUser of the view to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserViews.
func (o *View) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDUser, related.ID)
	if o.R == nil {
		o.R = &viewR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserViews: ViewSlice{o},
		}
	} else {
		related.R.IDUserViews = append(related.R.IDUserViews, o)
	}

	return nil
}

// RemoveIDUserUser relationship.
// Sets o.R.IDUserUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *View) RemoveIDUserUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.IDUser, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_user")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDUserUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDUserViews {
		if queries.Equal(o.IDUser, ri.IDUser) {
			continue
		}

		ln := len(related.R.IDUserViews)
		if ln > 1 && i < ln-1 {
			related.R.IDUserViews[i] = related.R.IDUserViews[ln-1]
		}
		related.R.IDUserViews = related.R.IDUserViews[:ln-1]
		break
	}
	return nil
}

// Views retrieves all the records using an executor.
func Views(mods ...qm.QueryMod) viewQuery {
	mods = append(mods, qm.From("\"views\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"views\".*"})
	}

	return viewQuery{q}
}

// FindView retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindView(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*View, error) {
	viewObj := &View{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"views\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, viewObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from views")
	}

	if err = viewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return viewObj, err
	}

	return viewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *View) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no views provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(viewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	viewInsertCacheMut.RLock()
	cache, cached := viewInsertCache[key]
	viewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			viewAllColumns,
			viewColumnsWithDefault,
			viewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(viewType, viewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(viewType, viewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"views\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"views\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into views")
	}

	if !cached {
		viewInsertCacheMut.Lock()
		viewInsertCache[key] = cache
		viewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the View.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *View) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	viewUpdateCacheMut.RLock()
	cache, cached := viewUpdateCache[key]
	viewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			viewAllColumns,
			viewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update views, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"views\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, viewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(viewType, viewMapping, append(wl, viewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update views row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for views")
	}

	if !cached {
		viewUpdateCacheMut.Lock()
		viewUpdateCache[key] = cache
		viewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q viewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for views")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for views")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ViewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"views\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, viewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in view slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all view")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *View) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no views provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(viewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	viewUpsertCacheMut.RLock()
	cache, cached := viewUpsertCache[key]
	viewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			viewAllColumns,
			viewColumnsWithDefault,
			viewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			viewAllColumns,
			viewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert views, could not build update column list")
		}

		ret := strmangle.SetComplement(viewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(viewPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert views, could not build conflict column list")
			}

			conflict = make([]string, len(viewPrimaryKeyColumns))
			copy(conflict, viewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"views\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(viewType, viewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(viewType, viewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert views")
	}

	if !cached {
		viewUpsertCacheMut.Lock()
		viewUpsertCache[key] = cache
		viewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single View record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *View) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no View provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), viewPrimaryKeyMapping)
	sql := "DELETE FROM \"views\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from views")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for views")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q viewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no viewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from views")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for views")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ViewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(viewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"views\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, viewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from view slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for views")
	}

	if len(viewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *View) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindView(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ViewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ViewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), viewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"views\".* FROM \"views\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, viewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ViewSlice")
	}

	*o = slice

	return nil
}

// ViewExists checks if the View row exists.
func ViewExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"views\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if views exists")
	}

	return exists, nil
}

// Exists checks if the View row exists.
func (o *View) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ViewExists(ctx, exec, o.ID)
}
