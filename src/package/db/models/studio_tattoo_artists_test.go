// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testStudioTattooArtistsUpsert(t *testing.T) {
	t.Parallel()

	if len(studioTattooArtistAllColumns) == len(studioTattooArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StudioTattooArtist{}
	if err = randomize.Struct(seed, &o, studioTattooArtistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioTattooArtist: %s", err)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, studioTattooArtistDBTypes, false, studioTattooArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioTattooArtist: %s", err)
	}

	count, err = StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStudioTattooArtists(t *testing.T) {
	t.Parallel()

	query := StudioTattooArtists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStudioTattooArtistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioTattooArtistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StudioTattooArtists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioTattooArtistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioTattooArtistSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioTattooArtistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StudioTattooArtistExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StudioTattooArtist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudioTattooArtistExists to return true, but got false.")
	}
}

func testStudioTattooArtistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	studioTattooArtistFound, err := FindStudioTattooArtist(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if studioTattooArtistFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStudioTattooArtistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StudioTattooArtists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStudioTattooArtistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StudioTattooArtists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudioTattooArtistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studioTattooArtistOne := &StudioTattooArtist{}
	studioTattooArtistTwo := &StudioTattooArtist{}
	if err = randomize.Struct(seed, studioTattooArtistOne, studioTattooArtistDBTypes, false, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}
	if err = randomize.Struct(seed, studioTattooArtistTwo, studioTattooArtistDBTypes, false, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioTattooArtistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioTattooArtistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioTattooArtists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudioTattooArtistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studioTattooArtistOne := &StudioTattooArtist{}
	studioTattooArtistTwo := &StudioTattooArtist{}
	if err = randomize.Struct(seed, studioTattooArtistOne, studioTattooArtistDBTypes, false, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}
	if err = randomize.Struct(seed, studioTattooArtistTwo, studioTattooArtistDBTypes, false, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioTattooArtistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioTattooArtistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func studioTattooArtistBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func studioTattooArtistAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioTattooArtist) error {
	*o = StudioTattooArtist{}
	return nil
}

func testStudioTattooArtistsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StudioTattooArtist{}
	o := &StudioTattooArtist{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist object: %s", err)
	}

	AddStudioTattooArtistHook(boil.BeforeInsertHook, studioTattooArtistBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistBeforeInsertHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.AfterInsertHook, studioTattooArtistAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistAfterInsertHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.AfterSelectHook, studioTattooArtistAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistAfterSelectHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.BeforeUpdateHook, studioTattooArtistBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistBeforeUpdateHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.AfterUpdateHook, studioTattooArtistAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistAfterUpdateHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.BeforeDeleteHook, studioTattooArtistBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistBeforeDeleteHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.AfterDeleteHook, studioTattooArtistAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistAfterDeleteHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.BeforeUpsertHook, studioTattooArtistBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistBeforeUpsertHooks = []StudioTattooArtistHook{}

	AddStudioTattooArtistHook(boil.AfterUpsertHook, studioTattooArtistAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studioTattooArtistAfterUpsertHooks = []StudioTattooArtistHook{}
}

func testStudioTattooArtistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioTattooArtistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(studioTattooArtistColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioTattooArtistToOneUserUsingIDTattooArtistUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioTattooArtist
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioTattooArtistDBTypes, false, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDTattooArtist = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDTattooArtistUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioTattooArtistSlice{&local}
	if err = local.L.LoadIDTattooArtistUser(ctx, tx, false, (*[]*StudioTattooArtist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDTattooArtistUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDTattooArtistUser = nil
	if err = local.L.LoadIDTattooArtistUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDTattooArtistUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioTattooArtistToOneStudioUsingIDStudioStudio(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioTattooArtist
	var foreign Studio

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioTattooArtistDBTypes, false, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDStudio = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDStudioStudio().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStudioHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioTattooArtistSlice{&local}
	if err = local.L.LoadIDStudioStudio(ctx, tx, false, (*[]*StudioTattooArtist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDStudioStudio == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDStudioStudio = nil
	if err = local.L.LoadIDStudioStudio(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDStudioStudio == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioTattooArtistToOneSetOpUserUsingIDTattooArtistUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioTattooArtist
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioTattooArtistDBTypes, false, strmangle.SetComplement(studioTattooArtistPrimaryKeyColumns, studioTattooArtistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDTattooArtistUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDTattooArtistUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDTattooArtistStudioTattooArtists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDTattooArtist != x.ID {
			t.Error("foreign key was wrong value", a.IDTattooArtist)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDTattooArtist))
		reflect.Indirect(reflect.ValueOf(&a.IDTattooArtist)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDTattooArtist != x.ID {
			t.Error("foreign key was wrong value", a.IDTattooArtist, x.ID)
		}
	}
}
func testStudioTattooArtistToOneSetOpStudioUsingIDStudioStudio(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioTattooArtist
	var b, c Studio

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioTattooArtistDBTypes, false, strmangle.SetComplement(studioTattooArtistPrimaryKeyColumns, studioTattooArtistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Studio{&b, &c} {
		err = a.SetIDStudioStudio(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDStudioStudio != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDStudioStudioTattooArtists[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDStudio != x.ID {
			t.Error("foreign key was wrong value", a.IDStudio)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDStudio))
		reflect.Indirect(reflect.ValueOf(&a.IDStudio)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDStudio != x.ID {
			t.Error("foreign key was wrong value", a.IDStudio, x.ID)
		}
	}
}

func testStudioTattooArtistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioTattooArtistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioTattooArtistSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioTattooArtistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioTattooArtists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studioTattooArtistDBTypes = map[string]string{`ID`: `int8`, `IDStudio`: `int8`, `IDTattooArtist`: `int8`, `CreatedAt`: `timestamp`}
	_                         = bytes.MinRead
)

func testStudioTattooArtistsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(studioTattooArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(studioTattooArtistAllColumns) == len(studioTattooArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStudioTattooArtistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studioTattooArtistAllColumns) == len(studioTattooArtistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioTattooArtist{}
	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioTattooArtists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioTattooArtistDBTypes, true, studioTattooArtistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioTattooArtist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studioTattooArtistAllColumns, studioTattooArtistPrimaryKeyColumns) {
		fields = studioTattooArtistAllColumns
	} else {
		fields = strmangle.SetComplement(
			studioTattooArtistAllColumns,
			studioTattooArtistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StudioTattooArtistSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
