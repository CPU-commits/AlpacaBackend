// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// PostImage is an object representing the database table.
type PostImage struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDImage   int64     `boil:"id_image" json:"id_image" toml:"id_image" yaml:"id_image"`
	IDPost    int64     `boil:"id_post" json:"id_post" toml:"id_post" yaml:"id_post"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *postImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L postImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PostImageColumns = struct {
	ID        string
	IDImage   string
	IDPost    string
	CreatedAt string
}{
	ID:        "id",
	IDImage:   "id_image",
	IDPost:    "id_post",
	CreatedAt: "created_at",
}

var PostImageTableColumns = struct {
	ID        string
	IDImage   string
	IDPost    string
	CreatedAt string
}{
	ID:        "post_images.id",
	IDImage:   "post_images.id_image",
	IDPost:    "post_images.id_post",
	CreatedAt: "post_images.created_at",
}

// Generated where

var PostImageWhere = struct {
	ID        whereHelperint64
	IDImage   whereHelperint64
	IDPost    whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"post_images\".\"id\""},
	IDImage:   whereHelperint64{field: "\"post_images\".\"id_image\""},
	IDPost:    whereHelperint64{field: "\"post_images\".\"id_post\""},
	CreatedAt: whereHelpertime_Time{field: "\"post_images\".\"created_at\""},
}

// PostImageRels is where relationship names are stored.
var PostImageRels = struct {
	IDImageImage string
	IDPostPost   string
}{
	IDImageImage: "IDImageImage",
	IDPostPost:   "IDPostPost",
}

// postImageR is where relationships are stored.
type postImageR struct {
	IDImageImage *Image `boil:"IDImageImage" json:"IDImageImage" toml:"IDImageImage" yaml:"IDImageImage"`
	IDPostPost   *Post  `boil:"IDPostPost" json:"IDPostPost" toml:"IDPostPost" yaml:"IDPostPost"`
}

// NewStruct creates a new relationship struct
func (*postImageR) NewStruct() *postImageR {
	return &postImageR{}
}

func (o *PostImage) GetIDImageImage() *Image {
	if o == nil {
		return nil
	}

	return o.R.GetIDImageImage()
}

func (r *postImageR) GetIDImageImage() *Image {
	if r == nil {
		return nil
	}

	return r.IDImageImage
}

func (o *PostImage) GetIDPostPost() *Post {
	if o == nil {
		return nil
	}

	return o.R.GetIDPostPost()
}

func (r *postImageR) GetIDPostPost() *Post {
	if r == nil {
		return nil
	}

	return r.IDPostPost
}

// postImageL is where Load methods for each relationship are stored.
type postImageL struct{}

var (
	postImageAllColumns            = []string{"id", "id_image", "id_post", "created_at"}
	postImageColumnsWithoutDefault = []string{"id_image", "id_post"}
	postImageColumnsWithDefault    = []string{"id", "created_at"}
	postImagePrimaryKeyColumns     = []string{"id"}
	postImageGeneratedColumns      = []string{}
)

type (
	// PostImageSlice is an alias for a slice of pointers to PostImage.
	// This should almost always be used instead of []PostImage.
	PostImageSlice []*PostImage
	// PostImageHook is the signature for custom PostImage hook methods
	PostImageHook func(context.Context, boil.ContextExecutor, *PostImage) error

	postImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	postImageType                 = reflect.TypeOf(&PostImage{})
	postImageMapping              = queries.MakeStructMapping(postImageType)
	postImagePrimaryKeyMapping, _ = queries.BindMapping(postImageType, postImageMapping, postImagePrimaryKeyColumns)
	postImageInsertCacheMut       sync.RWMutex
	postImageInsertCache          = make(map[string]insertCache)
	postImageUpdateCacheMut       sync.RWMutex
	postImageUpdateCache          = make(map[string]updateCache)
	postImageUpsertCacheMut       sync.RWMutex
	postImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var postImageAfterSelectMu sync.Mutex
var postImageAfterSelectHooks []PostImageHook

var postImageBeforeInsertMu sync.Mutex
var postImageBeforeInsertHooks []PostImageHook
var postImageAfterInsertMu sync.Mutex
var postImageAfterInsertHooks []PostImageHook

var postImageBeforeUpdateMu sync.Mutex
var postImageBeforeUpdateHooks []PostImageHook
var postImageAfterUpdateMu sync.Mutex
var postImageAfterUpdateHooks []PostImageHook

var postImageBeforeDeleteMu sync.Mutex
var postImageBeforeDeleteHooks []PostImageHook
var postImageAfterDeleteMu sync.Mutex
var postImageAfterDeleteHooks []PostImageHook

var postImageBeforeUpsertMu sync.Mutex
var postImageBeforeUpsertHooks []PostImageHook
var postImageAfterUpsertMu sync.Mutex
var postImageAfterUpsertHooks []PostImageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PostImage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PostImage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PostImage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PostImage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PostImage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PostImage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PostImage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PostImage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PostImage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range postImageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPostImageHook registers your hook function for all future operations.
func AddPostImageHook(hookPoint boil.HookPoint, postImageHook PostImageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		postImageAfterSelectMu.Lock()
		postImageAfterSelectHooks = append(postImageAfterSelectHooks, postImageHook)
		postImageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		postImageBeforeInsertMu.Lock()
		postImageBeforeInsertHooks = append(postImageBeforeInsertHooks, postImageHook)
		postImageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		postImageAfterInsertMu.Lock()
		postImageAfterInsertHooks = append(postImageAfterInsertHooks, postImageHook)
		postImageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		postImageBeforeUpdateMu.Lock()
		postImageBeforeUpdateHooks = append(postImageBeforeUpdateHooks, postImageHook)
		postImageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		postImageAfterUpdateMu.Lock()
		postImageAfterUpdateHooks = append(postImageAfterUpdateHooks, postImageHook)
		postImageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		postImageBeforeDeleteMu.Lock()
		postImageBeforeDeleteHooks = append(postImageBeforeDeleteHooks, postImageHook)
		postImageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		postImageAfterDeleteMu.Lock()
		postImageAfterDeleteHooks = append(postImageAfterDeleteHooks, postImageHook)
		postImageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		postImageBeforeUpsertMu.Lock()
		postImageBeforeUpsertHooks = append(postImageBeforeUpsertHooks, postImageHook)
		postImageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		postImageAfterUpsertMu.Lock()
		postImageAfterUpsertHooks = append(postImageAfterUpsertHooks, postImageHook)
		postImageAfterUpsertMu.Unlock()
	}
}

// One returns a single postImage record from the query.
func (q postImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PostImage, error) {
	o := &PostImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for post_images")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PostImage records from the query.
func (q postImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PostImageSlice, error) {
	var o []*PostImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PostImage slice")
	}

	if len(postImageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PostImage records in the query.
func (q postImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count post_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q postImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if post_images exists")
	}

	return count > 0, nil
}

// IDImageImage pointed to by the foreign key.
func (o *PostImage) IDImageImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDImage),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// IDPostPost pointed to by the foreign key.
func (o *PostImage) IDPostPost(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPost),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// LoadIDImageImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postImageL) LoadIDImageImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostImage interface{}, mods queries.Applicator) error {
	var slice []*PostImage
	var object *PostImage

	if singular {
		var ok bool
		object, ok = maybePostImage.(*PostImage)
		if !ok {
			object = new(PostImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostImage))
			}
		}
	} else {
		s, ok := maybePostImage.(*[]*PostImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postImageR{}
		}
		args[object.IDImage] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postImageR{}
			}

			args[obj.IDImage] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDImageImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDImagePostImage = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDImage == foreign.ID {
				local.R.IDImageImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDImagePostImage = local
				break
			}
		}
	}

	return nil
}

// LoadIDPostPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (postImageL) LoadIDPostPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybePostImage interface{}, mods queries.Applicator) error {
	var slice []*PostImage
	var object *PostImage

	if singular {
		var ok bool
		object, ok = maybePostImage.(*PostImage)
		if !ok {
			object = new(PostImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePostImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePostImage))
			}
		}
	} else {
		s, ok := maybePostImage.(*[]*PostImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePostImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePostImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &postImageR{}
		}
		args[object.IDPost] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &postImageR{}
			}

			args[obj.IDPost] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPostPost = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.IDPostPostImages = append(foreign.R.IDPostPostImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPost == foreign.ID {
				local.R.IDPostPost = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDPostPostImages = append(foreign.R.IDPostPostImages, local)
				break
			}
		}
	}

	return nil
}

// SetIDImageImage of the postImage to the related item.
// Sets o.R.IDImageImage to related.
// Adds o to related.R.IDImagePostImage.
func (o *PostImage) SetIDImageImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_image"}),
		strmangle.WhereClause("\"", "\"", 2, postImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDImage = related.ID
	if o.R == nil {
		o.R = &postImageR{
			IDImageImage: related,
		}
	} else {
		o.R.IDImageImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDImagePostImage: o,
		}
	} else {
		related.R.IDImagePostImage = o
	}

	return nil
}

// SetIDPostPost of the postImage to the related item.
// Sets o.R.IDPostPost to related.
// Adds o to related.R.IDPostPostImages.
func (o *PostImage) SetIDPostPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"post_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_post"}),
		strmangle.WhereClause("\"", "\"", 2, postImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPost = related.ID
	if o.R == nil {
		o.R = &postImageR{
			IDPostPost: related,
		}
	} else {
		o.R.IDPostPost = related
	}

	if related.R == nil {
		related.R = &postR{
			IDPostPostImages: PostImageSlice{o},
		}
	} else {
		related.R.IDPostPostImages = append(related.R.IDPostPostImages, o)
	}

	return nil
}

// PostImages retrieves all the records using an executor.
func PostImages(mods ...qm.QueryMod) postImageQuery {
	mods = append(mods, qm.From("\"post_images\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"post_images\".*"})
	}

	return postImageQuery{q}
}

// FindPostImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPostImage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PostImage, error) {
	postImageObj := &PostImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"post_images\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, postImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from post_images")
	}

	if err = postImageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return postImageObj, err
	}

	return postImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PostImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no post_images provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	postImageInsertCacheMut.RLock()
	cache, cached := postImageInsertCache[key]
	postImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			postImageAllColumns,
			postImageColumnsWithDefault,
			postImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(postImageType, postImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(postImageType, postImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"post_images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"post_images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into post_images")
	}

	if !cached {
		postImageInsertCacheMut.Lock()
		postImageInsertCache[key] = cache
		postImageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PostImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PostImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	postImageUpdateCacheMut.RLock()
	cache, cached := postImageUpdateCache[key]
	postImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			postImageAllColumns,
			postImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update post_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"post_images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, postImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(postImageType, postImageMapping, append(wl, postImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update post_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for post_images")
	}

	if !cached {
		postImageUpdateCacheMut.Lock()
		postImageUpdateCache[key] = cache
		postImageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q postImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for post_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for post_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PostImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"post_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, postImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in postImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all postImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PostImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no post_images provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(postImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	postImageUpsertCacheMut.RLock()
	cache, cached := postImageUpsertCache[key]
	postImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			postImageAllColumns,
			postImageColumnsWithDefault,
			postImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			postImageAllColumns,
			postImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert post_images, could not build update column list")
		}

		ret := strmangle.SetComplement(postImageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(postImagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert post_images, could not build conflict column list")
			}

			conflict = make([]string, len(postImagePrimaryKeyColumns))
			copy(conflict, postImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"post_images\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(postImageType, postImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(postImageType, postImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert post_images")
	}

	if !cached {
		postImageUpsertCacheMut.Lock()
		postImageUpsertCache[key] = cache
		postImageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PostImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PostImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PostImage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), postImagePrimaryKeyMapping)
	sql := "DELETE FROM \"post_images\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from post_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for post_images")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q postImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no postImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from post_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PostImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(postImageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"post_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from postImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for post_images")
	}

	if len(postImageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PostImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPostImage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PostImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PostImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), postImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"post_images\".* FROM \"post_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, postImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PostImageSlice")
	}

	*o = slice

	return nil
}

// PostImageExists checks if the PostImage row exists.
func PostImageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"post_images\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if post_images exists")
	}

	return exists, nil
}

// Exists checks if the PostImage row exists.
func (o *PostImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PostImageExists(ctx, exec, o.ID)
}
