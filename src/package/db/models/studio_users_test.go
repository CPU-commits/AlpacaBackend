// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStudioUsers(t *testing.T) {
	t.Parallel()

	query := StudioUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStudioUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StudioUsers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioUserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudioUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StudioUserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StudioUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudioUserExists to return true, but got false.")
	}
}

func testStudioUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	studioUserFound, err := FindStudioUser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if studioUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStudioUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StudioUsers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStudioUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StudioUsers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudioUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studioUserOne := &StudioUser{}
	studioUserTwo := &StudioUser{}
	if err = randomize.Struct(seed, studioUserOne, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}
	if err = randomize.Struct(seed, studioUserTwo, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudioUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studioUserOne := &StudioUser{}
	studioUserTwo := &StudioUser{}
	if err = randomize.Struct(seed, studioUserOne, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}
	if err = randomize.Struct(seed, studioUserTwo, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioUserOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioUserTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func studioUserBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func studioUserAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StudioUser) error {
	*o = StudioUser{}
	return nil
}

func testStudioUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StudioUser{}
	o := &StudioUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studioUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StudioUser object: %s", err)
	}

	AddStudioUserHook(boil.BeforeInsertHook, studioUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studioUserBeforeInsertHooks = []StudioUserHook{}

	AddStudioUserHook(boil.AfterInsertHook, studioUserAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studioUserAfterInsertHooks = []StudioUserHook{}

	AddStudioUserHook(boil.AfterSelectHook, studioUserAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studioUserAfterSelectHooks = []StudioUserHook{}

	AddStudioUserHook(boil.BeforeUpdateHook, studioUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studioUserBeforeUpdateHooks = []StudioUserHook{}

	AddStudioUserHook(boil.AfterUpdateHook, studioUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studioUserAfterUpdateHooks = []StudioUserHook{}

	AddStudioUserHook(boil.BeforeDeleteHook, studioUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studioUserBeforeDeleteHooks = []StudioUserHook{}

	AddStudioUserHook(boil.AfterDeleteHook, studioUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studioUserAfterDeleteHooks = []StudioUserHook{}

	AddStudioUserHook(boil.BeforeUpsertHook, studioUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studioUserBeforeUpsertHooks = []StudioUserHook{}

	AddStudioUserHook(boil.AfterUpsertHook, studioUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studioUserAfterUpsertHooks = []StudioUserHook{}
}

func testStudioUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioUserToManyIDAdminStudioAdminsPermissions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioUser
	var b, c StudioAdminsPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioAdminsPermissionDBTypes, false, studioAdminsPermissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDAdmin = a.ID
	c.IDAdmin = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDAdminStudioAdminsPermissions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDAdmin == b.IDAdmin {
			bFound = true
		}
		if v.IDAdmin == c.IDAdmin {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioUserSlice{&a}
	if err = a.L.LoadIDAdminStudioAdminsPermissions(ctx, tx, false, (*[]*StudioUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDAdminStudioAdminsPermissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDAdminStudioAdminsPermissions = nil
	if err = a.L.LoadIDAdminStudioAdminsPermissions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDAdminStudioAdminsPermissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioUserToManyAddOpIDAdminStudioAdminsPermissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioUser
	var b, c, d, e StudioAdminsPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioUserDBTypes, false, strmangle.SetComplement(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StudioAdminsPermission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studioAdminsPermissionDBTypes, false, strmangle.SetComplement(studioAdminsPermissionPrimaryKeyColumns, studioAdminsPermissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StudioAdminsPermission{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDAdminStudioAdminsPermissions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDAdmin {
			t.Error("foreign key was wrong value", a.ID, first.IDAdmin)
		}
		if a.ID != second.IDAdmin {
			t.Error("foreign key was wrong value", a.ID, second.IDAdmin)
		}

		if first.R.IDAdminStudioUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDAdminStudioUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDAdminStudioAdminsPermissions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDAdminStudioAdminsPermissions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDAdminStudioAdminsPermissions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStudioUserToOneStudioUsingIDStudioStudio(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioUser
	var foreign Studio

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDStudio = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDStudioStudio().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStudioHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioUserSlice{&local}
	if err = local.L.LoadIDStudioStudio(ctx, tx, false, (*[]*StudioUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDStudioStudio == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDStudioStudio = nil
	if err = local.L.LoadIDStudioStudio(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDStudioStudio == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioUserToOneUserUsingIDUserUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StudioUser
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDUser = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDUserUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioUserSlice{&local}
	if err = local.L.LoadIDUserUser(ctx, tx, false, (*[]*StudioUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDUserUser = nil
	if err = local.L.LoadIDUserUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDUserUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioUserToOneSetOpStudioUsingIDStudioStudio(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioUser
	var b, c Studio

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioUserDBTypes, false, strmangle.SetComplement(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Studio{&b, &c} {
		err = a.SetIDStudioStudio(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDStudioStudio != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDStudioStudioUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDStudio != x.ID {
			t.Error("foreign key was wrong value", a.IDStudio)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDStudio))
		reflect.Indirect(reflect.ValueOf(&a.IDStudio)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDStudio != x.ID {
			t.Error("foreign key was wrong value", a.IDStudio, x.ID)
		}
	}
}
func testStudioUserToOneSetOpUserUsingIDUserUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StudioUser
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioUserDBTypes, false, strmangle.SetComplement(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDUserUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDUserUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDUserStudioUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDUser))
		reflect.Indirect(reflect.ValueOf(&a.IDUser)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDUser != x.ID {
			t.Error("foreign key was wrong value", a.IDUser, x.ID)
		}
	}
}

func testStudioUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioUserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudioUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StudioUsers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studioUserDBTypes = map[string]string{`ID`: `bigint`, `IDStudio`: `bigint`, `IDUser`: `bigint`, `Roles`: `jsonb`, `CreatedAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testStudioUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(studioUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(studioUserAllColumns) == len(studioUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStudioUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studioUserAllColumns) == len(studioUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StudioUser{}
	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioUserDBTypes, true, studioUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studioUserAllColumns, studioUserPrimaryKeyColumns) {
		fields = studioUserAllColumns
	} else {
		fields = strmangle.SetComplement(
			studioUserAllColumns,
			studioUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StudioUserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStudioUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(studioUserAllColumns) == len(studioUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StudioUser{}
	if err = randomize.Struct(seed, &o, studioUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioUser: %s", err)
	}

	count, err := StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, studioUserDBTypes, false, studioUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StudioUser struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StudioUser: %s", err)
	}

	count, err = StudioUsers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
