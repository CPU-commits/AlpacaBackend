// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStudios(t *testing.T) {
	t.Parallel()

	query := Studios()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStudiosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudiosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Studios().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudiosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStudiosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StudioExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Studio exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StudioExists to return true, but got false.")
	}
}

func testStudiosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	studioFound, err := FindStudio(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if studioFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStudiosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Studios().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStudiosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Studios().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStudiosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	studioOne := &Studio{}
	studioTwo := &Studio{}
	if err = randomize.Struct(seed, studioOne, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}
	if err = randomize.Struct(seed, studioTwo, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Studios().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStudiosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	studioOne := &Studio{}
	studioTwo := &Studio{}
	if err = randomize.Struct(seed, studioOne, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}
	if err = randomize.Struct(seed, studioTwo, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = studioOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = studioTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func studioBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func studioAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Studio) error {
	*o = Studio{}
	return nil
}

func testStudiosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Studio{}
	o := &Studio{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, studioDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Studio object: %s", err)
	}

	AddStudioHook(boil.BeforeInsertHook, studioBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	studioBeforeInsertHooks = []StudioHook{}

	AddStudioHook(boil.AfterInsertHook, studioAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	studioAfterInsertHooks = []StudioHook{}

	AddStudioHook(boil.AfterSelectHook, studioAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	studioAfterSelectHooks = []StudioHook{}

	AddStudioHook(boil.BeforeUpdateHook, studioBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	studioBeforeUpdateHooks = []StudioHook{}

	AddStudioHook(boil.AfterUpdateHook, studioAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	studioAfterUpdateHooks = []StudioHook{}

	AddStudioHook(boil.BeforeDeleteHook, studioBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	studioBeforeDeleteHooks = []StudioHook{}

	AddStudioHook(boil.AfterDeleteHook, studioAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	studioAfterDeleteHooks = []StudioHook{}

	AddStudioHook(boil.BeforeUpsertHook, studioBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	studioBeforeUpsertHooks = []StudioHook{}

	AddStudioHook(boil.AfterUpsertHook, studioAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	studioAfterUpsertHooks = []StudioHook{}
}

func testStudiosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudiosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStudioToManyIDStudioAppointments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, appointmentDBTypes, false, appointmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioAppointments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioAppointments(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioAppointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioAppointments = nil
	if err = a.L.LoadIDStudioAppointments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioAppointments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioFollows(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, followDBTypes, false, followColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, followDBTypes, false, followColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioFollows().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioFollows(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioFollows); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioFollows = nil
	if err = a.L.LoadIDStudioFollows(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioFollows); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioLinks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, linkDBTypes, false, linkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioLinks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioLinks(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioLinks = nil
	if err = a.L.LoadIDStudioLinks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioPayments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioPayments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioPayments(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioPayments = nil
	if err = a.L.LoadIDStudioPayments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioPosts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioPosts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioPosts(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioPosts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioPosts = nil
	if err = a.L.LoadIDStudioPosts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioPosts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioStudioUserHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c StudioUserHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, studioUserHistoryDBTypes, false, studioUserHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioUserHistoryDBTypes, false, studioUserHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDStudio = a.ID
	c.IDStudio = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioStudioUserHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDStudio == b.IDStudio {
			bFound = true
		}
		if v.IDStudio == c.IDStudio {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioStudioUserHistories(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioStudioUserHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioStudioUserHistories = nil
	if err = a.L.LoadIDStudioStudioUserHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioStudioUserHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioStudioUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c StudioUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, studioUserDBTypes, false, studioUserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IDStudio = a.ID
	c.IDStudio = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioStudioUsers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IDStudio == b.IDStudio {
			bFound = true
		}
		if v.IDStudio == c.IDStudio {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioStudioUsers(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioStudioUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioStudioUsers = nil
	if err = a.L.LoadIDStudioStudioUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioStudioUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioSubscriptions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, subscriptionDBTypes, false, subscriptionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioSubscriptions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioSubscriptions(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioSubscriptions = nil
	if err = a.L.LoadIDStudioSubscriptions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioSubscriptions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioTattoos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tattooDBTypes, false, tattooColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioTattoos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioTattoos(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioTattoos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioTattoos = nil
	if err = a.L.LoadIDStudioTattoos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioTattoos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyIDStudioViews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c View

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, viewDBTypes, false, viewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, viewDBTypes, false, viewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.IDStudio, a.ID)
	queries.Assign(&c.IDStudio, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.IDStudioViews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.IDStudio, b.IDStudio) {
			bFound = true
		}
		if queries.Equal(v.IDStudio, c.IDStudio) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StudioSlice{&a}
	if err = a.L.LoadIDStudioViews(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioViews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.IDStudioViews = nil
	if err = a.L.LoadIDStudioViews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.IDStudioViews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStudioToManyAddOpIDStudioAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Appointment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioAppointments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioAppointments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioAppointments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioAppointments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioAppointments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioAppointments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioAppointments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioAppointments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioAppointments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Appointment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Appointment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, appointmentDBTypes, false, strmangle.SetComplement(appointmentPrimaryKeyColumns, appointmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioAppointments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioAppointments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioAppointments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioAppointments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioAppointments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioAppointments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioFollows(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Follow{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, followDBTypes, false, strmangle.SetComplement(followPrimaryKeyColumns, followColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Follow{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioFollows(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioFollows[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioFollows[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioFollows().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioFollows(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Follow{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, followDBTypes, false, strmangle.SetComplement(followPrimaryKeyColumns, followColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioFollows(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioFollows(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioFollows[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioFollows[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioFollows(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Follow

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Follow{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, followDBTypes, false, strmangle.SetComplement(followPrimaryKeyColumns, followColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioFollows(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioFollows(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioFollows().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioFollows) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioFollows[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioFollows[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Link{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Link{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioLinks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioLinks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Link{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioLinks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioLinks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioLinks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioLinks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioLinks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioLinks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioLinks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Link

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Link{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, linkDBTypes, false, strmangle.SetComplement(linkPrimaryKeyColumns, linkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioLinks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioLinks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioLinks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioLinks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioLinks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioLinks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioLinks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Payment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioPayments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioPayments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioPayments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioPayments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioPayments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioPayments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioPayments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioPayments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioPayments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioPayments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioPayments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioPayments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioPayments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioPosts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Post{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Post{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioPosts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioPosts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioPosts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioPosts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioPosts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Post{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioPosts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioPosts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioPosts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioPosts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioPosts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioPosts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioPosts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Post{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioPosts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioPosts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioPosts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioPosts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioPosts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioPosts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioPosts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioStudioUserHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e StudioUserHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StudioUserHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studioUserHistoryDBTypes, false, strmangle.SetComplement(studioUserHistoryPrimaryKeyColumns, studioUserHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StudioUserHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioStudioUserHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDStudio {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if a.ID != second.IDStudio {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioStudioUserHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioStudioUserHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioStudioUserHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStudioToManyAddOpIDStudioStudioUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e StudioUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StudioUser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, studioUserDBTypes, false, strmangle.SetComplement(studioUserPrimaryKeyColumns, studioUserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StudioUser{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioStudioUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IDStudio {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if a.ID != second.IDStudio {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioStudioUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioStudioUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioStudioUsers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStudioToManyAddOpIDStudioSubscriptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Subscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, subscriptionDBTypes, false, strmangle.SetComplement(subscriptionPrimaryKeyColumns, subscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Subscription{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioSubscriptions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioSubscriptions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioSubscriptions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioSubscriptions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioSubscriptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Subscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, subscriptionDBTypes, false, strmangle.SetComplement(subscriptionPrimaryKeyColumns, subscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioSubscriptions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioSubscriptions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioSubscriptions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioSubscriptions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioSubscriptions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioSubscriptions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioSubscriptions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Subscription

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Subscription{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, subscriptionDBTypes, false, strmangle.SetComplement(subscriptionPrimaryKeyColumns, subscriptionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioSubscriptions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioSubscriptions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioSubscriptions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioSubscriptions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioSubscriptions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioSubscriptions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioSubscriptions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioTattoos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tattoo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tattoo{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioTattoos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioTattoos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioTattoos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioTattoos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioTattoos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tattoo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioTattoos(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioTattoos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioTattoos(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioTattoos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioTattoos[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioTattoos[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioTattoos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e Tattoo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tattoo{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tattooDBTypes, false, strmangle.SetComplement(tattooPrimaryKeyColumns, tattooColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioTattoos(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioTattoos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioTattoos(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioTattoos().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioTattoos) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioTattoos[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioTattoos[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToManyAddOpIDStudioViews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e View

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*View{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, viewDBTypes, false, strmangle.SetComplement(viewPrimaryKeyColumns, viewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*View{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIDStudioViews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, first.IDStudio)
		}
		if !queries.Equal(a.ID, second.IDStudio) {
			t.Error("foreign key was wrong value", a.ID, second.IDStudio)
		}

		if first.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.IDStudioStudio != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.IDStudioViews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.IDStudioViews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.IDStudioViews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStudioToManySetOpIDStudioViews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e View

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*View{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, viewDBTypes, false, strmangle.SetComplement(viewPrimaryKeyColumns, viewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIDStudioViews(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioViews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIDStudioViews(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioViews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, d.IDStudio)
	}
	if !queries.Equal(a.ID, e.IDStudio) {
		t.Error("foreign key was wrong value", a.ID, e.IDStudio)
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.IDStudioViews[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.IDStudioViews[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStudioToManyRemoveOpIDStudioViews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c, d, e View

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*View{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, viewDBTypes, false, strmangle.SetComplement(viewPrimaryKeyColumns, viewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIDStudioViews(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.IDStudioViews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIDStudioViews(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.IDStudioViews().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.IDStudio) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.IDStudio) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.IDStudioStudio != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.IDStudioStudio != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.IDStudioViews) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.IDStudioViews[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.IDStudioViews[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStudioToOneImageUsingIDAvatarImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Studio
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IDAvatar, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDAvatarImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioSlice{&local}
	if err = local.L.LoadIDAvatarImage(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAvatarImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDAvatarImage = nil
	if err = local.L.LoadIDAvatarImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAvatarImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioToOneImageUsingIDBannerImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Studio
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.IDBanner, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDBannerImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioSlice{&local}
	if err = local.L.LoadIDBannerImage(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDBannerImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDBannerImage = nil
	if err = local.L.LoadIDBannerImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDBannerImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioToOneUserUsingIDOwnerUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Studio
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, studioDBTypes, false, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDOwner = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDOwnerUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StudioSlice{&local}
	if err = local.L.LoadIDOwnerUser(ctx, tx, false, (*[]*Studio)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDOwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDOwnerUser = nil
	if err = local.L.LoadIDOwnerUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDOwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStudioToOneSetOpImageUsingIDAvatarImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDAvatarImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDAvatarImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDAvatarStudio != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IDAvatar, x.ID) {
			t.Error("foreign key was wrong value", a.IDAvatar)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDAvatar))
		reflect.Indirect(reflect.ValueOf(&a.IDAvatar)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IDAvatar, x.ID) {
			t.Error("foreign key was wrong value", a.IDAvatar, x.ID)
		}
	}
}

func testStudioToOneRemoveOpImageUsingIDAvatarImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIDAvatarImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIDAvatarImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.IDAvatarImage().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.IDAvatarImage != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IDAvatar) {
		t.Error("foreign key value should be nil")
	}

	if b.R.IDAvatarStudio != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testStudioToOneSetOpImageUsingIDBannerImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDBannerImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDBannerImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDBannerStudio != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.IDBanner, x.ID) {
			t.Error("foreign key was wrong value", a.IDBanner)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDBanner))
		reflect.Indirect(reflect.ValueOf(&a.IDBanner)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.IDBanner, x.ID) {
			t.Error("foreign key was wrong value", a.IDBanner, x.ID)
		}
	}
}

func testStudioToOneRemoveOpImageUsingIDBannerImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetIDBannerImage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveIDBannerImage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.IDBannerImage().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.IDBannerImage != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.IDBanner) {
		t.Error("foreign key value should be nil")
	}

	if b.R.IDBannerStudio != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testStudioToOneSetOpUserUsingIDOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Studio
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, studioDBTypes, false, strmangle.SetComplement(studioPrimaryKeyColumns, studioColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetIDOwnerUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDOwnerUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDOwnerStudios[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDOwner != x.ID {
			t.Error("foreign key was wrong value", a.IDOwner)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDOwner))
		reflect.Indirect(reflect.ValueOf(&a.IDOwner)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDOwner != x.ID {
			t.Error("foreign key was wrong value", a.IDOwner, x.ID)
		}
	}
}

func testStudiosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudiosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StudioSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStudiosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Studios().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	studioDBTypes = map[string]string{`ID`: `bigint`, `Description`: `text`, `Email`: `text`, `Phone`: `text`, `CreatedAt`: `timestamp without time zone`, `IDAvatar`: `bigint`, `Name`: `text`, `Username`: `text`, `FullAddress`: `text`, `IDOwner`: `bigint`, `IDBanner`: `bigint`, `IsActive`: `boolean`, `IsLimit`: `boolean`, `UpdatedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testStudiosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(studioPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(studioAllColumns) == len(studioPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioDBTypes, true, studioPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStudiosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(studioAllColumns) == len(studioPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Studio{}
	if err = randomize.Struct(seed, o, studioDBTypes, true, studioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, studioDBTypes, true, studioPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(studioAllColumns, studioPrimaryKeyColumns) {
		fields = studioAllColumns
	} else {
		fields = strmangle.SetComplement(
			studioAllColumns,
			studioPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StudioSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStudiosUpsert(t *testing.T) {
	t.Parallel()

	if len(studioAllColumns) == len(studioPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Studio{}
	if err = randomize.Struct(seed, &o, studioDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Studio: %s", err)
	}

	count, err := Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, studioDBTypes, false, studioPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Studio struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Studio: %s", err)
	}

	count, err = Studios().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
