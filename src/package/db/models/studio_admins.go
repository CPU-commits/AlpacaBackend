// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// StudioAdmin is an object representing the database table.
type StudioAdmin struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDStudio  int64     `boil:"id_studio" json:"id_studio" toml:"id_studio" yaml:"id_studio"`
	IDOwner   int64     `boil:"id_owner" json:"id_owner" toml:"id_owner" yaml:"id_owner"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *studioAdminR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studioAdminL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudioAdminColumns = struct {
	ID        string
	IDStudio  string
	IDOwner   string
	CreatedAt string
}{
	ID:        "id",
	IDStudio:  "id_studio",
	IDOwner:   "id_owner",
	CreatedAt: "created_at",
}

var StudioAdminTableColumns = struct {
	ID        string
	IDStudio  string
	IDOwner   string
	CreatedAt string
}{
	ID:        "studio_admins.id",
	IDStudio:  "studio_admins.id_studio",
	IDOwner:   "studio_admins.id_owner",
	CreatedAt: "studio_admins.created_at",
}

// Generated where

var StudioAdminWhere = struct {
	ID        whereHelperint64
	IDStudio  whereHelperint64
	IDOwner   whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"studio_admins\".\"id\""},
	IDStudio:  whereHelperint64{field: "\"studio_admins\".\"id_studio\""},
	IDOwner:   whereHelperint64{field: "\"studio_admins\".\"id_owner\""},
	CreatedAt: whereHelpertime_Time{field: "\"studio_admins\".\"created_at\""},
}

// StudioAdminRels is where relationship names are stored.
var StudioAdminRels = struct {
	IDOwnerUser    string
	IDStudioStudio string
}{
	IDOwnerUser:    "IDOwnerUser",
	IDStudioStudio: "IDStudioStudio",
}

// studioAdminR is where relationships are stored.
type studioAdminR struct {
	IDOwnerUser    *User   `boil:"IDOwnerUser" json:"IDOwnerUser" toml:"IDOwnerUser" yaml:"IDOwnerUser"`
	IDStudioStudio *Studio `boil:"IDStudioStudio" json:"IDStudioStudio" toml:"IDStudioStudio" yaml:"IDStudioStudio"`
}

// NewStruct creates a new relationship struct
func (*studioAdminR) NewStruct() *studioAdminR {
	return &studioAdminR{}
}

<<<<<<< HEAD
func (o *StudioAdmin) GetIDOwnerUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDOwnerUser()
}

=======
>>>>>>> origin/master
func (r *studioAdminR) GetIDOwnerUser() *User {
	if r == nil {
		return nil
	}

	return r.IDOwnerUser
}

<<<<<<< HEAD
func (o *StudioAdmin) GetIDStudioStudio() *Studio {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudio()
}

=======
>>>>>>> origin/master
func (r *studioAdminR) GetIDStudioStudio() *Studio {
	if r == nil {
		return nil
	}
<<<<<<< HEAD

=======
>>>>>>> origin/master
	return r.IDStudioStudio
}

// studioAdminL is where Load methods for each relationship are stored.
type studioAdminL struct{}

var (
	studioAdminAllColumns            = []string{"id", "id_studio", "id_owner", "created_at"}
	studioAdminColumnsWithoutDefault = []string{"id_studio", "id_owner"}
	studioAdminColumnsWithDefault    = []string{"id", "created_at"}
	studioAdminPrimaryKeyColumns     = []string{"id"}
	studioAdminGeneratedColumns      = []string{}
)

type (
	// StudioAdminSlice is an alias for a slice of pointers to StudioAdmin.
	// This should almost always be used instead of []StudioAdmin.
	StudioAdminSlice []*StudioAdmin
	// StudioAdminHook is the signature for custom StudioAdmin hook methods
	StudioAdminHook func(context.Context, boil.ContextExecutor, *StudioAdmin) error

	studioAdminQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studioAdminType                 = reflect.TypeOf(&StudioAdmin{})
	studioAdminMapping              = queries.MakeStructMapping(studioAdminType)
	studioAdminPrimaryKeyMapping, _ = queries.BindMapping(studioAdminType, studioAdminMapping, studioAdminPrimaryKeyColumns)
	studioAdminInsertCacheMut       sync.RWMutex
	studioAdminInsertCache          = make(map[string]insertCache)
	studioAdminUpdateCacheMut       sync.RWMutex
	studioAdminUpdateCache          = make(map[string]updateCache)
	studioAdminUpsertCacheMut       sync.RWMutex
	studioAdminUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var studioAdminAfterSelectMu sync.Mutex
var studioAdminAfterSelectHooks []StudioAdminHook

var studioAdminBeforeInsertMu sync.Mutex
var studioAdminBeforeInsertHooks []StudioAdminHook
var studioAdminAfterInsertMu sync.Mutex
var studioAdminAfterInsertHooks []StudioAdminHook

var studioAdminBeforeUpdateMu sync.Mutex
var studioAdminBeforeUpdateHooks []StudioAdminHook
var studioAdminAfterUpdateMu sync.Mutex
var studioAdminAfterUpdateHooks []StudioAdminHook

var studioAdminBeforeDeleteMu sync.Mutex
var studioAdminBeforeDeleteHooks []StudioAdminHook
var studioAdminAfterDeleteMu sync.Mutex
var studioAdminAfterDeleteHooks []StudioAdminHook

var studioAdminBeforeUpsertMu sync.Mutex
var studioAdminBeforeUpsertHooks []StudioAdminHook
var studioAdminAfterUpsertMu sync.Mutex
var studioAdminAfterUpsertHooks []StudioAdminHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StudioAdmin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StudioAdmin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StudioAdmin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StudioAdmin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StudioAdmin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StudioAdmin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StudioAdmin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StudioAdmin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StudioAdmin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioAdminAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudioAdminHook registers your hook function for all future operations.
func AddStudioAdminHook(hookPoint boil.HookPoint, studioAdminHook StudioAdminHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		studioAdminAfterSelectMu.Lock()
		studioAdminAfterSelectHooks = append(studioAdminAfterSelectHooks, studioAdminHook)
		studioAdminAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		studioAdminBeforeInsertMu.Lock()
		studioAdminBeforeInsertHooks = append(studioAdminBeforeInsertHooks, studioAdminHook)
		studioAdminBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		studioAdminAfterInsertMu.Lock()
		studioAdminAfterInsertHooks = append(studioAdminAfterInsertHooks, studioAdminHook)
		studioAdminAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		studioAdminBeforeUpdateMu.Lock()
		studioAdminBeforeUpdateHooks = append(studioAdminBeforeUpdateHooks, studioAdminHook)
		studioAdminBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		studioAdminAfterUpdateMu.Lock()
		studioAdminAfterUpdateHooks = append(studioAdminAfterUpdateHooks, studioAdminHook)
		studioAdminAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		studioAdminBeforeDeleteMu.Lock()
		studioAdminBeforeDeleteHooks = append(studioAdminBeforeDeleteHooks, studioAdminHook)
		studioAdminBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		studioAdminAfterDeleteMu.Lock()
		studioAdminAfterDeleteHooks = append(studioAdminAfterDeleteHooks, studioAdminHook)
		studioAdminAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		studioAdminBeforeUpsertMu.Lock()
		studioAdminBeforeUpsertHooks = append(studioAdminBeforeUpsertHooks, studioAdminHook)
		studioAdminBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		studioAdminAfterUpsertMu.Lock()
		studioAdminAfterUpsertHooks = append(studioAdminAfterUpsertHooks, studioAdminHook)
		studioAdminAfterUpsertMu.Unlock()
	}
}

// One returns a single studioAdmin record from the query.
func (q studioAdminQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StudioAdmin, error) {
	o := &StudioAdmin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for studio_admins")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StudioAdmin records from the query.
func (q studioAdminQuery) All(ctx context.Context, exec boil.ContextExecutor) (StudioAdminSlice, error) {
	var o []*StudioAdmin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StudioAdmin slice")
	}

	if len(studioAdminAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StudioAdmin records in the query.
func (q studioAdminQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count studio_admins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q studioAdminQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if studio_admins exists")
	}

	return count > 0, nil
}

// IDOwnerUser pointed to by the foreign key.
func (o *StudioAdmin) IDOwnerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDOwner),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDStudioStudio pointed to by the foreign key.
func (o *StudioAdmin) IDStudioStudio(mods ...qm.QueryMod) studioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDStudio),
	}

	queryMods = append(queryMods, mods...)

	return Studios(queryMods...)
}

// LoadIDOwnerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioAdminL) LoadIDOwnerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioAdmin interface{}, mods queries.Applicator) error {
	var slice []*StudioAdmin
	var object *StudioAdmin

	if singular {
		var ok bool
		object, ok = maybeStudioAdmin.(*StudioAdmin)
		if !ok {
			object = new(StudioAdmin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioAdmin))
			}
		}
	} else {
		s, ok := maybeStudioAdmin.(*[]*StudioAdmin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioAdmin))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioAdminR{}
		}
		args[object.IDOwner] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioAdminR{}
			}

			args[obj.IDOwner] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDOwnerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDOwnerStudioAdmins = append(foreign.R.IDOwnerStudioAdmins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDOwner == foreign.ID {
				local.R.IDOwnerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDOwnerStudioAdmins = append(foreign.R.IDOwnerStudioAdmins, local)
				break
			}
		}
	}

	return nil
}

// LoadIDStudioStudio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioAdminL) LoadIDStudioStudio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioAdmin interface{}, mods queries.Applicator) error {
	var slice []*StudioAdmin
	var object *StudioAdmin

	if singular {
		var ok bool
		object, ok = maybeStudioAdmin.(*StudioAdmin)
		if !ok {
			object = new(StudioAdmin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioAdmin))
			}
		}
	} else {
		s, ok := maybeStudioAdmin.(*[]*StudioAdmin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioAdmin))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioAdminR{}
		}
		args[object.IDStudio] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioAdminR{}
			}

			args[obj.IDStudio] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studios`),
		qm.WhereIn(`studios.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Studio")
	}

	var resultSlice []*Studio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Studio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for studios")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studios")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDStudioStudio = foreign
		if foreign.R == nil {
			foreign.R = &studioR{}
		}
		foreign.R.IDStudioStudioAdmins = append(foreign.R.IDStudioStudioAdmins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDStudio == foreign.ID {
				local.R.IDStudioStudio = foreign
				if foreign.R == nil {
					foreign.R = &studioR{}
				}
				foreign.R.IDStudioStudioAdmins = append(foreign.R.IDStudioStudioAdmins, local)
				break
			}
		}
	}

	return nil
}

// SetIDOwnerUser of the studioAdmin to the related item.
// Sets o.R.IDOwnerUser to related.
// Adds o to related.R.IDOwnerStudioAdmins.
func (o *StudioAdmin) SetIDOwnerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studio_admins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_owner"}),
		strmangle.WhereClause("\"", "\"", 2, studioAdminPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDOwner = related.ID
	if o.R == nil {
		o.R = &studioAdminR{
			IDOwnerUser: related,
		}
	} else {
		o.R.IDOwnerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDOwnerStudioAdmins: StudioAdminSlice{o},
		}
	} else {
		related.R.IDOwnerStudioAdmins = append(related.R.IDOwnerStudioAdmins, o)
	}

	return nil
}

// SetIDStudioStudio of the studioAdmin to the related item.
// Sets o.R.IDStudioStudio to related.
// Adds o to related.R.IDStudioStudioAdmins.
func (o *StudioAdmin) SetIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Studio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studio_admins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
		strmangle.WhereClause("\"", "\"", 2, studioAdminPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDStudio = related.ID
	if o.R == nil {
		o.R = &studioAdminR{
			IDStudioStudio: related,
		}
	} else {
		o.R.IDStudioStudio = related
	}

	if related.R == nil {
		related.R = &studioR{
			IDStudioStudioAdmins: StudioAdminSlice{o},
		}
	} else {
		related.R.IDStudioStudioAdmins = append(related.R.IDStudioStudioAdmins, o)
	}

	return nil
}

// StudioAdmins retrieves all the records using an executor.
func StudioAdmins(mods ...qm.QueryMod) studioAdminQuery {
	mods = append(mods, qm.From("\"studio_admins\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"studio_admins\".*"})
	}

	return studioAdminQuery{q}
}

// FindStudioAdmin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudioAdmin(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*StudioAdmin, error) {
	studioAdminObj := &StudioAdmin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"studio_admins\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, studioAdminObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from studio_admins")
	}

	if err = studioAdminObj.doAfterSelectHooks(ctx, exec); err != nil {
		return studioAdminObj, err
	}

	return studioAdminObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StudioAdmin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no studio_admins provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioAdminColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	studioAdminInsertCacheMut.RLock()
	cache, cached := studioAdminInsertCache[key]
	studioAdminInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			studioAdminAllColumns,
			studioAdminColumnsWithDefault,
			studioAdminColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(studioAdminType, studioAdminMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studioAdminType, studioAdminMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"studio_admins\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"studio_admins\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into studio_admins")
	}

	if !cached {
		studioAdminInsertCacheMut.Lock()
		studioAdminInsertCache[key] = cache
		studioAdminInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StudioAdmin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StudioAdmin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	studioAdminUpdateCacheMut.RLock()
	cache, cached := studioAdminUpdateCache[key]
	studioAdminUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			studioAdminAllColumns,
			studioAdminPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update studio_admins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"studio_admins\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studioAdminPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studioAdminType, studioAdminMapping, append(wl, studioAdminPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update studio_admins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for studio_admins")
	}

	if !cached {
		studioAdminUpdateCacheMut.Lock()
		studioAdminUpdateCache[key] = cache
		studioAdminUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q studioAdminQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for studio_admins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for studio_admins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudioAdminSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioAdminPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"studio_admins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studioAdminPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in studioAdmin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all studioAdmin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StudioAdmin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no studio_admins provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioAdminColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studioAdminUpsertCacheMut.RLock()
	cache, cached := studioAdminUpsertCache[key]
	studioAdminUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			studioAdminAllColumns,
			studioAdminColumnsWithDefault,
			studioAdminColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			studioAdminAllColumns,
			studioAdminPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert studio_admins, could not build update column list")
		}

		ret := strmangle.SetComplement(studioAdminAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(studioAdminPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert studio_admins, could not build conflict column list")
			}

			conflict = make([]string, len(studioAdminPrimaryKeyColumns))
			copy(conflict, studioAdminPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"studio_admins\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(studioAdminType, studioAdminMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studioAdminType, studioAdminMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert studio_admins")
	}

	if !cached {
		studioAdminUpsertCacheMut.Lock()
		studioAdminUpsertCache[key] = cache
		studioAdminUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StudioAdmin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StudioAdmin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StudioAdmin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studioAdminPrimaryKeyMapping)
	sql := "DELETE FROM \"studio_admins\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from studio_admins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for studio_admins")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q studioAdminQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no studioAdminQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studio_admins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studio_admins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudioAdminSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(studioAdminBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioAdminPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"studio_admins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioAdminPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studioAdmin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studio_admins")
	}

	if len(studioAdminAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StudioAdmin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStudioAdmin(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudioAdminSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StudioAdminSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioAdminPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"studio_admins\".* FROM \"studio_admins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioAdminPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudioAdminSlice")
	}

	*o = slice

	return nil
}

// StudioAdminExists checks if the StudioAdmin row exists.
func StudioAdminExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"studio_admins\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if studio_admins exists")
	}

	return exists, nil
}

// Exists checks if the StudioAdmin row exists.
func (o *StudioAdmin) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StudioAdminExists(ctx, exec, o.ID)
}
