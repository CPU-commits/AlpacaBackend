// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tattoo is an object representing the database table.
type Tattoo struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDProfile   int64       `boil:"id_profile" json:"id_profile" toml:"id_profile" yaml:"id_profile"`
	IDImage     int64       `boil:"id_image" json:"id_image" toml:"id_image" yaml:"id_image"`
	Likes       int         `boil:"likes" json:"likes" toml:"likes" yaml:"likes"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Popularity  int         `boil:"popularity" json:"popularity" toml:"popularity" yaml:"popularity"`
	IDPost      null.Int64  `boil:"id_post" json:"id_post,omitempty" toml:"id_post" yaml:"id_post,omitempty"`
	Views       int         `boil:"views" json:"views" toml:"views" yaml:"views"`
	Coordinate  null.String `boil:"coordinate" json:"coordinate,omitempty" toml:"coordinate" yaml:"coordinate,omitempty"`

	R *tattooR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tattooL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TattooColumns = struct {
	ID          string
	IDProfile   string
	IDImage     string
	Likes       string
	Description string
	CreatedAt   string
	Popularity  string
	IDPost      string
	Views       string
	Coordinate  string
}{
	ID:          "id",
	IDProfile:   "id_profile",
	IDImage:     "id_image",
	Likes:       "likes",
	Description: "description",
	CreatedAt:   "created_at",
	Popularity:  "popularity",
	IDPost:      "id_post",
	Views:       "views",
	Coordinate:  "coordinate",
}

var TattooTableColumns = struct {
	ID          string
	IDProfile   string
	IDImage     string
	Likes       string
	Description string
	CreatedAt   string
	Popularity  string
	IDPost      string
	Views       string
	Coordinate  string
}{
	ID:          "tattoos.id",
	IDProfile:   "tattoos.id_profile",
	IDImage:     "tattoos.id_image",
	Likes:       "tattoos.likes",
	Description: "tattoos.description",
	CreatedAt:   "tattoos.created_at",
	Popularity:  "tattoos.popularity",
	IDPost:      "tattoos.id_post",
	Views:       "tattoos.views",
	Coordinate:  "tattoos.coordinate",
}

// Generated where

var TattooWhere = struct {
	ID          whereHelperint64
	IDProfile   whereHelperint64
	IDImage     whereHelperint64
	Likes       whereHelperint
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	Popularity  whereHelperint
	IDPost      whereHelpernull_Int64
	Views       whereHelperint
	Coordinate  whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"tattoos\".\"id\""},
	IDProfile:   whereHelperint64{field: "\"tattoos\".\"id_profile\""},
	IDImage:     whereHelperint64{field: "\"tattoos\".\"id_image\""},
	Likes:       whereHelperint{field: "\"tattoos\".\"likes\""},
	Description: whereHelpernull_String{field: "\"tattoos\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"tattoos\".\"created_at\""},
	Popularity:  whereHelperint{field: "\"tattoos\".\"popularity\""},
	IDPost:      whereHelpernull_Int64{field: "\"tattoos\".\"id_post\""},
	Views:       whereHelperint{field: "\"tattoos\".\"views\""},
	Coordinate:  whereHelpernull_String{field: "\"tattoos\".\"coordinate\""},
}

// TattooRels is where relationship names are stored.
var TattooRels = struct {
	IDProfileProfile         string
	IDPostPost               string
	IDImageImage             string
	IDTattooTattooCategories string
}{
	IDProfileProfile:         "IDProfileProfile",
	IDPostPost:               "IDPostPost",
	IDImageImage:             "IDImageImage",
	IDTattooTattooCategories: "IDTattooTattooCategories",
}

// tattooR is where relationships are stored.
type tattooR struct {
	IDProfileProfile         *Profile            `boil:"IDProfileProfile" json:"IDProfileProfile" toml:"IDProfileProfile" yaml:"IDProfileProfile"`
	IDPostPost               *Post               `boil:"IDPostPost" json:"IDPostPost" toml:"IDPostPost" yaml:"IDPostPost"`
	IDImageImage             *Image              `boil:"IDImageImage" json:"IDImageImage" toml:"IDImageImage" yaml:"IDImageImage"`
	IDTattooTattooCategories TattooCategorySlice `boil:"IDTattooTattooCategories" json:"IDTattooTattooCategories" toml:"IDTattooTattooCategories" yaml:"IDTattooTattooCategories"`
}

// NewStruct creates a new relationship struct
func (*tattooR) NewStruct() *tattooR {
	return &tattooR{}
}

func (r *tattooR) GetIDProfileProfile() *Profile {
	if r == nil {
		return nil
	}
	return r.IDProfileProfile
}

func (r *tattooR) GetIDPostPost() *Post {
	if r == nil {
		return nil
	}
	return r.IDPostPost
}

func (r *tattooR) GetIDImageImage() *Image {
	if r == nil {
		return nil
	}
	return r.IDImageImage
}

func (r *tattooR) GetIDTattooTattooCategories() TattooCategorySlice {
	if r == nil {
		return nil
	}
	return r.IDTattooTattooCategories
}

// tattooL is where Load methods for each relationship are stored.
type tattooL struct{}

var (
	tattooAllColumns            = []string{"id", "id_profile", "id_image", "likes", "description", "created_at", "popularity", "id_post", "views", "coordinate"}
	tattooColumnsWithoutDefault = []string{"id_profile", "id_image"}
	tattooColumnsWithDefault    = []string{"id", "likes", "description", "created_at", "popularity", "id_post", "views", "coordinate"}
	tattooPrimaryKeyColumns     = []string{"id"}
	tattooGeneratedColumns      = []string{}
)

type (
	// TattooSlice is an alias for a slice of pointers to Tattoo.
	// This should almost always be used instead of []Tattoo.
	TattooSlice []*Tattoo
	// TattooHook is the signature for custom Tattoo hook methods
	TattooHook func(context.Context, boil.ContextExecutor, *Tattoo) error

	tattooQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tattooType                 = reflect.TypeOf(&Tattoo{})
	tattooMapping              = queries.MakeStructMapping(tattooType)
	tattooPrimaryKeyMapping, _ = queries.BindMapping(tattooType, tattooMapping, tattooPrimaryKeyColumns)
	tattooInsertCacheMut       sync.RWMutex
	tattooInsertCache          = make(map[string]insertCache)
	tattooUpdateCacheMut       sync.RWMutex
	tattooUpdateCache          = make(map[string]updateCache)
	tattooUpsertCacheMut       sync.RWMutex
	tattooUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tattooAfterSelectMu sync.Mutex
var tattooAfterSelectHooks []TattooHook

var tattooBeforeInsertMu sync.Mutex
var tattooBeforeInsertHooks []TattooHook
var tattooAfterInsertMu sync.Mutex
var tattooAfterInsertHooks []TattooHook

var tattooBeforeUpdateMu sync.Mutex
var tattooBeforeUpdateHooks []TattooHook
var tattooAfterUpdateMu sync.Mutex
var tattooAfterUpdateHooks []TattooHook

var tattooBeforeDeleteMu sync.Mutex
var tattooBeforeDeleteHooks []TattooHook
var tattooAfterDeleteMu sync.Mutex
var tattooAfterDeleteHooks []TattooHook

var tattooBeforeUpsertMu sync.Mutex
var tattooBeforeUpsertHooks []TattooHook
var tattooAfterUpsertMu sync.Mutex
var tattooAfterUpsertHooks []TattooHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tattoo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tattoo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tattoo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tattoo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tattoo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tattoo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tattoo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tattoo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tattoo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tattooAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTattooHook registers your hook function for all future operations.
func AddTattooHook(hookPoint boil.HookPoint, tattooHook TattooHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tattooAfterSelectMu.Lock()
		tattooAfterSelectHooks = append(tattooAfterSelectHooks, tattooHook)
		tattooAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tattooBeforeInsertMu.Lock()
		tattooBeforeInsertHooks = append(tattooBeforeInsertHooks, tattooHook)
		tattooBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tattooAfterInsertMu.Lock()
		tattooAfterInsertHooks = append(tattooAfterInsertHooks, tattooHook)
		tattooAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tattooBeforeUpdateMu.Lock()
		tattooBeforeUpdateHooks = append(tattooBeforeUpdateHooks, tattooHook)
		tattooBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tattooAfterUpdateMu.Lock()
		tattooAfterUpdateHooks = append(tattooAfterUpdateHooks, tattooHook)
		tattooAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tattooBeforeDeleteMu.Lock()
		tattooBeforeDeleteHooks = append(tattooBeforeDeleteHooks, tattooHook)
		tattooBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tattooAfterDeleteMu.Lock()
		tattooAfterDeleteHooks = append(tattooAfterDeleteHooks, tattooHook)
		tattooAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tattooBeforeUpsertMu.Lock()
		tattooBeforeUpsertHooks = append(tattooBeforeUpsertHooks, tattooHook)
		tattooBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tattooAfterUpsertMu.Lock()
		tattooAfterUpsertHooks = append(tattooAfterUpsertHooks, tattooHook)
		tattooAfterUpsertMu.Unlock()
	}
}

// One returns a single tattoo record from the query.
func (q tattooQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tattoo, error) {
	o := &Tattoo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tattoos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tattoo records from the query.
func (q tattooQuery) All(ctx context.Context, exec boil.ContextExecutor) (TattooSlice, error) {
	var o []*Tattoo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tattoo slice")
	}

	if len(tattooAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tattoo records in the query.
func (q tattooQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tattoos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tattooQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tattoos exists")
	}

	return count > 0, nil
}

// IDProfileProfile pointed to by the foreign key.
func (o *Tattoo) IDProfileProfile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProfile),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// IDPostPost pointed to by the foreign key.
func (o *Tattoo) IDPostPost(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPost),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// IDImageImage pointed to by the foreign key.
func (o *Tattoo) IDImageImage(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDImage),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// IDTattooTattooCategories retrieves all the tattoo_category's TattooCategories with an executor via id_tattoo column.
func (o *Tattoo) IDTattooTattooCategories(mods ...qm.QueryMod) tattooCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tattoo_categories\".\"id_tattoo\"=?", o.ID),
	)

	return TattooCategories(queryMods...)
}

// LoadIDProfileProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tattooL) LoadIDProfileProfile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTattoo interface{}, mods queries.Applicator) error {
	var slice []*Tattoo
	var object *Tattoo

	if singular {
		var ok bool
		object, ok = maybeTattoo.(*Tattoo)
		if !ok {
			object = new(Tattoo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTattoo))
			}
		}
	} else {
		s, ok := maybeTattoo.(*[]*Tattoo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTattoo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tattooR{}
		}
		args[object.IDProfile] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tattooR{}
			}

			args[obj.IDProfile] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProfileProfile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.IDProfileTattoos = append(foreign.R.IDProfileTattoos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDProfile == foreign.ID {
				local.R.IDProfileProfile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.IDProfileTattoos = append(foreign.R.IDProfileTattoos, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPostPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tattooL) LoadIDPostPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTattoo interface{}, mods queries.Applicator) error {
	var slice []*Tattoo
	var object *Tattoo

	if singular {
		var ok bool
		object, ok = maybeTattoo.(*Tattoo)
		if !ok {
			object = new(Tattoo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTattoo))
			}
		}
	} else {
		s, ok := maybeTattoo.(*[]*Tattoo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTattoo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tattooR{}
		}
		if !queries.IsNil(object.IDPost) {
			args[object.IDPost] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tattooR{}
			}

			if !queries.IsNil(obj.IDPost) {
				args[obj.IDPost] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPostPost = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.IDPostTattoos = append(foreign.R.IDPostTattoos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDPost, foreign.ID) {
				local.R.IDPostPost = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.IDPostTattoos = append(foreign.R.IDPostTattoos, local)
				break
			}
		}
	}

	return nil
}

// LoadIDImageImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tattooL) LoadIDImageImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTattoo interface{}, mods queries.Applicator) error {
	var slice []*Tattoo
	var object *Tattoo

	if singular {
		var ok bool
		object, ok = maybeTattoo.(*Tattoo)
		if !ok {
			object = new(Tattoo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTattoo))
			}
		}
	} else {
		s, ok := maybeTattoo.(*[]*Tattoo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTattoo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tattooR{}
		}
		args[object.IDImage] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tattooR{}
			}

			args[obj.IDImage] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`images`),
		qm.WhereIn(`images.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for images")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDImageImage = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.IDImageTattoo = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDImage == foreign.ID {
				local.R.IDImageImage = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.IDImageTattoo = local
				break
			}
		}
	}

	return nil
}

// LoadIDTattooTattooCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tattooL) LoadIDTattooTattooCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTattoo interface{}, mods queries.Applicator) error {
	var slice []*Tattoo
	var object *Tattoo

	if singular {
		var ok bool
		object, ok = maybeTattoo.(*Tattoo)
		if !ok {
			object = new(Tattoo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTattoo))
			}
		}
	} else {
		s, ok := maybeTattoo.(*[]*Tattoo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTattoo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTattoo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tattooR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tattooR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tattoo_categories`),
		qm.WhereIn(`tattoo_categories.id_tattoo in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tattoo_categories")
	}

	var resultSlice []*TattooCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tattoo_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tattoo_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tattoo_categories")
	}

	if len(tattooCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDTattooTattooCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tattooCategoryR{}
			}
			foreign.R.IDTattooTattoo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDTattoo {
				local.R.IDTattooTattooCategories = append(local.R.IDTattooTattooCategories, foreign)
				if foreign.R == nil {
					foreign.R = &tattooCategoryR{}
				}
				foreign.R.IDTattooTattoo = local
				break
			}
		}
	}

	return nil
}

// SetIDProfileProfile of the tattoo to the related item.
// Sets o.R.IDProfileProfile to related.
// Adds o to related.R.IDProfileTattoos.
func (o *Tattoo) SetIDProfileProfile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tattoos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_profile"}),
		strmangle.WhereClause("\"", "\"", 2, tattooPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDProfile = related.ID
	if o.R == nil {
		o.R = &tattooR{
			IDProfileProfile: related,
		}
	} else {
		o.R.IDProfileProfile = related
	}

	if related.R == nil {
		related.R = &profileR{
			IDProfileTattoos: TattooSlice{o},
		}
	} else {
		related.R.IDProfileTattoos = append(related.R.IDProfileTattoos, o)
	}

	return nil
}

// SetIDPostPost of the tattoo to the related item.
// Sets o.R.IDPostPost to related.
// Adds o to related.R.IDPostTattoos.
func (o *Tattoo) SetIDPostPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tattoos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_post"}),
		strmangle.WhereClause("\"", "\"", 2, tattooPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDPost, related.ID)
	if o.R == nil {
		o.R = &tattooR{
			IDPostPost: related,
		}
	} else {
		o.R.IDPostPost = related
	}

	if related.R == nil {
		related.R = &postR{
			IDPostTattoos: TattooSlice{o},
		}
	} else {
		related.R.IDPostTattoos = append(related.R.IDPostTattoos, o)
	}

	return nil
}

// RemoveIDPostPost relationship.
// Sets o.R.IDPostPost to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Tattoo) RemoveIDPostPost(ctx context.Context, exec boil.ContextExecutor, related *Post) error {
	var err error

	queries.SetScanner(&o.IDPost, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_post")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDPostPost = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDPostTattoos {
		if queries.Equal(o.IDPost, ri.IDPost) {
			continue
		}

		ln := len(related.R.IDPostTattoos)
		if ln > 1 && i < ln-1 {
			related.R.IDPostTattoos[i] = related.R.IDPostTattoos[ln-1]
		}
		related.R.IDPostTattoos = related.R.IDPostTattoos[:ln-1]
		break
	}
	return nil
}

// SetIDImageImage of the tattoo to the related item.
// Sets o.R.IDImageImage to related.
// Adds o to related.R.IDImageTattoo.
func (o *Tattoo) SetIDImageImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tattoos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_image"}),
		strmangle.WhereClause("\"", "\"", 2, tattooPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDImage = related.ID
	if o.R == nil {
		o.R = &tattooR{
			IDImageImage: related,
		}
	} else {
		o.R.IDImageImage = related
	}

	if related.R == nil {
		related.R = &imageR{
			IDImageTattoo: o,
		}
	} else {
		related.R.IDImageTattoo = o
	}

	return nil
}

// AddIDTattooTattooCategories adds the given related objects to the existing relationships
// of the tattoo, optionally inserting them as new records.
// Appends related to o.R.IDTattooTattooCategories.
// Sets related.R.IDTattooTattoo appropriately.
func (o *Tattoo) AddIDTattooTattooCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TattooCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDTattoo = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tattoo_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_tattoo"}),
				strmangle.WhereClause("\"", "\"", 2, tattooCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDTattoo = o.ID
		}
	}

	if o.R == nil {
		o.R = &tattooR{
			IDTattooTattooCategories: related,
		}
	} else {
		o.R.IDTattooTattooCategories = append(o.R.IDTattooTattooCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tattooCategoryR{
				IDTattooTattoo: o,
			}
		} else {
			rel.R.IDTattooTattoo = o
		}
	}
	return nil
}

// Tattoos retrieves all the records using an executor.
func Tattoos(mods ...qm.QueryMod) tattooQuery {
	mods = append(mods, qm.From("\"tattoos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tattoos\".*"})
	}

	return tattooQuery{q}
}

// FindTattoo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTattoo(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Tattoo, error) {
	tattooObj := &Tattoo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tattoos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tattooObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tattoos")
	}

	if err = tattooObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tattooObj, err
	}

	return tattooObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tattoo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tattoos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tattooColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tattooInsertCacheMut.RLock()
	cache, cached := tattooInsertCache[key]
	tattooInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tattooAllColumns,
			tattooColumnsWithDefault,
			tattooColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tattooType, tattooMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tattooType, tattooMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tattoos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tattoos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tattoos")
	}

	if !cached {
		tattooInsertCacheMut.Lock()
		tattooInsertCache[key] = cache
		tattooInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tattoo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tattoo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tattooUpdateCacheMut.RLock()
	cache, cached := tattooUpdateCache[key]
	tattooUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tattooAllColumns,
			tattooPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tattoos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tattoos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tattooPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tattooType, tattooMapping, append(wl, tattooPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tattoos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tattoos")
	}

	if !cached {
		tattooUpdateCacheMut.Lock()
		tattooUpdateCache[key] = cache
		tattooUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tattooQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tattoos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tattoos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TattooSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tattooPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tattoos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tattooPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tattoo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tattoo")
	}
	return rowsAff, nil
}

// Delete deletes a single Tattoo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tattoo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tattoo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tattooPrimaryKeyMapping)
	sql := "DELETE FROM \"tattoos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tattoos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tattoos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tattooQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tattooQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tattoos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tattoos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TattooSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tattooBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tattooPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tattoos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tattooPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tattoo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tattoos")
	}

	if len(tattooAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tattoo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTattoo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TattooSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TattooSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tattooPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tattoos\".* FROM \"tattoos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tattooPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TattooSlice")
	}

	*o = slice

	return nil
}

// TattooExists checks if the Tattoo row exists.
func TattooExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tattoos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tattoos exists")
	}

	return exists, nil
}

// Exists checks if the Tattoo row exists.
func (o *Tattoo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TattooExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tattoo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tattoos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tattooColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tattooUpsertCacheMut.RLock()
	cache, cached := tattooUpsertCache[key]
	tattooUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tattooAllColumns,
			tattooColumnsWithDefault,
			tattooColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tattooAllColumns,
			tattooPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tattoos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tattooPrimaryKeyColumns))
			copy(conflict, tattooPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"tattoos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tattooType, tattooMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tattooType, tattooMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return fmt.Errorf("models: unable to upsert tattoos: %w", err)
	}

	if !cached {
		tattooUpsertCacheMut.Lock()
		tattooUpsertCache[key] = cache
		tattooUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
