// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// StudioUser is an object representing the database table.
type StudioUser struct {
	ID        int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDStudio  int64      `boil:"id_studio" json:"id_studio" toml:"id_studio" yaml:"id_studio"`
	IDUser    int64      `boil:"id_user" json:"id_user" toml:"id_user" yaml:"id_user"`
	Roles     types.JSON `boil:"roles" json:"roles" toml:"roles" yaml:"roles"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *studioUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L studioUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StudioUserColumns = struct {
	ID        string
	IDStudio  string
	IDUser    string
	Roles     string
	CreatedAt string
}{
	ID:        "id",
	IDStudio:  "id_studio",
	IDUser:    "id_user",
	Roles:     "roles",
	CreatedAt: "created_at",
}

var StudioUserTableColumns = struct {
	ID        string
	IDStudio  string
	IDUser    string
	Roles     string
	CreatedAt string
}{
	ID:        "studio_users.id",
	IDStudio:  "studio_users.id_studio",
	IDUser:    "studio_users.id_user",
	Roles:     "studio_users.roles",
	CreatedAt: "studio_users.created_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StudioUserWhere = struct {
	ID        whereHelperint64
	IDStudio  whereHelperint64
	IDUser    whereHelperint64
	Roles     whereHelpertypes_JSON
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"studio_users\".\"id\""},
	IDStudio:  whereHelperint64{field: "\"studio_users\".\"id_studio\""},
	IDUser:    whereHelperint64{field: "\"studio_users\".\"id_user\""},
	Roles:     whereHelpertypes_JSON{field: "\"studio_users\".\"roles\""},
	CreatedAt: whereHelpertime_Time{field: "\"studio_users\".\"created_at\""},
}

// StudioUserRels is where relationship names are stored.
var StudioUserRels = struct {
	IDStudioStudio                 string
	IDUserUser                     string
	IDAdminStudioAdminsPermissions string
}{
	IDStudioStudio:                 "IDStudioStudio",
	IDUserUser:                     "IDUserUser",
	IDAdminStudioAdminsPermissions: "IDAdminStudioAdminsPermissions",
}

// studioUserR is where relationships are stored.
type studioUserR struct {
	IDStudioStudio                 *Studio                     `boil:"IDStudioStudio" json:"IDStudioStudio" toml:"IDStudioStudio" yaml:"IDStudioStudio"`
	IDUserUser                     *User                       `boil:"IDUserUser" json:"IDUserUser" toml:"IDUserUser" yaml:"IDUserUser"`
	IDAdminStudioAdminsPermissions StudioAdminsPermissionSlice `boil:"IDAdminStudioAdminsPermissions" json:"IDAdminStudioAdminsPermissions" toml:"IDAdminStudioAdminsPermissions" yaml:"IDAdminStudioAdminsPermissions"`
}

// NewStruct creates a new relationship struct
func (*studioUserR) NewStruct() *studioUserR {
	return &studioUserR{}
}

func (o *StudioUser) GetIDStudioStudio() *Studio {
	if o == nil {
		return nil
	}

	return o.R.GetIDStudioStudio()
}

func (r *studioUserR) GetIDStudioStudio() *Studio {
	if r == nil {
		return nil
	}

	return r.IDStudioStudio
}

func (o *StudioUser) GetIDUserUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserUser()
}

func (r *studioUserR) GetIDUserUser() *User {
	if r == nil {
		return nil
	}

	return r.IDUserUser
}

func (o *StudioUser) GetIDAdminStudioAdminsPermissions() StudioAdminsPermissionSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDAdminStudioAdminsPermissions()
}

func (r *studioUserR) GetIDAdminStudioAdminsPermissions() StudioAdminsPermissionSlice {
	if r == nil {
		return nil
	}

	return r.IDAdminStudioAdminsPermissions
}

// studioUserL is where Load methods for each relationship are stored.
type studioUserL struct{}

var (
	studioUserAllColumns            = []string{"id", "id_studio", "id_user", "roles", "created_at"}
	studioUserColumnsWithoutDefault = []string{"id_studio", "id_user", "roles"}
	studioUserColumnsWithDefault    = []string{"id", "created_at"}
	studioUserPrimaryKeyColumns     = []string{"id"}
	studioUserGeneratedColumns      = []string{}
)

type (
	// StudioUserSlice is an alias for a slice of pointers to StudioUser.
	// This should almost always be used instead of []StudioUser.
	StudioUserSlice []*StudioUser
	// StudioUserHook is the signature for custom StudioUser hook methods
	StudioUserHook func(context.Context, boil.ContextExecutor, *StudioUser) error

	studioUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	studioUserType                 = reflect.TypeOf(&StudioUser{})
	studioUserMapping              = queries.MakeStructMapping(studioUserType)
	studioUserPrimaryKeyMapping, _ = queries.BindMapping(studioUserType, studioUserMapping, studioUserPrimaryKeyColumns)
	studioUserInsertCacheMut       sync.RWMutex
	studioUserInsertCache          = make(map[string]insertCache)
	studioUserUpdateCacheMut       sync.RWMutex
	studioUserUpdateCache          = make(map[string]updateCache)
	studioUserUpsertCacheMut       sync.RWMutex
	studioUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var studioUserAfterSelectMu sync.Mutex
var studioUserAfterSelectHooks []StudioUserHook

var studioUserBeforeInsertMu sync.Mutex
var studioUserBeforeInsertHooks []StudioUserHook
var studioUserAfterInsertMu sync.Mutex
var studioUserAfterInsertHooks []StudioUserHook

var studioUserBeforeUpdateMu sync.Mutex
var studioUserBeforeUpdateHooks []StudioUserHook
var studioUserAfterUpdateMu sync.Mutex
var studioUserAfterUpdateHooks []StudioUserHook

var studioUserBeforeDeleteMu sync.Mutex
var studioUserBeforeDeleteHooks []StudioUserHook
var studioUserAfterDeleteMu sync.Mutex
var studioUserAfterDeleteHooks []StudioUserHook

var studioUserBeforeUpsertMu sync.Mutex
var studioUserBeforeUpsertHooks []StudioUserHook
var studioUserAfterUpsertMu sync.Mutex
var studioUserAfterUpsertHooks []StudioUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StudioUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StudioUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StudioUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StudioUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StudioUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StudioUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StudioUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StudioUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StudioUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range studioUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStudioUserHook registers your hook function for all future operations.
func AddStudioUserHook(hookPoint boil.HookPoint, studioUserHook StudioUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		studioUserAfterSelectMu.Lock()
		studioUserAfterSelectHooks = append(studioUserAfterSelectHooks, studioUserHook)
		studioUserAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		studioUserBeforeInsertMu.Lock()
		studioUserBeforeInsertHooks = append(studioUserBeforeInsertHooks, studioUserHook)
		studioUserBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		studioUserAfterInsertMu.Lock()
		studioUserAfterInsertHooks = append(studioUserAfterInsertHooks, studioUserHook)
		studioUserAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		studioUserBeforeUpdateMu.Lock()
		studioUserBeforeUpdateHooks = append(studioUserBeforeUpdateHooks, studioUserHook)
		studioUserBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		studioUserAfterUpdateMu.Lock()
		studioUserAfterUpdateHooks = append(studioUserAfterUpdateHooks, studioUserHook)
		studioUserAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		studioUserBeforeDeleteMu.Lock()
		studioUserBeforeDeleteHooks = append(studioUserBeforeDeleteHooks, studioUserHook)
		studioUserBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		studioUserAfterDeleteMu.Lock()
		studioUserAfterDeleteHooks = append(studioUserAfterDeleteHooks, studioUserHook)
		studioUserAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		studioUserBeforeUpsertMu.Lock()
		studioUserBeforeUpsertHooks = append(studioUserBeforeUpsertHooks, studioUserHook)
		studioUserBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		studioUserAfterUpsertMu.Lock()
		studioUserAfterUpsertHooks = append(studioUserAfterUpsertHooks, studioUserHook)
		studioUserAfterUpsertMu.Unlock()
	}
}

// One returns a single studioUser record from the query.
func (q studioUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StudioUser, error) {
	o := &StudioUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for studio_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StudioUser records from the query.
func (q studioUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (StudioUserSlice, error) {
	var o []*StudioUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StudioUser slice")
	}

	if len(studioUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StudioUser records in the query.
func (q studioUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count studio_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q studioUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if studio_users exists")
	}

	return count > 0, nil
}

// IDStudioStudio pointed to by the foreign key.
func (o *StudioUser) IDStudioStudio(mods ...qm.QueryMod) studioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDStudio),
	}

	queryMods = append(queryMods, mods...)

	return Studios(queryMods...)
}

// IDUserUser pointed to by the foreign key.
func (o *StudioUser) IDUserUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUser),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDAdminStudioAdminsPermissions retrieves all the studio_admins_permission's StudioAdminsPermissions with an executor via id_admin column.
func (o *StudioUser) IDAdminStudioAdminsPermissions(mods ...qm.QueryMod) studioAdminsPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"studio_admins_permissions\".\"id_admin\"=?", o.ID),
	)

	return StudioAdminsPermissions(queryMods...)
}

// LoadIDStudioStudio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioUserL) LoadIDStudioStudio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioUser interface{}, mods queries.Applicator) error {
	var slice []*StudioUser
	var object *StudioUser

	if singular {
		var ok bool
		object, ok = maybeStudioUser.(*StudioUser)
		if !ok {
			object = new(StudioUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioUser))
			}
		}
	} else {
		s, ok := maybeStudioUser.(*[]*StudioUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioUserR{}
		}
		args[object.IDStudio] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioUserR{}
			}

			args[obj.IDStudio] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studios`),
		qm.WhereIn(`studios.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Studio")
	}

	var resultSlice []*Studio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Studio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for studios")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studios")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDStudioStudio = foreign
		if foreign.R == nil {
			foreign.R = &studioR{}
		}
		foreign.R.IDStudioStudioUsers = append(foreign.R.IDStudioStudioUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDStudio == foreign.ID {
				local.R.IDStudioStudio = foreign
				if foreign.R == nil {
					foreign.R = &studioR{}
				}
				foreign.R.IDStudioStudioUsers = append(foreign.R.IDStudioStudioUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadIDUserUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (studioUserL) LoadIDUserUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioUser interface{}, mods queries.Applicator) error {
	var slice []*StudioUser
	var object *StudioUser

	if singular {
		var ok bool
		object, ok = maybeStudioUser.(*StudioUser)
		if !ok {
			object = new(StudioUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioUser))
			}
		}
	} else {
		s, ok := maybeStudioUser.(*[]*StudioUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioUserR{}
		}
		args[object.IDUser] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioUserR{}
			}

			args[obj.IDUser] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUserStudioUsers = append(foreign.R.IDUserStudioUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUser == foreign.ID {
				local.R.IDUserUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUserStudioUsers = append(foreign.R.IDUserStudioUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadIDAdminStudioAdminsPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (studioUserL) LoadIDAdminStudioAdminsPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStudioUser interface{}, mods queries.Applicator) error {
	var slice []*StudioUser
	var object *StudioUser

	if singular {
		var ok bool
		object, ok = maybeStudioUser.(*StudioUser)
		if !ok {
			object = new(StudioUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStudioUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStudioUser))
			}
		}
	} else {
		s, ok := maybeStudioUser.(*[]*StudioUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStudioUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStudioUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &studioUserR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &studioUserR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studio_admins_permissions`),
		qm.WhereIn(`studio_admins_permissions.id_admin in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load studio_admins_permissions")
	}

	var resultSlice []*StudioAdminsPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice studio_admins_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on studio_admins_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studio_admins_permissions")
	}

	if len(studioAdminsPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDAdminStudioAdminsPermissions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studioAdminsPermissionR{}
			}
			foreign.R.IDAdminStudioUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDAdmin {
				local.R.IDAdminStudioAdminsPermissions = append(local.R.IDAdminStudioAdminsPermissions, foreign)
				if foreign.R == nil {
					foreign.R = &studioAdminsPermissionR{}
				}
				foreign.R.IDAdminStudioUser = local
				break
			}
		}
	}

	return nil
}

// SetIDStudioStudio of the studioUser to the related item.
// Sets o.R.IDStudioStudio to related.
// Adds o to related.R.IDStudioStudioUsers.
func (o *StudioUser) SetIDStudioStudio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Studio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studio_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_studio"}),
		strmangle.WhereClause("\"", "\"", 2, studioUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDStudio = related.ID
	if o.R == nil {
		o.R = &studioUserR{
			IDStudioStudio: related,
		}
	} else {
		o.R.IDStudioStudio = related
	}

	if related.R == nil {
		related.R = &studioR{
			IDStudioStudioUsers: StudioUserSlice{o},
		}
	} else {
		related.R.IDStudioStudioUsers = append(related.R.IDStudioStudioUsers, o)
	}

	return nil
}

// SetIDUserUser of the studioUser to the related item.
// Sets o.R.IDUserUser to related.
// Adds o to related.R.IDUserStudioUsers.
func (o *StudioUser) SetIDUserUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"studio_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
		strmangle.WhereClause("\"", "\"", 2, studioUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUser = related.ID
	if o.R == nil {
		o.R = &studioUserR{
			IDUserUser: related,
		}
	} else {
		o.R.IDUserUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUserStudioUsers: StudioUserSlice{o},
		}
	} else {
		related.R.IDUserStudioUsers = append(related.R.IDUserStudioUsers, o)
	}

	return nil
}

// AddIDAdminStudioAdminsPermissions adds the given related objects to the existing relationships
// of the studio_user, optionally inserting them as new records.
// Appends related to o.R.IDAdminStudioAdminsPermissions.
// Sets related.R.IDAdminStudioUser appropriately.
func (o *StudioUser) AddIDAdminStudioAdminsPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StudioAdminsPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDAdmin = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"studio_admins_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_admin"}),
				strmangle.WhereClause("\"", "\"", 2, studioAdminsPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDAdmin = o.ID
		}
	}

	if o.R == nil {
		o.R = &studioUserR{
			IDAdminStudioAdminsPermissions: related,
		}
	} else {
		o.R.IDAdminStudioAdminsPermissions = append(o.R.IDAdminStudioAdminsPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studioAdminsPermissionR{
				IDAdminStudioUser: o,
			}
		} else {
			rel.R.IDAdminStudioUser = o
		}
	}
	return nil
}

// StudioUsers retrieves all the records using an executor.
func StudioUsers(mods ...qm.QueryMod) studioUserQuery {
	mods = append(mods, qm.From("\"studio_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"studio_users\".*"})
	}

	return studioUserQuery{q}
}

// FindStudioUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStudioUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*StudioUser, error) {
	studioUserObj := &StudioUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"studio_users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, studioUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from studio_users")
	}

	if err = studioUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return studioUserObj, err
	}

	return studioUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StudioUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no studio_users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	studioUserInsertCacheMut.RLock()
	cache, cached := studioUserInsertCache[key]
	studioUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			studioUserAllColumns,
			studioUserColumnsWithDefault,
			studioUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(studioUserType, studioUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(studioUserType, studioUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"studio_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"studio_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into studio_users")
	}

	if !cached {
		studioUserInsertCacheMut.Lock()
		studioUserInsertCache[key] = cache
		studioUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StudioUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StudioUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	studioUserUpdateCacheMut.RLock()
	cache, cached := studioUserUpdateCache[key]
	studioUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			studioUserAllColumns,
			studioUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update studio_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"studio_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, studioUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(studioUserType, studioUserMapping, append(wl, studioUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update studio_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for studio_users")
	}

	if !cached {
		studioUserUpdateCacheMut.Lock()
		studioUserUpdateCache[key] = cache
		studioUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q studioUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for studio_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for studio_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StudioUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"studio_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, studioUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in studioUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all studioUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StudioUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no studio_users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(studioUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	studioUserUpsertCacheMut.RLock()
	cache, cached := studioUserUpsertCache[key]
	studioUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			studioUserAllColumns,
			studioUserColumnsWithDefault,
			studioUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			studioUserAllColumns,
			studioUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert studio_users, could not build update column list")
		}

		ret := strmangle.SetComplement(studioUserAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(studioUserPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert studio_users, could not build conflict column list")
			}

			conflict = make([]string, len(studioUserPrimaryKeyColumns))
			copy(conflict, studioUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"studio_users\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(studioUserType, studioUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(studioUserType, studioUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert studio_users")
	}

	if !cached {
		studioUserUpsertCacheMut.Lock()
		studioUserUpsertCache[key] = cache
		studioUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StudioUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StudioUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StudioUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), studioUserPrimaryKeyMapping)
	sql := "DELETE FROM \"studio_users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from studio_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for studio_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q studioUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no studioUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studio_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studio_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StudioUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(studioUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"studio_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from studioUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for studio_users")
	}

	if len(studioUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StudioUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStudioUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StudioUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StudioUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), studioUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"studio_users\".* FROM \"studio_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, studioUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StudioUserSlice")
	}

	*o = slice

	return nil
}

// StudioUserExists checks if the StudioUser row exists.
func StudioUserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"studio_users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if studio_users exists")
	}

	return exists, nil
}

// Exists checks if the StudioUser row exists.
func (o *StudioUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StudioUserExists(ctx, exec, o.ID)
}
