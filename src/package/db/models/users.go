// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// User is an object representing the database table.
type User struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email     string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Username  string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	Phone     null.String `boil:"phone" json:"phone,omitempty" toml:"phone" yaml:"phone,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Location  null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID        string
	Email     string
	Name      string
	Username  string
	Phone     string
	CreatedAt string
	Location  string
}{
	ID:        "id",
	Email:     "email",
	Name:      "name",
	Username:  "username",
	Phone:     "phone",
	CreatedAt: "created_at",
	Location:  "location",
}

var UserTableColumns = struct {
	ID        string
	Email     string
	Name      string
	Username  string
	Phone     string
	CreatedAt string
	Location  string
}{
	ID:        "users.id",
	Email:     "users.email",
	Name:      "users.name",
	Username:  "users.username",
	Phone:     "users.phone",
	CreatedAt: "users.created_at",
	Location:  "users.location",
}

// Generated where

var UserWhere = struct {
	ID        whereHelperint64
	Email     whereHelperstring
	Name      whereHelperstring
	Username  whereHelperstring
	Phone     whereHelpernull_String
	CreatedAt whereHelpertime_Time
	Location  whereHelpernull_String
}{
	ID:        whereHelperint64{field: "\"users\".\"id\""},
	Email:     whereHelperstring{field: "\"users\".\"email\""},
	Name:      whereHelperstring{field: "\"users\".\"name\""},
	Username:  whereHelperstring{field: "\"users\".\"username\""},
	Phone:     whereHelpernull_String{field: "\"users\".\"phone\""},
	CreatedAt: whereHelpertime_Time{field: "\"users\".\"created_at\""},
	Location:  whereHelpernull_String{field: "\"users\".\"location\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	IDUserAuth                 string
	IDUserProfile              string
	IDUserTokenPassword        string
	IDTattooArtistAppointments string
	IDUserAppointments         string
	IDUserCodes                string
	IDUserFollows              string
	IDUserLikes                string
	IDUserLinks                string
	IDUserPayments             string
	IDUserReviews              string
	IDUserRolesUsers           string
	IDUserShares               string
	IDUserStudioUsers          string
	IDOwnerStudios             string
	IDUserSubscriptions        string
	IDUserTokens               string
	IDUserViews                string
}{
	IDUserAuth:                 "IDUserAuth",
	IDUserProfile:              "IDUserProfile",
	IDUserTokenPassword:        "IDUserTokenPassword",
	IDTattooArtistAppointments: "IDTattooArtistAppointments",
	IDUserAppointments:         "IDUserAppointments",
	IDUserCodes:                "IDUserCodes",
	IDUserFollows:              "IDUserFollows",
	IDUserLikes:                "IDUserLikes",
	IDUserLinks:                "IDUserLinks",
	IDUserPayments:             "IDUserPayments",
	IDUserReviews:              "IDUserReviews",
	IDUserRolesUsers:           "IDUserRolesUsers",
	IDUserShares:               "IDUserShares",
	IDUserStudioUsers:          "IDUserStudioUsers",
	IDOwnerStudios:             "IDOwnerStudios",
	IDUserSubscriptions:        "IDUserSubscriptions",
	IDUserTokens:               "IDUserTokens",
	IDUserViews:                "IDUserViews",
}

// userR is where relationships are stored.
type userR struct {
	IDUserAuth                 *Auth             `boil:"IDUserAuth" json:"IDUserAuth" toml:"IDUserAuth" yaml:"IDUserAuth"`
	IDUserProfile              *Profile          `boil:"IDUserProfile" json:"IDUserProfile" toml:"IDUserProfile" yaml:"IDUserProfile"`
	IDUserTokenPassword        *TokenPassword    `boil:"IDUserTokenPassword" json:"IDUserTokenPassword" toml:"IDUserTokenPassword" yaml:"IDUserTokenPassword"`
	IDTattooArtistAppointments AppointmentSlice  `boil:"IDTattooArtistAppointments" json:"IDTattooArtistAppointments" toml:"IDTattooArtistAppointments" yaml:"IDTattooArtistAppointments"`
	IDUserAppointments         AppointmentSlice  `boil:"IDUserAppointments" json:"IDUserAppointments" toml:"IDUserAppointments" yaml:"IDUserAppointments"`
	IDUserCodes                CodeSlice         `boil:"IDUserCodes" json:"IDUserCodes" toml:"IDUserCodes" yaml:"IDUserCodes"`
	IDUserFollows              FollowSlice       `boil:"IDUserFollows" json:"IDUserFollows" toml:"IDUserFollows" yaml:"IDUserFollows"`
	IDUserLikes                LikeSlice         `boil:"IDUserLikes" json:"IDUserLikes" toml:"IDUserLikes" yaml:"IDUserLikes"`
	IDUserLinks                LinkSlice         `boil:"IDUserLinks" json:"IDUserLinks" toml:"IDUserLinks" yaml:"IDUserLinks"`
	IDUserPayments             PaymentSlice      `boil:"IDUserPayments" json:"IDUserPayments" toml:"IDUserPayments" yaml:"IDUserPayments"`
	IDUserReviews              ReviewSlice       `boil:"IDUserReviews" json:"IDUserReviews" toml:"IDUserReviews" yaml:"IDUserReviews"`
	IDUserRolesUsers           RolesUserSlice    `boil:"IDUserRolesUsers" json:"IDUserRolesUsers" toml:"IDUserRolesUsers" yaml:"IDUserRolesUsers"`
	IDUserShares               ShareSlice        `boil:"IDUserShares" json:"IDUserShares" toml:"IDUserShares" yaml:"IDUserShares"`
	IDUserStudioUsers          StudioUserSlice   `boil:"IDUserStudioUsers" json:"IDUserStudioUsers" toml:"IDUserStudioUsers" yaml:"IDUserStudioUsers"`
	IDOwnerStudios             StudioSlice       `boil:"IDOwnerStudios" json:"IDOwnerStudios" toml:"IDOwnerStudios" yaml:"IDOwnerStudios"`
	IDUserSubscriptions        SubscriptionSlice `boil:"IDUserSubscriptions" json:"IDUserSubscriptions" toml:"IDUserSubscriptions" yaml:"IDUserSubscriptions"`
	IDUserTokens               TokenSlice        `boil:"IDUserTokens" json:"IDUserTokens" toml:"IDUserTokens" yaml:"IDUserTokens"`
	IDUserViews                ViewSlice         `boil:"IDUserViews" json:"IDUserViews" toml:"IDUserViews" yaml:"IDUserViews"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

func (o *User) GetIDUserAuth() *Auth {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserAuth()
}

func (r *userR) GetIDUserAuth() *Auth {
	if r == nil {
		return nil
	}

	return r.IDUserAuth
}

func (o *User) GetIDUserProfile() *Profile {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserProfile()
}

func (r *userR) GetIDUserProfile() *Profile {
	if r == nil {
		return nil
	}

	return r.IDUserProfile
}

func (o *User) GetIDUserTokenPassword() *TokenPassword {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserTokenPassword()
}

func (r *userR) GetIDUserTokenPassword() *TokenPassword {
	if r == nil {
		return nil
	}

	return r.IDUserTokenPassword
}

func (o *User) GetIDTattooArtistAppointments() AppointmentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDTattooArtistAppointments()
}

func (r *userR) GetIDTattooArtistAppointments() AppointmentSlice {
	if r == nil {
		return nil
	}

	return r.IDTattooArtistAppointments
}

func (o *User) GetIDUserAppointments() AppointmentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserAppointments()
}

func (r *userR) GetIDUserAppointments() AppointmentSlice {
	if r == nil {
		return nil
	}

	return r.IDUserAppointments
}

func (o *User) GetIDUserCodes() CodeSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserCodes()
}

func (r *userR) GetIDUserCodes() CodeSlice {
	if r == nil {
		return nil
	}

	return r.IDUserCodes
}

func (o *User) GetIDUserFollows() FollowSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserFollows()
}

func (r *userR) GetIDUserFollows() FollowSlice {
	if r == nil {
		return nil
	}

	return r.IDUserFollows
}

func (o *User) GetIDUserLikes() LikeSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserLikes()
}

func (r *userR) GetIDUserLikes() LikeSlice {
	if r == nil {
		return nil
	}

	return r.IDUserLikes
}

func (o *User) GetIDUserLinks() LinkSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserLinks()
}

func (r *userR) GetIDUserLinks() LinkSlice {
	if r == nil {
		return nil
	}

	return r.IDUserLinks
}

func (o *User) GetIDUserPayments() PaymentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserPayments()
}

func (r *userR) GetIDUserPayments() PaymentSlice {
	if r == nil {
		return nil
	}

	return r.IDUserPayments
}

func (o *User) GetIDUserReviews() ReviewSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserReviews()
}

func (r *userR) GetIDUserReviews() ReviewSlice {
	if r == nil {
		return nil
	}

	return r.IDUserReviews
}

func (o *User) GetIDUserRolesUsers() RolesUserSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserRolesUsers()
}

func (r *userR) GetIDUserRolesUsers() RolesUserSlice {
	if r == nil {
		return nil
	}

	return r.IDUserRolesUsers
}

func (o *User) GetIDUserShares() ShareSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserShares()
}

func (r *userR) GetIDUserShares() ShareSlice {
	if r == nil {
		return nil
	}

	return r.IDUserShares
}

func (o *User) GetIDUserStudioUsers() StudioUserSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserStudioUsers()
}

func (r *userR) GetIDUserStudioUsers() StudioUserSlice {
	if r == nil {
		return nil
	}

	return r.IDUserStudioUsers
}

func (o *User) GetIDOwnerStudios() StudioSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDOwnerStudios()
}

func (r *userR) GetIDOwnerStudios() StudioSlice {
	if r == nil {
		return nil
	}

	return r.IDOwnerStudios
}

func (o *User) GetIDUserSubscriptions() SubscriptionSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserSubscriptions()
}

func (r *userR) GetIDUserSubscriptions() SubscriptionSlice {
	if r == nil {
		return nil
	}

	return r.IDUserSubscriptions
}

func (o *User) GetIDUserTokens() TokenSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserTokens()
}

func (r *userR) GetIDUserTokens() TokenSlice {
	if r == nil {
		return nil
	}

	return r.IDUserTokens
}

func (o *User) GetIDUserViews() ViewSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDUserViews()
}

func (r *userR) GetIDUserViews() ViewSlice {
	if r == nil {
		return nil
	}

	return r.IDUserViews
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "email", "name", "username", "phone", "created_at", "location"}
	userColumnsWithoutDefault = []string{"email", "name", "username"}
	userColumnsWithDefault    = []string{"id", "phone", "created_at", "location"}
	userPrimaryKeyColumns     = []string{"id"}
	userGeneratedColumns      = []string{}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(context.Context, boil.ContextExecutor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAfterSelectMu sync.Mutex
var userAfterSelectHooks []UserHook

var userBeforeInsertMu sync.Mutex
var userBeforeInsertHooks []UserHook
var userAfterInsertMu sync.Mutex
var userAfterInsertHooks []UserHook

var userBeforeUpdateMu sync.Mutex
var userBeforeUpdateHooks []UserHook
var userAfterUpdateMu sync.Mutex
var userAfterUpdateHooks []UserHook

var userBeforeDeleteMu sync.Mutex
var userBeforeDeleteHooks []UserHook
var userAfterDeleteMu sync.Mutex
var userAfterDeleteHooks []UserHook

var userBeforeUpsertMu sync.Mutex
var userBeforeUpsertHooks []UserHook
var userAfterUpsertMu sync.Mutex
var userAfterUpsertHooks []UserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAfterSelectMu.Lock()
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
		userAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userBeforeInsertMu.Lock()
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
		userBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userAfterInsertMu.Lock()
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
		userAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userBeforeUpdateMu.Lock()
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
		userBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userAfterUpdateMu.Lock()
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
		userAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userBeforeDeleteMu.Lock()
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
		userBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userAfterDeleteMu.Lock()
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
		userAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userBeforeUpsertMu.Lock()
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
		userBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userAfterUpsertMu.Lock()
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
		userAfterUpsertMu.Unlock()
	}
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users exists")
	}

	return count > 0, nil
}

// IDUserAuth pointed to by the foreign key.
func (o *User) IDUserAuth(mods ...qm.QueryMod) authQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id_user\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Auths(queryMods...)
}

// IDUserProfile pointed to by the foreign key.
func (o *User) IDUserProfile(mods ...qm.QueryMod) profileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id_user\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Profiles(queryMods...)
}

// IDUserTokenPassword pointed to by the foreign key.
func (o *User) IDUserTokenPassword(mods ...qm.QueryMod) tokenPasswordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id_user\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return TokenPasswords(queryMods...)
}

// IDTattooArtistAppointments retrieves all the appointment's Appointments with an executor via id_tattoo_artist column.
func (o *User) IDTattooArtistAppointments(mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"appointments\".\"id_tattoo_artist\"=?", o.ID),
	)

	return Appointments(queryMods...)
}

// IDUserAppointments retrieves all the appointment's Appointments with an executor via id_user column.
func (o *User) IDUserAppointments(mods ...qm.QueryMod) appointmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"appointments\".\"id_user\"=?", o.ID),
	)

	return Appointments(queryMods...)
}

// IDUserCodes retrieves all the code's Codes with an executor via id_user column.
func (o *User) IDUserCodes(mods ...qm.QueryMod) codeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"codes\".\"id_user\"=?", o.ID),
	)

	return Codes(queryMods...)
}

// IDUserFollows retrieves all the follow's Follows with an executor via id_user column.
func (o *User) IDUserFollows(mods ...qm.QueryMod) followQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follows\".\"id_user\"=?", o.ID),
	)

	return Follows(queryMods...)
}

// IDUserLikes retrieves all the like's Likes with an executor via id_user column.
func (o *User) IDUserLikes(mods ...qm.QueryMod) likeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"likes\".\"id_user\"=?", o.ID),
	)

	return Likes(queryMods...)
}

// IDUserLinks retrieves all the link's Links with an executor via id_user column.
func (o *User) IDUserLinks(mods ...qm.QueryMod) linkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"links\".\"id_user\"=?", o.ID),
	)

	return Links(queryMods...)
}

// IDUserPayments retrieves all the payment's Payments with an executor via id_user column.
func (o *User) IDUserPayments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"id_user\"=?", o.ID),
	)

	return Payments(queryMods...)
}

// IDUserReviews retrieves all the review's Reviews with an executor via id_user column.
func (o *User) IDUserReviews(mods ...qm.QueryMod) reviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reviews\".\"id_user\"=?", o.ID),
	)

	return Reviews(queryMods...)
}

// IDUserRolesUsers retrieves all the roles_user's RolesUsers with an executor via id_user column.
func (o *User) IDUserRolesUsers(mods ...qm.QueryMod) rolesUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"roles_users\".\"id_user\"=?", o.ID),
	)

	return RolesUsers(queryMods...)
}

// IDUserShares retrieves all the share's Shares with an executor via id_user column.
func (o *User) IDUserShares(mods ...qm.QueryMod) shareQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shares\".\"id_user\"=?", o.ID),
	)

	return Shares(queryMods...)
}

// IDUserStudioUsers retrieves all the studio_user's StudioUsers with an executor via id_user column.
func (o *User) IDUserStudioUsers(mods ...qm.QueryMod) studioUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"studio_users\".\"id_user\"=?", o.ID),
	)

	return StudioUsers(queryMods...)
}

// IDOwnerStudios retrieves all the studio's Studios with an executor via id_owner column.
func (o *User) IDOwnerStudios(mods ...qm.QueryMod) studioQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"studios\".\"id_owner\"=?", o.ID),
	)

	return Studios(queryMods...)
}

// IDUserSubscriptions retrieves all the subscription's Subscriptions with an executor via id_user column.
func (o *User) IDUserSubscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscriptions\".\"id_user\"=?", o.ID),
	)

	return Subscriptions(queryMods...)
}

// IDUserTokens retrieves all the token's Tokens with an executor via id_user column.
func (o *User) IDUserTokens(mods ...qm.QueryMod) tokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tokens\".\"id_user\"=?", o.ID),
	)

	return Tokens(queryMods...)
}

// IDUserViews retrieves all the view's Views with an executor via id_user column.
func (o *User) IDUserViews(mods ...qm.QueryMod) viewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"views\".\"id_user\"=?", o.ID),
	)

	return Views(queryMods...)
}

// LoadIDUserAuth allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadIDUserAuth(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auths`),
		qm.WhereIn(`auths.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Auth")
	}

	var resultSlice []*Auth
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Auth")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auths")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auths")
	}

	if len(authAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserAuth = foreign
		if foreign.R == nil {
			foreign.R = &authR{}
		}
		foreign.R.IDUserUser = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.IDUser {
				local.R.IDUserAuth = foreign
				if foreign.R == nil {
					foreign.R = &authR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadIDUserProfile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`profiles`),
		qm.WhereIn(`profiles.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Profile")
	}

	var resultSlice []*Profile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Profile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for profiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profiles")
	}

	if len(profileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserProfile = foreign
		if foreign.R == nil {
			foreign.R = &profileR{}
		}
		foreign.R.IDUserUser = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.IDUser {
				local.R.IDUserProfile = foreign
				if foreign.R == nil {
					foreign.R = &profileR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserTokenPassword allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userL) LoadIDUserTokenPassword(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`token_passwords`),
		qm.WhereIn(`token_passwords.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TokenPassword")
	}

	var resultSlice []*TokenPassword
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TokenPassword")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for token_passwords")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_passwords")
	}

	if len(tokenPasswordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUserTokenPassword = foreign
		if foreign.R == nil {
			foreign.R = &tokenPasswordR{}
		}
		foreign.R.IDUserUser = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.IDUser {
				local.R.IDUserTokenPassword = foreign
				if foreign.R == nil {
					foreign.R = &tokenPasswordR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDTattooArtistAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDTattooArtistAppointments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`appointments`),
		qm.WhereIn(`appointments.id_tattoo_artist in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointments")
	}

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on appointments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDTattooArtistAppointments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appointmentR{}
			}
			foreign.R.IDTattooArtistUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDTattooArtist) {
				local.R.IDTattooArtistAppointments = append(local.R.IDTattooArtistAppointments, foreign)
				if foreign.R == nil {
					foreign.R = &appointmentR{}
				}
				foreign.R.IDTattooArtistUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserAppointments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserAppointments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`appointments`),
		qm.WhereIn(`appointments.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load appointments")
	}

	var resultSlice []*Appointment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice appointments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on appointments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for appointments")
	}

	if len(appointmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserAppointments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &appointmentR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserAppointments = append(local.R.IDUserAppointments, foreign)
				if foreign.R == nil {
					foreign.R = &appointmentR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserCodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserCodes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`codes`),
		qm.WhereIn(`codes.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load codes")
	}

	var resultSlice []*Code
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice codes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on codes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for codes")
	}

	if len(codeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserCodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &codeR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserCodes = append(local.R.IDUserCodes, foreign)
				if foreign.R == nil {
					foreign.R = &codeR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserFollows allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserFollows(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`follows`),
		qm.WhereIn(`follows.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follows")
	}

	var resultSlice []*Follow
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follows")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follows")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follows")
	}

	if len(followAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserFollows = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserFollows = append(local.R.IDUserFollows, foreign)
				if foreign.R == nil {
					foreign.R = &followR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserLikes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserLikes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`likes`),
		qm.WhereIn(`likes.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load likes")
	}

	var resultSlice []*Like
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice likes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on likes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for likes")
	}

	if len(likeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserLikes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &likeR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserLikes = append(local.R.IDUserLikes, foreign)
				if foreign.R == nil {
					foreign.R = &likeR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`links`),
		qm.WhereIn(`links.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load links")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice links")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(linkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &linkR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDUser) {
				local.R.IDUserLinks = append(local.R.IDUserLinks, foreign)
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserPayments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDUser) {
				local.R.IDUserPayments = append(local.R.IDUserPayments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reviews`),
		qm.WhereIn(`reviews.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reviews")
	}

	var resultSlice []*Review
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reviews")
	}

	if len(reviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reviewR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserReviews = append(local.R.IDUserReviews, foreign)
				if foreign.R == nil {
					foreign.R = &reviewR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserRolesUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserRolesUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles_users`),
		qm.WhereIn(`roles_users.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load roles_users")
	}

	var resultSlice []*RolesUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice roles_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on roles_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles_users")
	}

	if len(rolesUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserRolesUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rolesUserR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserRolesUsers = append(local.R.IDUserRolesUsers, foreign)
				if foreign.R == nil {
					foreign.R = &rolesUserR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserShares allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserShares(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shares`),
		qm.WhereIn(`shares.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shares")
	}

	var resultSlice []*Share
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shares")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shares")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shares")
	}

	if len(shareAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserShares = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shareR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserShares = append(local.R.IDUserShares, foreign)
				if foreign.R == nil {
					foreign.R = &shareR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserStudioUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserStudioUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studio_users`),
		qm.WhereIn(`studio_users.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load studio_users")
	}

	var resultSlice []*StudioUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice studio_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on studio_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studio_users")
	}

	if len(studioUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserStudioUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studioUserR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserStudioUsers = append(local.R.IDUserStudioUsers, foreign)
				if foreign.R == nil {
					foreign.R = &studioUserR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDOwnerStudios allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDOwnerStudios(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`studios`),
		qm.WhereIn(`studios.id_owner in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load studios")
	}

	var resultSlice []*Studio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice studios")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on studios")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for studios")
	}

	if len(studioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDOwnerStudios = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &studioR{}
			}
			foreign.R.IDOwnerUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDOwner {
				local.R.IDOwnerStudios = append(local.R.IDOwnerStudios, foreign)
				if foreign.R == nil {
					foreign.R = &studioR{}
				}
				foreign.R.IDOwnerUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`subscriptions`),
		qm.WhereIn(`subscriptions.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscriptions")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscriptions")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDUser) {
				local.R.IDUserSubscriptions = append(local.R.IDUserSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tokens`),
		qm.WhereIn(`tokens.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tokens")
	}

	var resultSlice []*Token
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tokens")
	}

	if len(tokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDUser {
				local.R.IDUserTokens = append(local.R.IDUserTokens, foreign)
				if foreign.R == nil {
					foreign.R = &tokenR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// LoadIDUserViews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadIDUserViews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`views`),
		qm.WhereIn(`views.id_user in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load views")
	}

	var resultSlice []*View
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice views")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on views")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for views")
	}

	if len(viewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDUserViews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &viewR{}
			}
			foreign.R.IDUserUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDUser) {
				local.R.IDUserViews = append(local.R.IDUserViews, foreign)
				if foreign.R == nil {
					foreign.R = &viewR{}
				}
				foreign.R.IDUserUser = local
				break
			}
		}
	}

	return nil
}

// SetIDUserAuth of the user to the related item.
// Sets o.R.IDUserAuth to related.
// Adds o to related.R.IDUserUser.
func (o *User) SetIDUserAuth(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Auth) error {
	var err error

	if insert {
		related.IDUser = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"auths\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
			strmangle.WhereClause("\"", "\"", 2, authPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.IDUser = o.ID
	}

	if o.R == nil {
		o.R = &userR{
			IDUserAuth: related,
		}
	} else {
		o.R.IDUserAuth = related
	}

	if related.R == nil {
		related.R = &authR{
			IDUserUser: o,
		}
	} else {
		related.R.IDUserUser = o
	}
	return nil
}

// SetIDUserProfile of the user to the related item.
// Sets o.R.IDUserProfile to related.
// Adds o to related.R.IDUserUser.
func (o *User) SetIDUserProfile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Profile) error {
	var err error

	if insert {
		related.IDUser = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"profiles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
			strmangle.WhereClause("\"", "\"", 2, profilePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.IDUser = o.ID
	}

	if o.R == nil {
		o.R = &userR{
			IDUserProfile: related,
		}
	} else {
		o.R.IDUserProfile = related
	}

	if related.R == nil {
		related.R = &profileR{
			IDUserUser: o,
		}
	} else {
		related.R.IDUserUser = o
	}
	return nil
}

// SetIDUserTokenPassword of the user to the related item.
// Sets o.R.IDUserTokenPassword to related.
// Adds o to related.R.IDUserUser.
func (o *User) SetIDUserTokenPassword(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TokenPassword) error {
	var err error

	if insert {
		related.IDUser = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"token_passwords\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
			strmangle.WhereClause("\"", "\"", 2, tokenPasswordPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.IDUser = o.ID
	}

	if o.R == nil {
		o.R = &userR{
			IDUserTokenPassword: related,
		}
	} else {
		o.R.IDUserTokenPassword = related
	}

	if related.R == nil {
		related.R = &tokenPasswordR{
			IDUserUser: o,
		}
	} else {
		related.R.IDUserUser = o
	}
	return nil
}

// AddIDTattooArtistAppointments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDTattooArtistAppointments.
// Sets related.R.IDTattooArtistUser appropriately.
func (o *User) AddIDTattooArtistAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDTattooArtist, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"appointments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_tattoo_artist"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDTattooArtist, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDTattooArtistAppointments: related,
		}
	} else {
		o.R.IDTattooArtistAppointments = append(o.R.IDTattooArtistAppointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				IDTattooArtistUser: o,
			}
		} else {
			rel.R.IDTattooArtistUser = o
		}
	}
	return nil
}

// SetIDTattooArtistAppointments removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDTattooArtistUser's IDTattooArtistAppointments accordingly.
// Replaces o.R.IDTattooArtistAppointments with related.
// Sets related.R.IDTattooArtistUser's IDTattooArtistAppointments accordingly.
func (o *User) SetIDTattooArtistAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	query := "update \"appointments\" set \"id_tattoo_artist\" = null where \"id_tattoo_artist\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDTattooArtistAppointments {
			queries.SetScanner(&rel.IDTattooArtist, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDTattooArtistUser = nil
		}
		o.R.IDTattooArtistAppointments = nil
	}

	return o.AddIDTattooArtistAppointments(ctx, exec, insert, related...)
}

// RemoveIDTattooArtistAppointments relationships from objects passed in.
// Removes related items from R.IDTattooArtistAppointments (uses pointer comparison, removal does not keep order)
// Sets related.R.IDTattooArtistUser.
func (o *User) RemoveIDTattooArtistAppointments(ctx context.Context, exec boil.ContextExecutor, related ...*Appointment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDTattooArtist, nil)
		if rel.R != nil {
			rel.R.IDTattooArtistUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_tattoo_artist")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDTattooArtistAppointments {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDTattooArtistAppointments)
			if ln > 1 && i < ln-1 {
				o.R.IDTattooArtistAppointments[i] = o.R.IDTattooArtistAppointments[ln-1]
			}
			o.R.IDTattooArtistAppointments = o.R.IDTattooArtistAppointments[:ln-1]
			break
		}
	}

	return nil
}

// AddIDUserAppointments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserAppointments.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserAppointments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Appointment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"appointments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, appointmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserAppointments: related,
		}
	} else {
		o.R.IDUserAppointments = append(o.R.IDUserAppointments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &appointmentR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserCodes adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserCodes.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserCodes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Code) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"codes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, codePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserCodes: related,
		}
	} else {
		o.R.IDUserCodes = append(o.R.IDUserCodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &codeR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserFollows adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserFollows.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserFollows(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Follow) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follows\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, followPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserFollows: related,
		}
	} else {
		o.R.IDUserFollows = append(o.R.IDUserFollows, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserLikes adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserLikes.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserLikes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Like) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"likes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, likePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserLikes: related,
		}
	} else {
		o.R.IDUserLikes = append(o.R.IDUserLikes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &likeR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserLinks adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserLinks.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDUser, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"links\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, linkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDUser, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserLinks: related,
		}
	} else {
		o.R.IDUserLinks = append(o.R.IDUserLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &linkR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// SetIDUserLinks removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDUserUser's IDUserLinks accordingly.
// Replaces o.R.IDUserLinks with related.
// Sets related.R.IDUserUser's IDUserLinks accordingly.
func (o *User) SetIDUserLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	query := "update \"links\" set \"id_user\" = null where \"id_user\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDUserLinks {
			queries.SetScanner(&rel.IDUser, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDUserUser = nil
		}
		o.R.IDUserLinks = nil
	}

	return o.AddIDUserLinks(ctx, exec, insert, related...)
}

// RemoveIDUserLinks relationships from objects passed in.
// Removes related items from R.IDUserLinks (uses pointer comparison, removal does not keep order)
// Sets related.R.IDUserUser.
func (o *User) RemoveIDUserLinks(ctx context.Context, exec boil.ContextExecutor, related ...*Link) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDUser, nil)
		if rel.R != nil {
			rel.R.IDUserUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_user")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDUserLinks {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDUserLinks)
			if ln > 1 && i < ln-1 {
				o.R.IDUserLinks[i] = o.R.IDUserLinks[ln-1]
			}
			o.R.IDUserLinks = o.R.IDUserLinks[:ln-1]
			break
		}
	}

	return nil
}

// AddIDUserPayments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserPayments.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDUser, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDUser, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserPayments: related,
		}
	} else {
		o.R.IDUserPayments = append(o.R.IDUserPayments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// SetIDUserPayments removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDUserUser's IDUserPayments accordingly.
// Replaces o.R.IDUserPayments with related.
// Sets related.R.IDUserUser's IDUserPayments accordingly.
func (o *User) SetIDUserPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"id_user\" = null where \"id_user\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDUserPayments {
			queries.SetScanner(&rel.IDUser, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDUserUser = nil
		}
		o.R.IDUserPayments = nil
	}

	return o.AddIDUserPayments(ctx, exec, insert, related...)
}

// RemoveIDUserPayments relationships from objects passed in.
// Removes related items from R.IDUserPayments (uses pointer comparison, removal does not keep order)
// Sets related.R.IDUserUser.
func (o *User) RemoveIDUserPayments(ctx context.Context, exec boil.ContextExecutor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDUser, nil)
		if rel.R != nil {
			rel.R.IDUserUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_user")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDUserPayments {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDUserPayments)
			if ln > 1 && i < ln-1 {
				o.R.IDUserPayments[i] = o.R.IDUserPayments[ln-1]
			}
			o.R.IDUserPayments = o.R.IDUserPayments[:ln-1]
			break
		}
	}

	return nil
}

// AddIDUserReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserReviews.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Review) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, reviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserReviews: related,
		}
	} else {
		o.R.IDUserReviews = append(o.R.IDUserReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reviewR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserRolesUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserRolesUsers.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserRolesUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RolesUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"roles_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, rolesUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserRolesUsers: related,
		}
	} else {
		o.R.IDUserRolesUsers = append(o.R.IDUserRolesUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rolesUserR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserShares adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserShares.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserShares(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Share) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shares\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, sharePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserShares: related,
		}
	} else {
		o.R.IDUserShares = append(o.R.IDUserShares, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shareR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserStudioUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserStudioUsers.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserStudioUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StudioUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"studio_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, studioUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserStudioUsers: related,
		}
	} else {
		o.R.IDUserStudioUsers = append(o.R.IDUserStudioUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studioUserR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDOwnerStudios adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDOwnerStudios.
// Sets related.R.IDOwnerUser appropriately.
func (o *User) AddIDOwnerStudios(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Studio) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDOwner = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"studios\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_owner"}),
				strmangle.WhereClause("\"", "\"", 2, studioPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDOwner = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDOwnerStudios: related,
		}
	} else {
		o.R.IDOwnerStudios = append(o.R.IDOwnerStudios, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &studioR{
				IDOwnerUser: o,
			}
		} else {
			rel.R.IDOwnerUser = o
		}
	}
	return nil
}

// AddIDUserSubscriptions adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserSubscriptions.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDUser, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDUser, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserSubscriptions: related,
		}
	} else {
		o.R.IDUserSubscriptions = append(o.R.IDUserSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// SetIDUserSubscriptions removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDUserUser's IDUserSubscriptions accordingly.
// Replaces o.R.IDUserSubscriptions with related.
// Sets related.R.IDUserUser's IDUserSubscriptions accordingly.
func (o *User) SetIDUserSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	query := "update \"subscriptions\" set \"id_user\" = null where \"id_user\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDUserSubscriptions {
			queries.SetScanner(&rel.IDUser, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDUserUser = nil
		}
		o.R.IDUserSubscriptions = nil
	}

	return o.AddIDUserSubscriptions(ctx, exec, insert, related...)
}

// RemoveIDUserSubscriptions relationships from objects passed in.
// Removes related items from R.IDUserSubscriptions (uses pointer comparison, removal does not keep order)
// Sets related.R.IDUserUser.
func (o *User) RemoveIDUserSubscriptions(ctx context.Context, exec boil.ContextExecutor, related ...*Subscription) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDUser, nil)
		if rel.R != nil {
			rel.R.IDUserUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_user")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDUserSubscriptions {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDUserSubscriptions)
			if ln > 1 && i < ln-1 {
				o.R.IDUserSubscriptions[i] = o.R.IDUserSubscriptions[ln-1]
			}
			o.R.IDUserSubscriptions = o.R.IDUserSubscriptions[:ln-1]
			break
		}
	}

	return nil
}

// AddIDUserTokens adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserTokens.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Token) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDUser = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tokens\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, tokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDUser = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserTokens: related,
		}
	} else {
		o.R.IDUserTokens = append(o.R.IDUserTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// AddIDUserViews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.IDUserViews.
// Sets related.R.IDUserUser appropriately.
func (o *User) AddIDUserViews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*View) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDUser, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"views\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_user"}),
				strmangle.WhereClause("\"", "\"", 2, viewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDUser, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			IDUserViews: related,
		}
	} else {
		o.R.IDUserViews = append(o.R.IDUserViews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &viewR{
				IDUserUser: o,
			}
		} else {
			rel.R.IDUserUser = o
		}
	}
	return nil
}

// SetIDUserViews removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDUserUser's IDUserViews accordingly.
// Replaces o.R.IDUserViews with related.
// Sets related.R.IDUserUser's IDUserViews accordingly.
func (o *User) SetIDUserViews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*View) error {
	query := "update \"views\" set \"id_user\" = null where \"id_user\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDUserViews {
			queries.SetScanner(&rel.IDUser, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDUserUser = nil
		}
		o.R.IDUserViews = nil
	}

	return o.AddIDUserViews(ctx, exec, insert, related...)
}

// RemoveIDUserViews relationships from objects passed in.
// Removes related items from R.IDUserViews (uses pointer comparison, removal does not keep order)
// Sets related.R.IDUserUser.
func (o *User) RemoveIDUserViews(ctx context.Context, exec boil.ContextExecutor, related ...*View) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDUser, nil)
		if rel.R != nil {
			rel.R.IDUserUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_user")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDUserViews {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDUserViews)
			if ln > 1 && i < ln-1 {
				o.R.IDUserViews[i] = o.R.IDUserViews[ln-1]
			}
			o.R.IDUserViews = o.R.IDUserViews[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users\".*"})
	}

	return userQuery{q}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users")
	}

	if err = userObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userObj, err
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert users, could not build update column list")
		}

		ret := strmangle.SetComplement(userAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert users, could not build conflict column list")
			}

			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users exists")
	}

	return exists, nil
}

// Exists checks if the User row exists.
func (o *User) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserExists(ctx, exec, o.ID)
}
