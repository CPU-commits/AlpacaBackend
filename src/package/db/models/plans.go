// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Plan is an object representing the database table.
type Plan struct {
	ID           int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description  null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Price        float64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	Currency     string      `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Features     null.JSON   `boil:"features" json:"features,omitempty" toml:"features" yaml:"features,omitempty"`
	BillingCycle string      `boil:"billing_cycle" json:"billing_cycle" toml:"billing_cycle" yaml:"billing_cycle"`
	Code         string      `boil:"code" json:"code" toml:"code" yaml:"code"`
	TrialDays    int         `boil:"trial_days" json:"trial_days" toml:"trial_days" yaml:"trial_days"`
	IsActive     bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	Identifier   string      `boil:"identifier" json:"identifier" toml:"identifier" yaml:"identifier"`
	BannerURL    null.String `boil:"banner_url" json:"banner_url,omitempty" toml:"banner_url" yaml:"banner_url,omitempty"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ForStudios   bool        `boil:"for_studios" json:"for_studios" toml:"for_studios" yaml:"for_studios"`
	PricingModel string      `boil:"pricing_model" json:"pricing_model" toml:"pricing_model" yaml:"pricing_model"`

	R *planR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanColumns = struct {
	ID           string
	Name         string
	Description  string
	Price        string
	Currency     string
	Features     string
	BillingCycle string
	Code         string
	TrialDays    string
	IsActive     string
	Identifier   string
	BannerURL    string
	CreatedAt    string
	UpdatedAt    string
	ForStudios   string
	PricingModel string
}{
	ID:           "id",
	Name:         "name",
	Description:  "description",
	Price:        "price",
	Currency:     "currency",
	Features:     "features",
	BillingCycle: "billing_cycle",
	Code:         "code",
	TrialDays:    "trial_days",
	IsActive:     "is_active",
	Identifier:   "identifier",
	BannerURL:    "banner_url",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	ForStudios:   "for_studios",
	PricingModel: "pricing_model",
}

var PlanTableColumns = struct {
	ID           string
	Name         string
	Description  string
	Price        string
	Currency     string
	Features     string
	BillingCycle string
	Code         string
	TrialDays    string
	IsActive     string
	Identifier   string
	BannerURL    string
	CreatedAt    string
	UpdatedAt    string
	ForStudios   string
	PricingModel string
}{
	ID:           "plans.id",
	Name:         "plans.name",
	Description:  "plans.description",
	Price:        "plans.price",
	Currency:     "plans.currency",
	Features:     "plans.features",
	BillingCycle: "plans.billing_cycle",
	Code:         "plans.code",
	TrialDays:    "plans.trial_days",
	IsActive:     "plans.is_active",
	Identifier:   "plans.identifier",
	BannerURL:    "plans.banner_url",
	CreatedAt:    "plans.created_at",
	UpdatedAt:    "plans.updated_at",
	ForStudios:   "plans.for_studios",
	PricingModel: "plans.pricing_model",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PlanWhere = struct {
	ID           whereHelperint64
	Name         whereHelperstring
	Description  whereHelpernull_String
	Price        whereHelperfloat64
	Currency     whereHelperstring
	Features     whereHelpernull_JSON
	BillingCycle whereHelperstring
	Code         whereHelperstring
	TrialDays    whereHelperint
	IsActive     whereHelperbool
	Identifier   whereHelperstring
	BannerURL    whereHelpernull_String
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	ForStudios   whereHelperbool
	PricingModel whereHelperstring
}{
	ID:           whereHelperint64{field: "\"plans\".\"id\""},
	Name:         whereHelperstring{field: "\"plans\".\"name\""},
	Description:  whereHelpernull_String{field: "\"plans\".\"description\""},
	Price:        whereHelperfloat64{field: "\"plans\".\"price\""},
	Currency:     whereHelperstring{field: "\"plans\".\"currency\""},
	Features:     whereHelpernull_JSON{field: "\"plans\".\"features\""},
	BillingCycle: whereHelperstring{field: "\"plans\".\"billing_cycle\""},
	Code:         whereHelperstring{field: "\"plans\".\"code\""},
	TrialDays:    whereHelperint{field: "\"plans\".\"trial_days\""},
	IsActive:     whereHelperbool{field: "\"plans\".\"is_active\""},
	Identifier:   whereHelperstring{field: "\"plans\".\"identifier\""},
	BannerURL:    whereHelpernull_String{field: "\"plans\".\"banner_url\""},
	CreatedAt:    whereHelpertime_Time{field: "\"plans\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"plans\".\"updated_at\""},
	ForStudios:   whereHelperbool{field: "\"plans\".\"for_studios\""},
	PricingModel: whereHelperstring{field: "\"plans\".\"pricing_model\""},
}

// PlanRels is where relationship names are stored.
var PlanRels = struct {
	IDPlanSubscriptions string
}{
	IDPlanSubscriptions: "IDPlanSubscriptions",
}

// planR is where relationships are stored.
type planR struct {
	IDPlanSubscriptions SubscriptionSlice `boil:"IDPlanSubscriptions" json:"IDPlanSubscriptions" toml:"IDPlanSubscriptions" yaml:"IDPlanSubscriptions"`
}

// NewStruct creates a new relationship struct
func (*planR) NewStruct() *planR {
	return &planR{}
}

func (o *Plan) GetIDPlanSubscriptions() SubscriptionSlice {
	if o == nil {
		return nil
	}

	return o.R.GetIDPlanSubscriptions()
}

func (r *planR) GetIDPlanSubscriptions() SubscriptionSlice {
	if r == nil {
		return nil
	}

	return r.IDPlanSubscriptions
}

// planL is where Load methods for each relationship are stored.
type planL struct{}

var (
	planAllColumns            = []string{"id", "name", "description", "price", "currency", "features", "billing_cycle", "code", "trial_days", "is_active", "identifier", "banner_url", "created_at", "updated_at", "for_studios", "pricing_model"}
	planColumnsWithoutDefault = []string{"name", "price", "currency", "billing_cycle", "code", "trial_days", "is_active", "identifier"}
	planColumnsWithDefault    = []string{"id", "description", "features", "banner_url", "created_at", "updated_at", "for_studios", "pricing_model"}
	planPrimaryKeyColumns     = []string{"id"}
	planGeneratedColumns      = []string{}
)

type (
	// PlanSlice is an alias for a slice of pointers to Plan.
	// This should almost always be used instead of []Plan.
	PlanSlice []*Plan
	// PlanHook is the signature for custom Plan hook methods
	PlanHook func(context.Context, boil.ContextExecutor, *Plan) error

	planQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planType                 = reflect.TypeOf(&Plan{})
	planMapping              = queries.MakeStructMapping(planType)
	planPrimaryKeyMapping, _ = queries.BindMapping(planType, planMapping, planPrimaryKeyColumns)
	planInsertCacheMut       sync.RWMutex
	planInsertCache          = make(map[string]insertCache)
	planUpdateCacheMut       sync.RWMutex
	planUpdateCache          = make(map[string]updateCache)
	planUpsertCacheMut       sync.RWMutex
	planUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planAfterSelectMu sync.Mutex
var planAfterSelectHooks []PlanHook

var planBeforeInsertMu sync.Mutex
var planBeforeInsertHooks []PlanHook
var planAfterInsertMu sync.Mutex
var planAfterInsertHooks []PlanHook

var planBeforeUpdateMu sync.Mutex
var planBeforeUpdateHooks []PlanHook
var planAfterUpdateMu sync.Mutex
var planAfterUpdateHooks []PlanHook

var planBeforeDeleteMu sync.Mutex
var planBeforeDeleteHooks []PlanHook
var planAfterDeleteMu sync.Mutex
var planAfterDeleteHooks []PlanHook

var planBeforeUpsertMu sync.Mutex
var planBeforeUpsertHooks []PlanHook
var planAfterUpsertMu sync.Mutex
var planAfterUpsertHooks []PlanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Plan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Plan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Plan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Plan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Plan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Plan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Plan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Plan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Plan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanHook registers your hook function for all future operations.
func AddPlanHook(hookPoint boil.HookPoint, planHook PlanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planAfterSelectMu.Lock()
		planAfterSelectHooks = append(planAfterSelectHooks, planHook)
		planAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planBeforeInsertMu.Lock()
		planBeforeInsertHooks = append(planBeforeInsertHooks, planHook)
		planBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planAfterInsertMu.Lock()
		planAfterInsertHooks = append(planAfterInsertHooks, planHook)
		planAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planBeforeUpdateMu.Lock()
		planBeforeUpdateHooks = append(planBeforeUpdateHooks, planHook)
		planBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planAfterUpdateMu.Lock()
		planAfterUpdateHooks = append(planAfterUpdateHooks, planHook)
		planAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planBeforeDeleteMu.Lock()
		planBeforeDeleteHooks = append(planBeforeDeleteHooks, planHook)
		planBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planAfterDeleteMu.Lock()
		planAfterDeleteHooks = append(planAfterDeleteHooks, planHook)
		planAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planBeforeUpsertMu.Lock()
		planBeforeUpsertHooks = append(planBeforeUpsertHooks, planHook)
		planBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planAfterUpsertMu.Lock()
		planAfterUpsertHooks = append(planAfterUpsertHooks, planHook)
		planAfterUpsertMu.Unlock()
	}
}

// One returns a single plan record from the query.
func (q planQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Plan, error) {
	o := &Plan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for plans")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Plan records from the query.
func (q planQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanSlice, error) {
	var o []*Plan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Plan slice")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Plan records in the query.
func (q planQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count plans rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if plans exists")
	}

	return count > 0, nil
}

// IDPlanSubscriptions retrieves all the subscription's Subscriptions with an executor via id_plan column.
func (o *Plan) IDPlanSubscriptions(mods ...qm.QueryMod) subscriptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"subscriptions\".\"id_plan\"=?", o.ID),
	)

	return Subscriptions(queryMods...)
}

// LoadIDPlanSubscriptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (planL) LoadIDPlanSubscriptions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`subscriptions`),
		qm.WhereIn(`subscriptions.id_plan in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load subscriptions")
	}

	var resultSlice []*Subscription
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice subscriptions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on subscriptions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subscriptions")
	}

	if len(subscriptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDPlanSubscriptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &subscriptionR{}
			}
			foreign.R.IDPlanPlan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDPlan {
				local.R.IDPlanSubscriptions = append(local.R.IDPlanSubscriptions, foreign)
				if foreign.R == nil {
					foreign.R = &subscriptionR{}
				}
				foreign.R.IDPlanPlan = local
				break
			}
		}
	}

	return nil
}

// AddIDPlanSubscriptions adds the given related objects to the existing relationships
// of the plan, optionally inserting them as new records.
// Appends related to o.R.IDPlanSubscriptions.
// Sets related.R.IDPlanPlan appropriately.
func (o *Plan) AddIDPlanSubscriptions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Subscription) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDPlan = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"subscriptions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_plan"}),
				strmangle.WhereClause("\"", "\"", 2, subscriptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDPlan = o.ID
		}
	}

	if o.R == nil {
		o.R = &planR{
			IDPlanSubscriptions: related,
		}
	} else {
		o.R.IDPlanSubscriptions = append(o.R.IDPlanSubscriptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &subscriptionR{
				IDPlanPlan: o,
			}
		} else {
			rel.R.IDPlanPlan = o
		}
	}
	return nil
}

// Plans retrieves all the records using an executor.
func Plans(mods ...qm.QueryMod) planQuery {
	mods = append(mods, qm.From("\"plans\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"plans\".*"})
	}

	return planQuery{q}
}

// FindPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlan(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Plan, error) {
	planObj := &Plan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"plans\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from plans")
	}

	if err = planObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planObj, err
	}

	return planObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no plans provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planInsertCacheMut.RLock()
	cache, cached := planInsertCache[key]
	planInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planType, planMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"plans\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"plans\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into plans")
	}

	if !cached {
		planInsertCacheMut.Lock()
		planInsertCache[key] = cache
		planInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Plan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planUpdateCacheMut.RLock()
	cache, cached := planUpdateCache[key]
	planUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update plans, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"plans\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, planPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planType, planMapping, append(wl, planPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update plans row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for plans")
	}

	if !cached {
		planUpdateCacheMut.Lock()
		planUpdateCache[key] = cache
		planUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for plans")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"plans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, planPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all plan")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Plan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no plans provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planUpsertCacheMut.RLock()
	cache, cached := planUpsertCache[key]
	planUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert plans, could not build update column list")
		}

		ret := strmangle.SetComplement(planAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(planPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert plans, could not build conflict column list")
			}

			conflict = make([]string, len(planPrimaryKeyColumns))
			copy(conflict, planPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"plans\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planType, planMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert plans")
	}

	if !cached {
		planUpsertCacheMut.Lock()
		planUpsertCache[key] = cache
		planUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Plan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Plan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planPrimaryKeyMapping)
	sql := "DELETE FROM \"plans\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for plans")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no planQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for plans")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"plans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for plans")
	}

	if len(planAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlan(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"plans\".* FROM \"plans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlanSlice")
	}

	*o = slice

	return nil
}

// PlanExists checks if the Plan row exists.
func PlanExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"plans\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if plans exists")
	}

	return exists, nil
}

// Exists checks if the Plan row exists.
func (o *Plan) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanExists(ctx, exec, o.ID)
}
