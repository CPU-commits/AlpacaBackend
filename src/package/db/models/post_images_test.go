// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testPostImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(postImageAllColumns) == len(postImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PostImage{}
	if err = randomize.Struct(seed, &o, postImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PostImage: %s", err)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, postImageDBTypes, false, postImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PostImage: %s", err)
	}

	count, err = PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPostImages(t *testing.T) {
	t.Parallel()

	query := PostImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPostImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPostImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PostImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPostImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PostImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPostImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PostImageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PostImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PostImageExists to return true, but got false.")
	}
}

func testPostImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	postImageFound, err := FindPostImage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if postImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPostImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PostImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPostImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PostImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPostImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	postImageOne := &PostImage{}
	postImageTwo := &PostImage{}
	if err = randomize.Struct(seed, postImageOne, postImageDBTypes, false, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}
	if err = randomize.Struct(seed, postImageTwo, postImageDBTypes, false, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = postImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = postImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PostImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPostImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	postImageOne := &PostImage{}
	postImageTwo := &PostImage{}
	if err = randomize.Struct(seed, postImageOne, postImageDBTypes, false, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}
	if err = randomize.Struct(seed, postImageTwo, postImageDBTypes, false, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = postImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = postImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func postImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func postImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PostImage) error {
	*o = PostImage{}
	return nil
}

func testPostImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PostImage{}
	o := &PostImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, postImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PostImage object: %s", err)
	}

	AddPostImageHook(boil.BeforeInsertHook, postImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	postImageBeforeInsertHooks = []PostImageHook{}

	AddPostImageHook(boil.AfterInsertHook, postImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	postImageAfterInsertHooks = []PostImageHook{}

	AddPostImageHook(boil.AfterSelectHook, postImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	postImageAfterSelectHooks = []PostImageHook{}

	AddPostImageHook(boil.BeforeUpdateHook, postImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	postImageBeforeUpdateHooks = []PostImageHook{}

	AddPostImageHook(boil.AfterUpdateHook, postImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	postImageAfterUpdateHooks = []PostImageHook{}

	AddPostImageHook(boil.BeforeDeleteHook, postImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	postImageBeforeDeleteHooks = []PostImageHook{}

	AddPostImageHook(boil.AfterDeleteHook, postImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	postImageAfterDeleteHooks = []PostImageHook{}

	AddPostImageHook(boil.BeforeUpsertHook, postImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	postImageBeforeUpsertHooks = []PostImageHook{}

	AddPostImageHook(boil.AfterUpsertHook, postImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	postImageAfterUpsertHooks = []PostImageHook{}
}

func testPostImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPostImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(postImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPostImageToOnePostUsingIDPostPost(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PostImage
	var foreign Post

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, postImageDBTypes, false, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, postDBTypes, false, postColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Post struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDPost = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDPostPost().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPostHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Post) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PostImageSlice{&local}
	if err = local.L.LoadIDPostPost(ctx, tx, false, (*[]*PostImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDPostPost == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDPostPost = nil
	if err = local.L.LoadIDPostPost(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDPostPost == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPostImageToOneImageUsingIDImageImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PostImage
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, postImageDBTypes, false, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.IDImage = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDImageImage().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddImageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Image) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PostImageSlice{&local}
	if err = local.L.LoadIDImageImage(ctx, tx, false, (*[]*PostImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDImageImage = nil
	if err = local.L.LoadIDImageImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.IDImageImage == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPostImageToOneSetOpPostUsingIDPostPost(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PostImage
	var b, c Post

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, postImageDBTypes, false, strmangle.SetComplement(postImagePrimaryKeyColumns, postImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, postDBTypes, false, strmangle.SetComplement(postPrimaryKeyColumns, postColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Post{&b, &c} {
		err = a.SetIDPostPost(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDPostPost != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDPostPostImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDPost != x.ID {
			t.Error("foreign key was wrong value", a.IDPost)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDPost))
		reflect.Indirect(reflect.ValueOf(&a.IDPost)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDPost != x.ID {
			t.Error("foreign key was wrong value", a.IDPost, x.ID)
		}
	}
}
func testPostImageToOneSetOpImageUsingIDImageImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PostImage
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, postImageDBTypes, false, strmangle.SetComplement(postImagePrimaryKeyColumns, postImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetIDImageImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDImageImage != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDImagePostImage != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage)
		}

		zero := reflect.Zero(reflect.TypeOf(a.IDImage))
		reflect.Indirect(reflect.ValueOf(&a.IDImage)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.IDImage != x.ID {
			t.Error("foreign key was wrong value", a.IDImage, x.ID)
		}
	}
}

func testPostImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPostImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PostImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPostImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PostImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	postImageDBTypes = map[string]string{`ID`: `int8`, `IDImage`: `int8`, `IDPost`: `int8`, `CreatedAt`: `timestamp`}
	_                = bytes.MinRead
)

func testPostImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(postImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(postImageAllColumns) == len(postImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPostImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(postImageAllColumns) == len(postImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PostImage{}
	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PostImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, postImageDBTypes, true, postImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PostImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(postImageAllColumns, postImagePrimaryKeyColumns) {
		fields = postImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			postImageAllColumns,
			postImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PostImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
