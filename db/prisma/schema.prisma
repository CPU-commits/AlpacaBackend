generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model accesses {
  id         BigInt   @id @default(sequence())
  token      String
  expires_at DateTime @db.Date
  is_revoked Boolean  @default(false)
  id_session BigInt
  created_at DateTime @default(now()) @db.Timestamp(6)
  sessions   sessions @relation(fields: [id_session], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model auths {
  id         BigInt     @id @default(sequence())
  password   String
  id_user    BigInt     @unique
  created_at DateTime   @default(now()) @db.Timestamp(6)
  users      users      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sessions   sessions[]
}

model roles_users {
  id         BigInt    @id @default(sequence())
  id_user    BigInt
  role       role_name
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sessions {
  id         BigInt     @id @default(sequence())
  token      String
  id_auth    BigInt
  device     String?
  ip         String?
  browser    String?
  location   String?
  expires_at DateTime   @db.Date
  created_at DateTime   @default(now()) @db.Timestamp(6)
  accesses   accesses[]
  auths      auths      @relation(fields: [id_auth], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                 BigInt               @id @default(sequence())
  email              String               @unique
  name               String
  username String @unique
  phone              String?
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  auths              auths[]
  roles_users        roles_users[]
  token_passwords    token_passwords[]
  profile profiles?
  follows follows[]
  studios studio_tattoo_artists[]
  my_studios studio_admins[]
  reviews reviews[]
  likes likes[]
	userAppointments        appointments[] @relation("UserAppointments")
  tattooArtistAppointments appointments[] @relation("TattooArtistAppointments")
}

model token_passwords {
  id             BigInt    @id @default(sequence())
  token          String
  id_user        BigInt     @unique
  created_at     DateTime @default(now()) @db.Timestamp(6)
  users          users      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model images {
	id BigInt @id @default(sequence())
	key String @unique
	name String
	mimeType String
	created_at DateTime @default(now()) @db.Timestamp(6)
	profiles profiles?
	tattoo tattoos?
	post post_images?
	appointment_images appointment_images?
}


model profiles {
	id BigInt @id @default(sequence())
	description String?
	id_avatar BigInt? @unique
	avatar images? @relation(fields: [id_avatar], references: [id])
	likes Int @default(0)
	id_user BigInt @unique
	user users @relation(fields: [id_user], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)
	follows follows[]
	tattoos tattoos[]
	reviews reviews[]
	posts posts[]
	like likes[]
}

model follows {
	id BigInt @id @default(sequence())
	id_user BigInt
	id_profile BigInt
	created_at DateTime @default(now()) @db.Timestamp(6)
	user users @relation(fields: [id_user], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
}

model tattoos {
	id BigInt @id @default(sequence())
	id_profile BigInt
	id_image BigInt @unique
	likes Int @default(0)
	description String?
	categories String[]
	created_at DateTime @default(now()) @db.Timestamp(6)
	popularity Int @default(0)
	id_post BigInt?
	views Int @default(0)
	coordinate Unsupported("GEOMETRY")?
	post posts? @relation(fields: [id_post], references: [id])
	image images @relation(fields: [id_image], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
}

model studio_tattoo_artists {
	id BigInt @id @default(sequence())
	id_studio BigInt
	id_tattoo_artist BigInt
	studio studios @relation(fields: [id_studio], references: [id])
	tattoo_artist users @relation(fields: [id_tattoo_artist], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)

}

model studio_admins {
	id BigInt @id @default(sequence())
	id_studio BigInt
	id_owner BigInt
	studio studios @relation(fields: [id_studio], references: [id])
	owner users @relation(fields: [id_owner], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)

}

model studios {
	id BigInt @id @default(sequence())
	description String
	direction Json
	email String
	phone String?
	created_at DateTime @default(now()) @db.Timestamp(6)
	tattoo_artists studio_tattoo_artists[]
	admins studio_admins[]
}

model reviews {
	id BigInt @id @default(sequence())
	id_user BigInt
	id_profile BigInt
	content String
	stars Int
	created_at DateTime @default(now()) @db.Timestamp(6)
	user users @relation(fields: [id_user], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
}

model post_images {
	id BigInt @id @default(sequence())
	id_image BigInt @unique
	id_post BigInt
	image images @relation(references: [id], fields: [id_image], onDelete: Cascade)
	post posts @relation(references: [id], fields: [id_post])
	created_at DateTime @default(now()) @db.Timestamp(6)
}

model posts {
	id BigInt @id @default(sequence())
	id_profile BigInt
	content String
	likes Int
	categories String[]
	mentions Int[]
	views Int @default(0)
	created_at DateTime @default(now()) @db.Timestamp(6)
	profile profiles @relation(fields: [id_profile], references: [id])
	tattoos tattoos[]
	images post_images[]
	like likes[]
}

model likes {
	id BigInt @id @default(sequence())
	id_user BigInt
	id_profile BigInt
	id_post BigInt
	user users @relation(fields: [id_user], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
	post posts @relation(fields: [id_post], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)
}

model appointment_images {
	id BigInt @id @default(sequence())
	id_appointment BigInt
	id_image BigInt @unique
	image images @relation(fields: [id_image], references: [id])
	appointment appointments @relation(fields: [id_appointment], references: [id])
}

model appointments {
  id                BigInt @id @default(sequence())
  id_user           BigInt
  id_tattoo_artist  BigInt
  status            appointment_status
  phone String?
  has_idea Boolean
  area tattoo_area?
  height Float?
  width Float?
  color tattoo_color?
  description String
  scheduled_at DateTime?
  duration Float?
  finished_at DateTime?
  created_at        DateTime @default(now()) @db.Timestamp(6)

  images appointment_images[]
  user          users @relation("UserAppointments", fields: [id_user], references: [id])
  tattoo_artist users @relation("TattooArtistAppointments", fields: [id_tattoo_artist], references: [id])
}

enum tattoo_color {
	black
	full_color
}

enum tattoo_area {
	arm
	leg
	back
	chest
	abdomen
	neck
	head
	hand
	foot
	hip
	other
}

enum appointment_status {
	paid
	scheduled
	canceled
	created
}

enum role_name {
  admin
  user
  tattooArtist
}
