generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model accesses {
  id         BigInt   @id @default(sequence())
  token      String
  expires_at DateTime @db.Date
  is_revoked Boolean  @default(false)
  id_session BigInt
  created_at DateTime @default(now()) @db.Timestamp(6)
  sessions   sessions @relation(fields: [id_session], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model auths {
  id         BigInt     @id @default(sequence())
  password   String
  id_user    BigInt     @unique
  created_at DateTime   @default(now()) @db.Timestamp(6)
  users      users      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sessions   sessions[]
}

model roles_users {
  id         BigInt    @id @default(sequence())
  id_user    BigInt
  role       role_name
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sessions {
  id         BigInt     @id @default(sequence())
  token      String
  id_auth    BigInt
  device     String?
  ip         String?
  browser    String?
  location   String?
  expires_at DateTime   @db.Date
  created_at DateTime   @default(now()) @db.Timestamp(6)
  accesses   accesses[]
  auths      auths      @relation(fields: [id_auth], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                 BigInt               @id @default(sequence())
  email              String               @unique
  name               String
  username String @unique
  phone              String?
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  location String?
  auths              auths[]
  roles_users        roles_users[]
  token_passwords    token_passwords[]
  profile profiles?
  follows follows[]
  my_studios studio_users[]
  reviews reviews[]
  likes likes[]
	userAppointments        appointments[] @relation("UserAppointments")
	tattooArtistAppointments appointments[] @relation("TattooArtistAppointments")
	codes codes[]
	tokens tokens[]
	ownStudios studios[]
	links links[]
	views views[]
	shares shares[]
	subscription subscriptions[]
	payments payments[]
}

model token_passwords {
  id             BigInt    @id @default(sequence())
  token          String
  id_user        BigInt     @unique
  created_at     DateTime @default(now()) @db.Timestamp(6)
  users          users      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model images {
	id BigInt @id @default(sequence())
	key String @unique
	name String
	mimeType String
	created_at DateTime @default(now()) @db.Timestamp(6)
	profiles profiles?
	tattoo tattoos?
	post post_images?
	appointment_images appointment_images?
	designs designs?
	avatar_studio studios? @relation("StudioAvatar")
	banner_studio studios? @relation("StudioBanner")
}


model profiles {
	id BigInt @id @default(sequence())
	description String?
	id_avatar BigInt? @unique
	avatar images? @relation(fields: [id_avatar], references: [id])
	likes Int @default(0)
	id_user BigInt @unique
	user users @relation(fields: [id_user], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)
	follows follows[]
	tattoos tattoos[]
	reviews reviews[]
	posts posts[]
	like likes[]
	designs designs[]
	views views[]
}

model follows {
	id BigInt @id @default(sequence())
	id_user BigInt
	id_profile BigInt?
	id_studio BigInt?
	created_at DateTime @default(now()) @db.Timestamp(6)
	user users @relation(fields: [id_user], references: [id])
	profile profiles? @relation(fields: [id_profile], references: [id])
	studio studios? @relation(fields: [id_studio], references: [id])
}

model tattoos {
	id BigInt @id @default(sequence())
	id_profile BigInt
	id_image BigInt @unique
	id_studio BigInt?
	likes Int @default(0)
	areas Json?
	color tattoo_color?
	llm_description String?
	mentions Int[]
	description String?
	categories String[]
	created_at DateTime @default(now()) @db.Timestamp(6)
	popularity Int @default(0)
	id_post BigInt?
	views Int @default(0)
	coordinate Unsupported("GEOMETRY")?
	post posts? @relation(fields: [id_post], references: [id])
	studio studios? @relation(fields: [id_studio], references: [id])
	image images @relation(fields: [id_image], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
}

model designs{
	id BigInt @id @default(sequence())
	id_profile BigInt
	id_image  BigInt @unique
	description String?
	price BigInt?
	categories String[]
	coordinate Unsupported("GEOMETRY")?
	created_at DateTime @default(now()) @db.Timestamp(6)
	is_deleted Boolean @default(false)

	image images @relation(fields: [id_image], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
	appoitments appointments[]
}

model studio_users {
	id BigInt @id @default(sequence())
	id_studio BigInt
	id_user BigInt
	roles Json
	studio studios @relation(fields: [id_studio], references: [id])
	user users @relation(fields: [id_user], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)
	permissions studio_admins_permissions[]
}

model studio_admins_permissions {
	id BigInt @id @default(sequence())
	id_admin BigInt
	permission String
	created_at DateTime @default(now()) @db.Timestamp(6)
	admin studio_users @relation(fields: [id_admin], references: [id], onDelete: Cascade)
}

model studios {
	id BigInt @id @default(sequence())
	name String
	username String @unique
	id_avatar BigInt? @unique
	id_banner BigInt? @unique
	description String?
	full_address String
	email String @unique
	phone String?
	id_owner BigInt
	is_active Boolean @default(true)
	is_limit Boolean @default(true)
	created_at DateTime @default(now()) @db.Timestamp(6)
	avatar images? @relation(name: "StudioAvatar", fields: [id_avatar], references: [id], map: "studio_avatar_fkey")
	banner images? @relation(name: "StudioBanner", fields: [id_banner], references: [id], map: "studio_banner_fkey")
	owner users @relation(fields: [id_owner], references: [id])
	users studio_users[]
	posts posts[]
	appointments appointments[]
	media links[]
	tattoos tattoos[]
	follows follows[]
	views views[]
	subscriptions subscriptions[]
	payments payments[]
}

model links {
	id BigInt @id @default(sequence())
	type String
	link String
	short_code String @unique
	id_studio BigInt?
	id_user BigInt?
	studio studios? @relation(fields: [id_studio], references: [id])
	user users? @relation(fields: [id_user], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)
	views views[]
}

model reviews {
	id BigInt @id @default(sequence())
	id_user BigInt
	id_profile BigInt
	id_appointment BigInt @unique
	content String
	stars Int
	created_at DateTime @default(now()) @db.Timestamp(6)
	user users @relation(fields: [id_user], references: [id])
	appointment appointments @relation(fields: [id_appointment], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
}

model post_images {
	id BigInt @id @default(sequence())
	id_image BigInt @unique
	id_post BigInt
	image images @relation(references: [id], fields: [id_image], onDelete: Cascade)
	post posts @relation(references: [id], fields: [id_post])
	created_at DateTime @default(now()) @db.Timestamp(6)
}

model posts {
	id BigInt @id @default(sequence())
	id_profile BigInt
	id_studio BigInt?
	is_studio_post Boolean @default(false)
	content String
	likes Int
	categories String[]
	mentions Int[]
	views Int @default(0)
	shares Int @default(0)
	created_at DateTime @default(now()) @db.Timestamp(6)
	profile profiles @relation(fields: [id_profile], references: [id])
	studio studios? @relation(fields: [id_studio], references: [id])
	tattoos tattoos[]
	images post_images[]
	like likes[]
	viewss views[]
	sharess shares[]
}

model views {
	id BigInt @id @default(sequence())
	id_post BigInt?
	id_profile BigInt?
	id_link BigInt?
	id_studio BigInt?
	id_user BigInt?
	country String?
	city String?
	continent String?
	timezone String?
	region String?
	created_at DateTime @default(now()) @db.Timestamp(6)
	post posts? @relation(fields: [id_post], references: [id], onDelete: Cascade)
	profile profiles? @relation(fields: [id_profile], references: [id])
	user users? @relation(fields: [id_user], references: [id])
	link links? @relation(fields: [id_link], references: [id], onDelete: Cascade)
	studio studios? @relation(fields: [id_studio], references: [id], onDelete: Cascade)
}

model shares {
	id BigInt @id @default(sequence())
	id_post BigInt
	id_user BigInt
	created_at DateTime @default(now()) @db.Timestamp(6)
	post posts @relation(fields: [id_post], references: [id])
	user users @relation(fields: [id_user], references: [id])
}

model likes {
	id BigInt @id @default(sequence())
	id_user BigInt
	id_profile BigInt
	id_post BigInt
	user users @relation(fields: [id_user], references: [id])
	profile profiles @relation(fields: [id_profile], references: [id])
	post posts @relation(fields: [id_post], references: [id])
	created_at DateTime @default(now()) @db.Timestamp(6)
}

model appointment_images {
	id BigInt @id @default(sequence())
	id_appointment BigInt
	id_image BigInt @unique
	image images @relation(fields: [id_image], references: [id])
	appointment appointments @relation(fields: [id_appointment], references: [id])
}

model appointments {
  id                BigInt @id @default(sequence())
  id_user           BigInt
  id_tattoo_artist  BigInt?
  status            appointment_status
  id_studio BigInt?
  id_calendar String?
  phone String?
  has_idea Boolean
  has_design Boolean
  area tattoo_area?
  height Float?
  width Float?
  color tattoo_color?
  id_design BigInt?
  description String
  scheduled_at DateTime?
  duration Float?
  finished_at DateTime?
  is_paid Boolean @default(false)
  created_at        DateTime @default(now()) @db.Timestamp(6)

  images appointment_images[]
  review reviews?
  user          users @relation("UserAppointments", fields: [id_user], references: [id])
  tattoo_artist users? @relation("TattooArtistAppointments", fields: [id_tattoo_artist], references: [id])
  studio studios? @relation(fields: [id_studio], references: [id])
  design designs? @relation(fields: [id_design],references: [id])
}

model codes{
 	id              BigInt @id @default(sequence())
	id_user 		BigInt
	code 			String
	is_active 		Boolean @default(true)
	uses_remaining 	BigInt @default(1)
	type 			String
	expires_at 		DateTime @db.Timestamp(6)
	created_at 		DateTime @default(now()) @db.Timestamp(6)

	user users @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model tokens{
  	id          BigInt @id @default(sequence())
	token      	String
	id_user    	BigInt
	is_active   Boolean  @default(true)
	created_at 	DateTime @default(now()) @db.Timestamp(6)
	expires_at 	DateTime @db.Timestamp(6)

	users      users    @relation(fields: [id_user], references: [id], onDelete: Cascade)
}

model plans {
	id BigInt @id @default(sequence())
	name String
	description String?
	price Float
	pricing_model pricing_model @default(standard)
	currency String
	features Json?
	billing_cycle billing_cycle
	code String @unique
	trial_days Int
	is_active Boolean
	identifier String @unique
	banner_url String?
	for_studios Boolean @default(false)

	created_at DateTime @db.Timestamp(6) @default(now())
	updated_at DateTime @db.Timestamp(6) @updatedAt @default(now())
	subscriptions subscriptions[]
}

enum pricing_model {
	volume
	standard
}

model subscriptions {
	id BigInt @id @default(sequence())
	id_user BigInt?
	id_studio BigInt?
	id_plan BigInt
	start_date DateTime @db.Timestamp(6)
	card_brand String?
	card_last_four String?
	billing_anchor Int?
	end_date DateTime @db.Timestamp(6)
	status subscription_status @default(trialing)
	canceled_at DateTime? @db.Timestamp(6)
	next_billing_date DateTime? @db.Timestamp(6)
	identifier String @unique

	created_at DateTime @db.Timestamp(6) @default(now())
	user users? @relation(fields: [id_user], references: [id])
	studio studios? @relation(fields: [id_studio], references: [id])
	plan plans @relation(fields: [id_plan], references: [id])
	payments payments[]
}

model payments {
	id BigInt @id @default(sequence())
	id_user BigInt?
	id_studio BigInt?
	id_subscription BigInt?
	status payment_status @default(pending)
	text String?
	price Float
	currency String
	items Json?
	identifier String @unique
	total_formated String

	created_at DateTime @db.Timestamp(6) @default(now())
	updated_at DateTime @db.Timestamp(6) @default(now()) @updatedAt
	user users? @relation(fields: [id_user], references: [id])
	studio studios? @relation(fields: [id_studio], references: [id])
	subscription subscriptions? @relation(fields: [id_subscription], references: [id])
}

enum payment_status {
	pending
	paid
	refused
	refunded
}

enum subscription_status {
	trialing
	paused
	active
	past_due
	canceled
}

enum billing_cycle {
	monthly
	yearly
}

enum tattoo_color {
	black
	full_color
}

enum tattoo_area {
	arm
	leg
	back
	chest
	abdomen
	neck
	head
	hand
	foot
	hip
	other
}

enum appointment_status {
	scheduled
	canceled
	created
	reviewed
}

enum role_name {
  admin
  user
  tattooArtist
}
